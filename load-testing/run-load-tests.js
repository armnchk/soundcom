#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è BudgetBuddy
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã
 */

import { spawn } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
const testConfigs = {
  smoke: {
    name: 'Smoke Test',
    file: 'smoke-test.yml',
    description: '–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏'
  },
  load: {
    name: 'Load Test',
    file: 'artillery-config.yml',
    description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'
  },
  stress: {
    name: 'Stress Test',
    file: 'stress-test.yml',
    description: '–¢–µ—Å—Ç –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É'
  },
  spike: {
    name: 'Spike Test',
    file: 'spike-test.yml',
    description: '–¢–µ—Å—Ç –Ω–∞ —Ä–µ–∑–∫–∏–µ —Å–∫–∞—á–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏'
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerHealth(baseUrl) {
  try {
    const response = await fetch(`${baseUrl}/api/releases/health`);
    if (response.ok) {
      log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω', 'green');
      return true;
    }
  } catch (error) {
    log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'red');
    log(`–û—à–∏–±–∫–∞: ${error.message}`, 'red');
    return false;
  }
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
function runTest(config, options = {}) {
  return new Promise((resolve, reject) => {
    const configPath = path.join(__dirname, config.file);
    
    if (!fs.existsSync(configPath)) {
      reject(new Error(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${configPath}`));
      return;
    }

    log(`\nüöÄ –ó–∞–ø—É—Å–∫ ${config.name}...`, 'cyan');
    log(`üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${config.file}`, 'blue');
    log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${config.description}`, 'yellow');

    const args = ['run', configPath];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
    if (options.output) {
      args.push('--output', options.output);
    }
    
    if (options.target) {
      args.push('--target', options.target);
    }

    const artillery = spawn('npx', ['artillery', ...args], {
      stdio: 'inherit',
      shell: true
    });

    artillery.on('close', (code) => {
      if (code === 0) {
        log(`‚úÖ ${config.name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`, 'green');
        resolve();
      } else {
        log(`‚ùå ${config.name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: ${code})`, 'red');
        reject(new Error(`–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`));
      }
    });

    artillery.on('error', (error) => {
      log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Artillery: ${error.message}`, 'red');
      reject(error);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
function generateReport(testName, results) {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const reportPath = path.join(__dirname, 'reports', `${testName}-${timestamp}.json`);
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É reports –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  const reportsDir = path.dirname(reportPath);
  if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir, { recursive: true });
  }

  fs.writeFileSync(reportPath, JSON.stringify(results, null, 2));
  log(`üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`, 'green');
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const args = process.argv.slice(2);
  const testType = args[0] || 'load';
  const target = args[1] || 'http://localhost:5000';
  const output = args[2] || `reports/${testType}-report.json`;

  log('üß™ BudgetBuddy Load Testing Suite', 'bright');
  log('================================', 'bright');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...', 'yellow');
  const isHealthy = await checkServerHealth(target);
  
  if (!isHealthy) {
    log('\n‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞', 'red');
    log(`   ${target}`, 'red');
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Artillery
  try {
    await new Promise((resolve, reject) => {
      const check = spawn('npx', ['artillery', '--version'], { stdio: 'pipe' });
      check.on('close', (code) => code === 0 ? resolve() : reject());
      check.on('error', reject);
    });
  } catch (error) {
    log('\n‚ùå Artillery.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...', 'yellow');
    try {
      await new Promise((resolve, reject) => {
        const install = spawn('npm', ['install', '-g', 'artillery'], { stdio: 'inherit' });
        install.on('close', (code) => code === 0 ? resolve() : reject());
        install.on('error', reject);
      });
      log('‚úÖ Artillery.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'green');
    } catch (installError) {
      log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Artillery.js', 'red');
      log('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: npm install -g artillery', 'yellow');
      process.exit(1);
    }
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
  const config = testConfigs[testType];
  if (!config) {
    log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞: ${testType}`, 'red');
    log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:', 'yellow');
    Object.keys(testConfigs).forEach(key => {
      log(`  - ${key}: ${testConfigs[key].name}`, 'blue');
    });
    process.exit(1);
  }

  try {
    await runTest(config, { target, output });
    
    log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!', 'green');
    log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${output}`, 'blue');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (fs.existsSync(output)) {
      const results = JSON.parse(fs.readFileSync(output, 'utf8'));
      log('\nüìà –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', 'cyan');
      log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${results.aggregate?.counters?.['http.requests'] || 'N/A'}`, 'blue');
      log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${results.aggregate?.counters?.['http.responses'] || 'N/A'}`, 'green');
      log(`   –û—à–∏–±–æ–∫: ${results.aggregate?.counters?.['http.response_time.p95'] || 'N/A'}`, 'red');
    }
    
  } catch (error) {
    log(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`, 'red');
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  log('\n\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 'yellow');
  process.exit(0);
});

process.on('SIGTERM', () => {
  log('\n\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'yellow');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
  process.exit(1);
});
