#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–æ –≤—Ä–µ–º—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * –°–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

import { spawn } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const config = {
  interval: 5000, // –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –≤ –º—Å
  duration: 600000, // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –º—Å (10 –º–∏–Ω—É—Ç)
  outputFile: path.join(__dirname, 'reports', 'performance-metrics.json')
};

// –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞
let metrics = {
  timestamp: [],
  cpu: [],
  memory: [],
  network: [],
  database: [],
  responseTime: []
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã
function getSystemMetrics() {
  return new Promise((resolve) => {
    const start = Date.now();
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ top (Linux/macOS)
    const top = spawn('top', ['-l', '1', '-n', '0'], { stdio: 'pipe' });
    let output = '';
    
    top.stdout.on('data', (data) => {
      output += data.toString();
    });
    
    top.on('close', () => {
      const lines = output.split('\n');
      let cpuUsage = 0;
      let memoryUsage = 0;
      
      // –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ top
      for (const line of lines) {
        if (line.includes('CPU usage:')) {
          const match = line.match(/(\d+\.\d+)% user/);
          if (match) {
            cpuUsage = parseFloat(match[1]);
          }
        }
        if (line.includes('PhysMem:')) {
          const match = line.match(/(\d+)M used/);
          if (match) {
            memoryUsage = parseInt(match[1]);
          }
        }
      }
      
      resolve({
        cpu: cpuUsage,
        memory: memoryUsage,
        timestamp: new Date().toISOString()
      });
    });
    
    top.on('error', () => {
      // Fallback –¥–ª—è Windows –∏–ª–∏ –µ—Å–ª–∏ top –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      resolve({
        cpu: 0,
        memory: 0,
        timestamp: new Date().toISOString()
      });
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ API
async function testApiResponseTime(baseUrl) {
  const start = Date.now();
  
  try {
    const response = await fetch(`${baseUrl}/api/releases?limit=10`);
    const end = Date.now();
    
    return {
      responseTime: end - start,
      statusCode: response.status,
      success: response.ok
    };
  } catch (error) {
    return {
      responseTime: -1,
      statusCode: 0,
      success: false,
      error: error.message
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
async function getDatabaseMetrics() {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
  // –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ pg_stat_* —Ç–∞–±–ª–∏—Ü—ã
  return {
    activeConnections: 0,
    queriesPerSecond: 0,
    cacheHitRatio: 0
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
function saveMetrics() {
  const reportsDir = path.dirname(config.outputFile);
  if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir, { recursive: true });
  }
  
  const summary = {
    collectedAt: new Date().toISOString(),
    duration: config.duration,
    interval: config.interval,
    metrics: {
      system: {
        avgCpu: metrics.cpu.reduce((a, b) => a + b, 0) / metrics.cpu.length,
        maxCpu: Math.max(...metrics.cpu),
        avgMemory: metrics.memory.reduce((a, b) => a + b, 0) / metrics.memory.length,
        maxMemory: Math.max(...metrics.memory)
      },
      api: {
        avgResponseTime: metrics.responseTime.reduce((a, b) => a + b, 0) / metrics.responseTime.length,
        maxResponseTime: Math.max(...metrics.responseTime),
        successRate: metrics.responseTime.filter(t => t > 0).length / metrics.responseTime.length
      }
    },
    rawData: metrics
  };
  
  fs.writeFileSync(config.outputFile, JSON.stringify(summary, null, 2));
  console.log(`üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${config.outputFile}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
function displayCurrentMetrics() {
  const latest = {
    cpu: metrics.cpu[metrics.cpu.length - 1] || 0,
    memory: metrics.memory[metrics.memory.length - 1] || 0,
    responseTime: metrics.responseTime[metrics.responseTime.length - 1] || 0
  };
  
  console.log(`\rüñ•Ô∏è  CPU: ${latest.cpu.toFixed(1)}% | ` +
              `üíæ Memory: ${latest.memory}MB | ` +
              `‚ö° Response: ${latest.responseTime}ms`, '');
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function startMonitoring(baseUrl = 'http://localhost:5000') {
  console.log('üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
  console.log(`üì° –¶–µ–ª–µ–≤–æ–π URL: ${baseUrl}`);
  console.log(`‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${config.interval}ms`);
  console.log(`‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${config.duration / 1000}s`);
  console.log('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n');
  
  const startTime = Date.now();
  const interval = setInterval(async () => {
    try {
      // –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
      const systemMetrics = await getSystemMetrics();
      metrics.cpu.push(systemMetrics.cpu);
      metrics.memory.push(systemMetrics.memory);
      metrics.timestamp.push(systemMetrics.timestamp);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º API
      const apiMetrics = await testApiResponseTime(baseUrl);
      metrics.responseTime.push(apiMetrics.responseTime);
      
      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ë–î
      const dbMetrics = await getDatabaseMetrics();
      metrics.database.push(dbMetrics);
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
      displayCurrentMetrics();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
      if (Date.now() - startTime >= config.duration) {
        clearInterval(interval);
        console.log('\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
        saveMetrics();
        process.exit(0);
      }
      
    } catch (error) {
      console.error(`\n‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: ${error.message}`);
    }
  }, config.interval);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    clearInterval(interval);
    console.log('\n‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    saveMetrics();
    process.exit(0);
  });
  
  process.on('SIGTERM', () => {
    clearInterval(interval);
    console.log('\n‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
    saveMetrics();
    process.exit(0);
  });
}

// –ó–∞–ø—É—Å–∫
const baseUrl = process.argv[2] || 'http://localhost:5000';
startMonitoring(baseUrl).catch(error => {
  console.error(`üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`);
  process.exit(1);
});
