{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red224\green226\blue232;\red20\green21\blue28;}
{\*\expandedcolortbl;;\cssrgb\c90196\c90980\c92941;\cssrgb\c10196\c10980\c14510;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
Build a full-stack web application that allows users to browse, rate, and comment on music releases (albums and singles). The application should include the following features:\
General requirements:\
* A catalog of releases (title, artist, release date, cover image, streaming links).\
* Each release page should display:\
    * Release info (title, artist, cover, release date, streaming links).\
    * Average rating (calculated from all user ratings).\
    * If the logged-in user has already rated the release, show their rating below the average.\
    * A comment section with ratings and text reviews.\
User authentication:\
* Users must sign in/up via Google authentication.\
* During first registration, users must choose a unique nickname (no duplicates allowed).\
* Only authenticated users can rate or leave comments.\
Ratings and comments:\
* Users can:\
    1. Leave only a rating (1\'9610).\
    2. Leave a rating + comment.\
* Users can edit or delete their own comments and ratings.\
* Users can mark their comments as anonymous. If anonymous, display "Anonymous" instead of the nickname.\
* Comments must have a limit of 1000 characters.\
* Other users can like or dislike each comment.\
* Each comment should have a "Report" button", sending the report to the site\'92s admin panel for moderation.\
* Comments can be sorted by date, likes, or rating.\
Pages:\
1. Homepage:\
    * Section for newest releases.\
    * Section for most discussed / most commented releases.\
2. Release page:\
    * Full release info.\
    * Ratings + comments block with pagination/lazy loading.\
3. Artist page:\
    * List of all releases from that artist.\
    * Ability to click through to each release page.\
4. Search:\
    * A search bar to look up releases by title, artist, or keyword.\
5. User profile page:\
    * Shows all of the user\'92s comments and ratings.\
6. Filtering:\
    * Filter releases by genre, year, or artist.\
7. Subscriptions:\
    * Users can subscribe to an artist or release and receive notifications about new comments or releases.\
Admin panel:\
* Manage releases (add, edit, delete manually).\
* Hide or delete comments after reports.\
* Manage users (e.g., block users for violations).\
Technical requirements:\
* Backend: Node.js (Express) or Python (FastAPI/Django).\
* Database: PostgreSQL or MongoDB.\
* Frontend: React with Tailwind CSS.\
* Authentication: Google OAuth (e.g., Firebase Auth or OAuth library).\
* Integrate with streaming APIs (Spotify, Apple Music) to automatically fetch releases and metadata.\
* Make the code modular and production-ready, with clear separation of backend (API, database) and frontend (React).\
\
Database Schema (PostgreSQL example)\
Users: id, google_id, nickname, email, created_at\uc0\u8232 Artists: id, name, created_at\u8232 Releases: id, artist_id, title, release_date, cover_url, streaming_links, created_at\u8232 Ratings: id, user_id, release_id, score, created_at, updated_at\u8232 Comments: id, user_id (nullable if anonymous), release_id, text (max 1000 chars), rating (optional), is_anonymous, created_at, updated_at\u8232 CommentReactions: id, comment_id, user_id, reaction_type (like/dislike)\u8232 Reports: id, comment_id, reported_by, reason (optional), created_at, status (pending/resolved)\
\
API Endpoints (REST example)\
Users:\
* POST /auth/google \'96 login/register via Google OAuth\
* GET /users/:id \'96 get user profile (ratings & comments)\
Artists:\
* GET /artists \'96 list all artists\
* GET /artists/:id \'96 artist page with releases\
Releases:\
* GET /releases \'96 list releases (with optional filters: genre, year, artist)\
* GET /releases/:id \'96 release page with ratings & comments\
* POST /releases \'96 add release (admin only)\
* PUT /releases/:id \'96 edit release (admin only)\
* DELETE /releases/:id \'96 delete release (admin only)\
Ratings:\
* POST /releases/:id/rate \'96 add or update user rating\
* GET /releases/:id/ratings \'96 get average rating\
Comments:\
* POST /releases/:id/comments \'96 add comment (with optional rating & anonymous flag)\
* PUT /comments/:id \'96 edit comment (owner only)\
* DELETE /comments/:id \'96 delete comment (owner only)\
* POST /comments/:id/react \'96 like/dislike comment\
* POST /comments/:id/report \'96 report comment\
\
Frontend Components\
* Homepage \'96 displays newest and most discussed releases\
* ReleasePage \'96 release info + average rating + comments block with pagination/lazy loading\
* ArtistPage \'96 list of artist releases\
* SearchBar \'96 search by release name, artist, or keyword\
* UserProfile \'96 displays user\'92s ratings & comments\
* CommentBlock \'96 list of comments, like/dislike, report button\
* CommentForm \'96 add/edit comment & rating, anonymous toggle\
* AdminPanel \'96 manage releases, comments, reports, users}