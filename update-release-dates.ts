// –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç —Ä–µ–ª–∏–∑–æ–≤ —á–µ—Ä–µ–∑ iTunes API
import { musicAPI } from './server/combined-music-api.ts';
import { db } from './server/db.ts';
import { sql } from 'drizzle-orm';
import { releases } from './shared/schema.ts';

async function updateReleaseDates() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç —Ä–µ–ª–∏–∑–æ–≤...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–ª–∏–∑—ã –±–µ–∑ –¥–∞—Ç
    const result = await db.execute(sql.raw(`
        SELECT 
            r.id,
            r.title as release_title,
            a.name as artist_name
        FROM releases r
        JOIN artists a ON r.artist_id = a.id
        WHERE r.release_date IS NULL
        ORDER BY r.id
    `));
    
    const totalReleases = result.rows.length;
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–∏–∑–æ–≤ –±–µ–∑ –¥–∞—Ç: ${totalReleases}\n`);
    
    if (totalReleases === 0) {
        console.log('‚úÖ –í—Å–µ —Ä–µ–ª–∏–∑—ã —É–∂–µ –∏–º–µ—é—Ç –¥–∞—Ç—ã!');
        return;
    }
    
    let processed = 0;
    let updated = 0;
    let notFound = 0;
    let errors = 0;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞–º–∏ –ø–æ 50 —Ä–µ–ª–∏–∑–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const batchSize = 50;
    const totalBatches = Math.ceil(totalReleases / batchSize);
    
    for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {
        const startIndex = batchIndex * batchSize;
        const endIndex = Math.min(startIndex + batchSize, totalReleases);
        const batch = result.rows.slice(startIndex, endIndex);
        
        console.log(`\nüì¶ –ë–∞—Ç—á ${batchIndex + 1}/${totalBatches} (—Ä–µ–ª–∏–∑—ã ${startIndex + 1}-${endIndex})`);
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        
        for (const release of batch) {
            processed++;
            const artistName = String(release.artist_name);
            const releaseTitle = String(release.release_title);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            const progressPercent = Math.round((processed / totalReleases) * 100);
            console.log(`[${processed}/${totalReleases}] (${progressPercent}%) ${artistName} - ${releaseTitle}`);
            
            try {
                const foundDate = await musicAPI.findReleaseDate(artistName, releaseTitle);
                
                if (foundDate) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    await db.update(releases)
                        .set({ releaseDate: foundDate })
                        .where(sql`id = ${release.id}`);
                    
                    updated++;
                    console.log(`  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${foundDate}`);
                } else {
                    notFound++;
                    console.log(`  ‚ùå –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                }
                
            } catch (error) {
                errors++;
                console.log(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`);
            }
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (0.5 —Å–µ–∫—É–Ω–¥—ã)
            await new Promise(resolve => setTimeout(resolve, 500));
        }
        
        // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
        console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞—Ç—á–∞:`);
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`);
        console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: ${notFound}`);
        console.log(`‚ö†Ô∏è –û—à–∏–±–æ–∫: ${errors}`);
        console.log(`üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${processed}/${totalReleases}`);
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (2 —Å–µ–∫—É–Ω–¥—ã)
        if (batchIndex < totalBatches - 1) {
            console.log('\n‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏...');
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const successRate = Math.round((updated / totalReleases) * 100);
    
    console.log('\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log(`üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalReleases} —Ä–µ–ª–∏–∑–æ–≤`);
    console.log(`‚úÖ –î–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${updated}`);
    console.log(`‚ùå –î–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${notFound}`);
    console.log(`‚ö†Ô∏è –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${errors}`);
    console.log(`üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${successRate}%`);
    console.log(`üéµ –†–µ–ª–∏–∑–æ–≤ —Å –¥–∞—Ç–∞–º–∏ —Å—Ç–∞–ª–æ –±–æ–ª—å—à–µ –Ω–∞ ${updated}!`);
    
    if (updated > 0) {
        console.log(`\nüöÄ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ${updated} —Ä–µ–ª–∏–∑–æ–≤! –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–æ.`);
    }
}

updateReleaseDates().catch(console.error);