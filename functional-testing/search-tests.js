#!/usr/bin/env node

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è BudgetBuddy
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –ø–æ–∏—Å–∫–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */

import fetch from 'node-fetch';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  baseUrl: process.env.TEST_BASE_URL || 'http://localhost:5000',
  timeout: 10000
};

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
const searchTestCases = [
  // –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
  { query: '', description: '–ü—É—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å' },
  { query: 'a', description: '–û–¥–Ω–æ–±—É–∫–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å' },
  { query: 'test', description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å' },
  { query: 'rock', description: '–ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É' },
  { query: '2023', description: '–ü–æ–∏—Å–∫ –ø–æ –≥–æ–¥—É' },
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  { query: 'test & rock', description: '–ó–∞–ø—Ä–æ—Å —Å –∞–º–ø–µ—Ä—Å–∞–Ω–¥–æ–º' },
  { query: 'test-rock', description: '–ó–∞–ø—Ä–æ—Å —Å –¥–µ—Ñ–∏—Å–æ–º' },
  { query: 'test_rock', description: '–ó–∞–ø—Ä–æ—Å —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º' },
  { query: 'test+rock', description: '–ó–∞–ø—Ä–æ—Å —Å –ø–ª—é—Å–æ–º' },
  
  // –î–ª–∏–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  { query: 'very long search query that might test the limits', description: '–î–ª–∏–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å' },
  
  // Unicode —Å–∏–º–≤–æ–ª—ã
  { query: '—Ç–µ—Å—Ç', description: '–ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å' },
  { query: 'caf√©', description: '–ó–∞–ø—Ä–æ—Å —Å –¥–∏–∞–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–Ω–∞–∫–∞–º–∏' },
  { query: 'üéµ', description: '–ó–∞–ø—Ä–æ—Å —Å —ç–º–æ–¥–∑–∏' },
  
  // SQL injection –ø–æ–ø—ã—Ç–∫–∏
  { query: "'; DROP TABLE releases; --", description: 'SQL injection –ø–æ–ø—ã—Ç–∫–∞' },
  { query: "' OR '1'='1", description: 'SQL injection –ø–æ–ø—ã—Ç–∫–∞ 2' },
  
  // XSS –ø–æ–ø—ã—Ç–∫–∏
  { query: '<script>alert("xss")</script>', description: 'XSS –ø–æ–ø—ã—Ç–∫–∞' },
  { query: '"><script>alert("xss")</script>', description: 'XSS –ø–æ–ø—ã—Ç–∫–∞ 2' },
  
  // –ü—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  { query: '   ', description: '–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã' },
  { query: '\t\n', description: '–¢–æ–ª—å–∫–æ whitespace —Å–∏–º–≤–æ–ª—ã' },
  { query: '!@#$%^&*()', description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã' }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(url, options = {}) {
  const fullUrl = url.startsWith('http') ? url : `${config.baseUrl}${url}`;
  
  const defaultOptions = {
    timeout: config.timeout,
    headers: {
      'Content-Type': 'application/json',
      'User-Agent': 'Search-Test-Suite/1.0'
    }
  };

  const requestOptions = { ...defaultOptions, ...options };
  
  try {
    const response = await fetch(fullUrl, requestOptions);
    const data = await response.text();
    
    let jsonData;
    try {
      jsonData = JSON.parse(data);
    } catch {
      jsonData = data;
    }
    
    return {
      ok: response.ok,
      status: response.status,
      statusText: response.statusText,
      headers: Object.fromEntries(response.headers.entries()),
      data: jsonData,
      url: fullUrl
    };
  } catch (error) {
    return {
      ok: false,
      status: 0,
      statusText: error.message,
      headers: {},
      data: null,
      url: fullUrl,
      error: error.message
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø–æ–∏—Å–∫–∞
async function runSearchTest(testCase, endpoint) {
  const encodedQuery = encodeURIComponent(testCase.query);
  const url = `${endpoint}?q=${encodedQuery}`;
  
  log(`\nüîç ${testCase.description}`, 'cyan');
  log(`   –ó–∞–ø—Ä–æ—Å: "${testCase.query}"`, 'blue');
  log(`   URL: ${url}`, 'blue');
  
  const response = await makeRequest(url);
  
  const result = {
    testCase,
    endpoint,
    url,
    response,
    passed: false,
    issues: []
  };
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∏
  if (!response.ok) {
    result.issues.push(`HTTP –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
  }
  
  if (response.data === null) {
    result.issues.push('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
  }
  
  if (response.data && !Array.isArray(response.data)) {
    result.issues.push('–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
  }
  
  if (response.data && Array.isArray(response.data)) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const results = response.data;
    for (const item of results) {
      if (typeof item === 'object' && item !== null) {
        for (const [key, value] of Object.entries(item)) {
          if (typeof value === 'string') {
            if (value.includes('<script>') || value.includes('javascript:')) {
              result.issues.push(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ø–æ–ª–µ ${key}`);
            }
          }
        }
      }
    }
  }
  
  result.passed = result.issues.length === 0;
  
  if (result.passed) {
    log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ (${response.data?.length || 0} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)`, 'green');
  } else {
    log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω`, 'red');
    result.issues.forEach(issue => log(`      ‚Ä¢ ${issue}`, 'red'));
  }
  
  return result;
}

// –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–∏–∑–æ–≤
async function testReleaseSearch() {
  log('\nüéµ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê –†–ï–õ–ò–ó–û–í', 'bright');
  log('================================', 'bright');
  
  const results = [];
  
  for (const testCase of searchTestCases) {
    const result = await runSearchTest(testCase, '/api/releases/search');
    results.push(result);
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
  log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏', 'yellow');
  
  const sortOptions = ['rating_desc', 'rating_asc', 'date_desc', 'date_asc'];
  for (const sortBy of sortOptions) {
    const testCase = { query: 'test', description: `–ü–æ–∏—Å–∫ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π: ${sortBy}` };
    const result = await runSearchTest(testCase, `/api/releases/search?sortBy=${sortBy}`);
    results.push(result);
  }
  
  return results;
}

// –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
async function testArtistSearch() {
  log('\nüë§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ï–ô', 'bright');
  log('====================================', 'bright');
  
  const results = [];
  
  for (const testCase of searchTestCases) {
    const result = await runSearchTest(testCase, '/api/artists/search');
    results.push(result);
  }
  
  return results;
}

// –¢–µ—Å—Ç –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞ (—Ä–µ–¥–∏—Ä–µ–∫—Ç)
async function testGeneralSearch() {
  log('\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–©–ï–ì–û –ü–û–ò–°–ö–ê', 'bright');
  log('==============================', 'bright');
  
  const results = [];
  
  for (const testCase of searchTestCases.slice(0, 5)) { // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    const result = await runSearchTest(testCase, '/api/search');
    results.push(result);
  }
  
  return results;
}

// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
async function testSearchPerformance() {
  log('\n‚ö° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ü–û–ò–°–ö–ê', 'bright');
  log('==========================================', 'bright');
  
  const testQueries = ['test', 'rock', '2023', 'a', 'very long query'];
  const results = [];
  
  for (const query of testQueries) {
    const startTime = Date.now();
    const response = await makeRequest(`/api/releases/search?q=${encodeURIComponent(query)}`);
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    const result = {
      query,
      duration,
      success: response.ok,
      resultsCount: response.data?.length || 0
    };
    
    results.push(result);
    
    const status = result.success ? '‚úÖ' : '‚ùå';
    const color = duration < 1000 ? 'green' : duration < 3000 ? 'yellow' : 'red';
    
    log(`   ${status} "${query}": ${duration}ms (${result.resultsCount} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)`, color);
  }
  
  return results;
}

// –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
async function testSearchSecurity() {
  log('\nüõ°Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–û–ò–°–ö–ê', 'bright');
  log('====================================', 'bright');
  
  const securityTests = [
    { query: "'; DROP TABLE releases; --", description: 'SQL injection' },
    { query: '<script>alert("xss")</script>', description: 'XSS –ø–æ–ø—ã—Ç–∫–∞' },
    { query: '"><img src=x onerror=alert(1)>', description: 'XSS –ø–æ–ø—ã—Ç–∫–∞ 2' },
    { query: '${7*7}', description: 'Template injection' },
    { query: '{{7*7}}', description: 'Template injection 2' },
    { query: 'javascript:alert(1)', description: 'JavaScript injection' },
    { query: 'data:text/html,<script>alert(1)</script>', description: 'Data URI injection' }
  ];
  
  const results = [];
  
  for (const test of securityTests) {
    const response = await makeRequest(`/api/releases/search?q=${encodeURIComponent(test.query)}`);
    
    const result = {
      test,
      response,
      secure: true,
      issues: []
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –∫–æ–¥
    if (response.data && typeof response.data === 'string') {
      if (response.data.includes('<script>') || response.data.includes('javascript:')) {
        result.secure = false;
        result.issues.push('–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–¥ –≤ –æ—Ç–≤–µ—Ç–µ');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç SQL –æ—à–∏–±–æ–∫
    if (response.data && typeof response.data === 'string') {
      if (response.data.toLowerCase().includes('sql') || 
          response.data.toLowerCase().includes('syntax error') ||
          response.data.toLowerCase().includes('database')) {
        result.secure = false;
        result.issues.push('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã SQL –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ');
      }
    }
    
    results.push(result);
    
    const status = result.secure ? '‚úÖ' : '‚ùå';
    const color = result.secure ? 'green' : 'red';
    
    log(`   ${status} ${test.description}: ${result.secure ? '–ë–µ–∑–æ–ø–∞—Å–Ω–æ' : '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã'}`, color);
    
    if (!result.secure) {
      result.issues.forEach(issue => log(`      ‚Ä¢ ${issue}`, 'red'));
    }
  }
  
  return results;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runAllSearchTests() {
  log('üîç BudgetBuddy Search Testing Suite', 'bright');
  log('===================================', 'bright');
  log(`üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${config.baseUrl}`, 'blue');
  
  const allResults = {
    timestamp: new Date().toISOString(),
    baseUrl: config.baseUrl,
    tests: {
      releaseSearch: [],
      artistSearch: [],
      generalSearch: [],
      performance: [],
      security: []
    }
  };
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ä–µ–ª–∏–∑–æ–≤
    allResults.tests.releaseSearch = await testReleaseSearch();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    allResults.tests.artistSearch = await testArtistSearch();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—â–∏–π –ø–æ–∏—Å–∫
    allResults.tests.generalSearch = await testGeneralSearch();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    allResults.tests.performance = await testSearchPerformance();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    allResults.tests.security = await testSearchSecurity();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const outputFile = path.join(__dirname, 'reports', 'search-test-results.json');
    const reportsDir = path.dirname(outputFile);
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir, { recursive: true });
    }
    
    fs.writeFileSync(outputFile, JSON.stringify(allResults, null, 2));
    log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputFile}`, 'green');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
    showSearchSummary(allResults);
    
  } catch (error) {
    log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Ç–æ–≥–æ–≤
function showSearchSummary(results) {
  const { releaseSearch, artistSearch, generalSearch, performance, security } = results.tests;
  
  const totalTests = releaseSearch.length + artistSearch.length + generalSearch.length + security.length;
  const passedTests = [
    ...releaseSearch,
    ...artistSearch,
    ...generalSearch,
    ...security
  ].filter(r => r.passed).length;
  
  const successRate = totalTests > 0 ? ((passedTests / totalTests) * 100).toFixed(1) : 0;
  
  log('\nüìà –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–û–ò–°–ö–ê', 'bright');
  log('=============================', 'bright');
  log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`, 'blue');
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`, 'green');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalTests - passedTests}`, 'red');
  log(`üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`, successRate >= 90 ? 'green' : 'red');
  
  // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  if (performance.length > 0) {
    const avgDuration = performance.reduce((sum, p) => sum + p.duration, 0) / performance.length;
    const maxDuration = Math.max(...performance.map(p => p.duration));
    
    log(`\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:`, 'yellow');
    log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgDuration.toFixed(0)}ms`, avgDuration < 1000 ? 'green' : 'yellow');
    log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${maxDuration}ms`, maxDuration < 3000 ? 'green' : 'red');
  }
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  const securityIssues = security.filter(s => !s.secure).length;
  if (securityIssues > 0) {
    log(`\nüõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:`, 'red');
    log(`   –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${securityIssues}`, 'red');
  } else {
    log(`\nüõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã`, 'green');
  }
  
  if (successRate >= 95) {
    log('\nüéâ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ.', 'green');
  } else if (successRate >= 80) {
    log('\n‚ö†Ô∏è  –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.', 'yellow');
  } else {
    log('\nüö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã! –ü–æ–∏—Å–∫ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏.', 'red');
  }
}

// –ó–∞–ø—É—Å–∫
runAllSearchTests().catch(error => {
  log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
  process.exit(1);
});
