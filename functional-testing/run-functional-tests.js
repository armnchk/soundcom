#!/usr/bin/env node

/**
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BudgetBuddy
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–∫–ª—é—á–∞—è –ø–æ–∏—Å–∫
 */

import fetch from 'node-fetch';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  baseUrl: process.env.TEST_BASE_URL || 'http://localhost:5000',
  timeout: 10000,
  retries: 3,
  outputFile: path.join(__dirname, 'reports', 'functional-test-results.json')
};

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
let testResults = {
  timestamp: new Date().toISOString(),
  baseUrl: config.baseUrl,
  summary: {
    total: 0,
    passed: 0,
    failed: 0,
    skipped: 0
  },
  tests: []
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(url, options = {}) {
  const fullUrl = url.startsWith('http') ? url : `${config.baseUrl}${url}`;
  
  const defaultOptions = {
    timeout: config.timeout,
    headers: {
      'Content-Type': 'application/json',
      'User-Agent': 'Functional-Test-Suite/1.0'
    }
  };

  const requestOptions = { ...defaultOptions, ...options };
  
  try {
    const response = await fetch(fullUrl, requestOptions);
    const data = await response.text();
    
    let jsonData;
    try {
      jsonData = JSON.parse(data);
    } catch {
      jsonData = data;
    }
    
    return {
      ok: response.ok,
      status: response.status,
      statusText: response.statusText,
      headers: Object.fromEntries(response.headers.entries()),
      data: jsonData,
      url: fullUrl
    };
  } catch (error) {
    return {
      ok: false,
      status: 0,
      statusText: error.message,
      headers: {},
      data: null,
      url: fullUrl,
      error: error.message
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
async function runTest(testName, testFunction) {
  log(`\nüß™ ${testName}`, 'cyan');
  
  const testResult = {
    name: testName,
    status: 'pending',
    startTime: new Date().toISOString(),
    endTime: null,
    duration: 0,
    assertions: [],
    error: null
  };

  testResults.tests.push(testResult);
  testResults.summary.total++;

  try {
    await testFunction(testResult);
    testResult.status = 'passed';
    testResult.endTime = new Date().toISOString();
    testResult.duration = new Date(testResult.endTime) - new Date(testResult.startTime);
    testResults.summary.passed++;
    log(`‚úÖ ${testName} - –ü–†–û–ô–î–ï–ù`, 'green');
  } catch (error) {
    testResult.status = 'failed';
    testResult.endTime = new Date().toISOString();
    testResult.duration = new Date(testResult.endTime) - new Date(testResult.startTime);
    testResult.error = error.message;
    testResults.summary.failed++;
    log(`‚ùå ${testName} - –ü–†–û–í–ê–õ–ï–ù`, 'red');
    log(`   –û—à–∏–±–∫–∞: ${error.message}`, 'red');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
function assert(testResult, condition, message) {
  const assertion = {
    condition,
    message,
    passed: !!condition
  };
  
  testResult.assertions.push(assertion);
  
  if (!condition) {
    throw new Error(`Assertion failed: ${message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerHealth() {
  log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...', 'yellow');
  
  const response = await makeRequest('/api/releases/health');
  
  if (!response.ok) {
    throw new Error(`–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status} ${response.statusText}`);
  }
  
  log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω', 'green');
  return true;
}

// –¢–ï–°–¢–´ API

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
async function testHealthEndpoint(testResult) {
  const response = await makeRequest('/api/releases/health');
  
  assert(testResult, response.ok, 'Health endpoint –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200');
  assert(testResult, response.status === 200, '–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 200');
  assert(testResult, response.data && response.data.success === true, '–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å success: true');
  assert(testResult, response.data.message, '–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
}

// –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–ª–∏–∑–æ–≤
async function testGetReleases(testResult) {
  const response = await makeRequest('/api/releases');
  
  assert(testResult, response.ok, '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º');
  assert(testResult, Array.isArray(response.data), '–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
  assert(testResult, response.data.length >= 0, '–ú–∞—Å—Å–∏–≤ —Ä–µ–ª–∏–∑–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–ª–∏–∑–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (response.data.length > 0) {
    const release = response.data[0];
    assert(testResult, release.id, '–†–µ–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å ID');
    assert(testResult, release.title, '–†–µ–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ');
    assert(testResult, release.artist, '–†–µ–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
  }
}

// –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Ä–µ–ª–∏–∑–æ–≤
async function testSearchReleases(testResult) {
  // –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
  const emptyResponse = await makeRequest('/api/releases/search?q=');
  assert(testResult, emptyResponse.ok, '–ü–æ–∏—Å–∫ —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å');
  
  // –¢–µ—Å—Ç —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
  const searchResponse = await makeRequest('/api/releases/search?q=test');
  assert(testResult, searchResponse.ok, '–ü–æ–∏—Å–∫ —Ä–µ–ª–∏–∑–æ–≤ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å');
  assert(testResult, Array.isArray(searchResponse.data), '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
  
  // –¢–µ—Å—Ç —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
  const sortedResponse = await makeRequest('/api/releases/search?q=test&sortBy=rating_desc');
  assert(testResult, sortedResponse.ok, '–ü–æ–∏—Å–∫ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å');
}

// –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –ø–æ ID
async function testGetReleaseById(testResult) {
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ª–∏–∑–æ–≤
  const releasesResponse = await makeRequest('/api/releases');
  assert(testResult, releasesResponse.ok, '–î–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–ª–∏–∑–æ–≤');
  
  if (releasesResponse.data.length > 0) {
    const firstRelease = releasesResponse.data[0];
    const releaseId = firstRelease.id;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–∏–∑ –ø–æ ID
    const releaseResponse = await makeRequest(`/api/releases/${releaseId}`);
    assert(testResult, releaseResponse.ok, '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –ø–æ ID –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å');
    assert(testResult, releaseResponse.data.id === releaseId, 'ID —Ä–µ–ª–∏–∑–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å');
    assert(testResult, releaseResponse.data.title, '–†–µ–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ');
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–ª–∏–∑–æ–≤, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID
    const notFoundResponse = await makeRequest('/api/releases/999999');
    assert(testResult, !notFoundResponse.ok, '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É');
  }
}

// –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ —Ä–µ–ª–∏–∑–∞
async function testGetReleaseTracks(testResult) {
  const releasesResponse = await makeRequest('/api/releases');
  
  if (releasesResponse.data.length > 0) {
    const firstRelease = releasesResponse.data[0];
    const tracksResponse = await makeRequest(`/api/releases/${firstRelease.id}/tracks`);
    
    assert(testResult, tracksResponse.ok, '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å');
    assert(testResult, Array.isArray(tracksResponse.data), '–¢—Ä–µ–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
  }
}

// –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
async function testGetArtists(testResult) {
  const response = await makeRequest('/api/artists');
  
  assert(testResult, response.ok, '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å');
  assert(testResult, Array.isArray(response.data), '–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
  
  if (response.data.length > 0) {
    const artist = response.data[0];
    assert(testResult, artist.id, '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å ID');
    assert(testResult, artist.name, '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∏–º—è');
  }
}

// –¢–µ—Å—Ç 7: –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
async function testSearchArtists(testResult) {
  // –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
  const emptyResponse = await makeRequest('/api/artists/search?q=');
  assert(testResult, emptyResponse.ok, '–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å');
  
  // –¢–µ—Å—Ç —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
  const searchResponse = await makeRequest('/api/artists/search?q=test');
  assert(testResult, searchResponse.ok, '–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å');
  assert(testResult, Array.isArray(searchResponse.data), '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
}

// –¢–µ—Å—Ç 8: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ ID
async function testGetArtistById(testResult) {
  const artistsResponse = await makeRequest('/api/artists');
  
  if (artistsResponse.data.length > 0) {
    const firstArtist = artistsResponse.data[0];
    const artistResponse = await makeRequest(`/api/artists/${firstArtist.id}`);
    
    assert(testResult, artistResponse.ok, '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ ID –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å');
    assert(testResult, artistResponse.data.id === firstArtist.id, 'ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å');
    assert(testResult, artistResponse.data.name, '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∏–º—è');
  }
}

// –¢–µ—Å—Ç 9: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
async function testGetArtistReleases(testResult) {
  const artistsResponse = await makeRequest('/api/artists');
  
  if (artistsResponse.data.length > 0) {
    const firstArtist = artistsResponse.data[0];
    const releasesResponse = await makeRequest(`/api/artists/${firstArtist.id}/releases`);
    
    assert(testResult, releasesResponse.ok, '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å');
    assert(testResult, Array.isArray(releasesResponse.data), '–†–µ–ª–∏–∑—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
  }
}

// –¢–µ—Å—Ç 10: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π
async function testGetCollections(testResult) {
  const response = await makeRequest('/api/collections');
  
  assert(testResult, response.ok, '–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å');
  assert(testResult, Array.isArray(response.data), '–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
  
  if (response.data.length > 0) {
    const collection = response.data[0];
    assert(testResult, collection.id, '–ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å ID');
    assert(testResult, collection.title, '–ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ');
  }
}

// –¢–µ—Å—Ç 11: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ä–µ–ª–∏–∑–∞
async function testGetReleaseComments(testResult) {
  const releasesResponse = await makeRequest('/api/releases');
  
  if (releasesResponse.data.length > 0) {
    const firstRelease = releasesResponse.data[0];
    const commentsResponse = await makeRequest(`/api/comments/releases/${firstRelease.id}`);
    
    assert(testResult, commentsResponse.ok, '–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å');
    assert(testResult, Array.isArray(commentsResponse.data), '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
  }
}

// –¢–µ—Å—Ç 12: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Ä–µ–ª–∏–∑–∞
async function testGetReleaseRatings(testResult) {
  const releasesResponse = await makeRequest('/api/releases');
  
  if (releasesResponse.data.length > 0) {
    const firstRelease = releasesResponse.data[0];
    const ratingsResponse = await makeRequest(`/api/ratings/releases/${firstRelease.id}`);
    
    assert(testResult, ratingsResponse.ok, '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å');
    assert(testResult, ratingsResponse.data, '–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö');
  }
}

// –¢–µ—Å—Ç 13: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
async function testParameterValidation(testResult) {
  // –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º ID
  const invalidIdResponse = await makeRequest('/api/releases/invalid-id');
  assert(testResult, !invalidIdResponse.ok, '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É');
  
  // –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º ID
  const negativeIdResponse = await makeRequest('/api/releases/-1');
  assert(testResult, !negativeIdResponse.ok, '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É');
}

// –¢–µ—Å—Ç 14: Rate Limiting
async function testRateLimiting(testResult) {
  // –î–µ–ª–∞–µ–º –º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è rate limiting
  const promises = [];
  for (let i = 0; i < 35; i++) {
    promises.push(makeRequest('/api/search?q=test'));
  }
  
  const responses = await Promise.all(promises);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥–ª–∏ –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã
  const rateLimited = responses.some(r => r.status === 429);
  
  // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ rate limiting —Å—Ä–∞–±–æ—Ç–∞–ª
  if (rateLimited) {
    log('   ‚ÑπÔ∏è  Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã)', 'yellow');
  }
  
  assert(testResult, true, 'Rate limiting —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
}

// –¢–µ—Å—Ç 15: CSRF –∑–∞—â–∏—Ç–∞
async function testCSRFProtection(testResult) {
  // –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
  const csrfResponse = await makeRequest('/api/csrf-token');
  
  if (csrfResponse.ok && csrfResponse.data.token) {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å –±–µ–∑ CSRF —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
    const postWithoutCSRF = await makeRequest('/api/releases', {
      method: 'POST',
      body: JSON.stringify({ title: 'Test Release' })
    });
    
    // POST –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É 401 –æ–∂–∏–¥–∞–µ–º
    assert(testResult, postWithoutCSRF.status === 401 || postWithoutCSRF.status === 403, 
           'POST –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
  }
  
  assert(testResult, true, 'CSRF –∑–∞—â–∏—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runAllTests() {
  log('üß™ BudgetBuddy Functional Testing Suite', 'bright');
  log('========================================', 'bright');
  log(`üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${config.baseUrl}`, 'blue');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  try {
    await checkServerHealth();
  } catch (error) {
    log(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`, 'red');
    log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É', 'yellow');
    process.exit(1);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
  const tests = [
    testHealthEndpoint,
    testGetReleases,
    testSearchReleases,
    testGetReleaseById,
    testGetReleaseTracks,
    testGetArtists,
    testSearchArtists,
    testGetArtistById,
    testGetArtistReleases,
    testGetCollections,
    testGetReleaseComments,
    testGetReleaseRatings,
    testParameterValidation,
    testRateLimiting,
    testCSRFProtection
  ];
  
  for (const test of tests) {
    await runTest(test.name, test);
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  saveResults();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
  showSummary();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function saveResults() {
  const reportsDir = path.dirname(config.outputFile);
  if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir, { recursive: true });
  }
  
  fs.writeFileSync(config.outputFile, JSON.stringify(testResults, null, 2));
  log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${config.outputFile}`, 'green');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Ç–æ–≥–æ–≤
function showSummary() {
  const { total, passed, failed, skipped } = testResults.summary;
  const successRate = total > 0 ? ((passed / total) * 100).toFixed(1) : 0;
  
  log('\nüìà –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', 'bright');
  log('====================', 'bright');
  log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${total}`, 'blue');
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`, 'green');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`, 'red');
  log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`, 'yellow');
  log(`üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`, successRate >= 80 ? 'green' : 'red');
  
  if (failed > 0) {
    log('\n‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:', 'red');
    testResults.tests
      .filter(t => t.status === 'failed')
      .forEach(test => {
        log(`   ‚Ä¢ ${test.name}: ${test.error}`, 'red');
      });
  }
  
  if (successRate >= 90) {
    log('\nüéâ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.', 'green');
  } else if (successRate >= 70) {
    log('\n‚ö†Ô∏è  –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.', 'yellow');
  } else {
    log('\nüö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏.', 'red');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  log('\n\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 'yellow');
  saveResults();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫
runAllTests().catch(error => {
  log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
  process.exit(1);
});
