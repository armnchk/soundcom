#!/usr/bin/env node

/**
 * –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ BudgetBuddy
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –≤–∏–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: API, –ø–æ–∏—Å–∫, UI
 */

import { spawn } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
const testSuites = [
  {
    name: 'API Tests',
    file: 'run-functional-tests.js',
    description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints –∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏'
  },
  {
    name: 'Search Tests',
    file: 'search-tests.js',
    description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'
  },
  {
    name: 'UI Tests',
    file: 'ui-tests.js',
    description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
  }
];

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
let allResults = {
  timestamp: new Date().toISOString(),
  baseUrl: process.env.TEST_BASE_URL || 'http://localhost:5000',
  suites: [],
  summary: {
    total: 0,
    passed: 0,
    failed: 0,
    duration: 0
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
function runTestSuite(suite) {
  return new Promise((resolve, reject) => {
    const startTime = Date.now();
    
    log(`\nüöÄ –ó–∞–ø—É—Å–∫ ${suite.name}...`, 'cyan');
    log(`üìù ${suite.description}`, 'blue');
    
    const testProcess = spawn('node', [suite.file], {
      cwd: __dirname,
      stdio: 'inherit',
      shell: true,
      env: { ...process.env, TEST_BASE_URL: allResults.baseUrl }
    });
    
    const suiteResult = {
      name: suite.name,
      file: suite.file,
      status: 'running',
      startTime: new Date().toISOString(),
      endTime: null,
      duration: 0,
      passed: false,
      error: null
    };
    
    testProcess.on('close', (code) => {
      const endTime = Date.now();
      suiteResult.endTime = new Date().toISOString();
      suiteResult.duration = endTime - startTime;
      
      if (code === 0) {
        suiteResult.status = 'completed';
        suiteResult.passed = true;
        log(`‚úÖ ${suite.name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ (${suiteResult.duration}ms)`, 'green');
      } else {
        suiteResult.status = 'failed';
        suiteResult.passed = false;
        suiteResult.error = `–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`;
        log(`‚ùå ${suite.name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: ${code})`, 'red');
      }
      
      allResults.suites.push(suiteResult);
      allResults.summary.total++;
      
      if (suiteResult.passed) {
        allResults.summary.passed++;
      } else {
        allResults.summary.failed++;
      }
      
      allResults.summary.duration += suiteResult.duration;
      
      resolve(suiteResult);
    });
    
    testProcess.on('error', (error) => {
      suiteResult.status = 'error';
      suiteResult.passed = false;
      suiteResult.error = error.message;
      suiteResult.endTime = new Date().toISOString();
      suiteResult.duration = Date.now() - startTime;
      
      allResults.suites.push(suiteResult);
      allResults.summary.total++;
      allResults.summary.failed++;
      allResults.summary.duration += suiteResult.duration;
      
      log(`üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${suite.name}: ${error.message}`, 'red');
      reject(error);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerHealth() {
  try {
    const response = await fetch(`${allResults.baseUrl}/api/releases/health`);
    if (response.ok) {
      log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω', 'green');
      return true;
    }
  } catch (error) {
    log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'red');
    log(`–û—à–∏–±–∫–∞: ${error.message}`, 'red');
    return false;
  }
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function saveResults() {
  const outputFile = path.join(__dirname, 'reports', 'all-tests-results.json');
  const reportsDir = path.dirname(outputFile);
  
  if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir, { recursive: true });
  }
  
  fs.writeFileSync(outputFile, JSON.stringify(allResults, null, 2));
  log(`\nüìä –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputFile}`, 'green');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Ç–æ–≥–æ–≤
function showFinalSummary() {
  const { total, passed, failed, duration } = allResults.summary;
  const successRate = total > 0 ? ((passed / total) * 100).toFixed(1) : 0;
  const avgDuration = total > 0 ? (duration / total / 1000).toFixed(1) : 0;
  
  log('\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ï –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', 'bright');
  log('================================', 'bright');
  log(`üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π URL: ${allResults.baseUrl}`, 'blue');
  log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${(duration / 1000).toFixed(1)}s`, 'blue');
  log(`üìä –¢–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤: ${total}`, 'blue');
  log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passed}`, 'green');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`, 'red');
  log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`, successRate >= 90 ? 'green' : 'red');
  log(`‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –Ω–∞–±–æ—Ä: ${avgDuration}s`, 'yellow');
  
  // –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–∞–±–æ—Ä—É
  log('\nüìã –î–ï–¢–ê–õ–ò –ü–û –ù–ê–ë–û–†–ê–ú:', 'bright');
  allResults.suites.forEach(suite => {
    const status = suite.passed ? '‚úÖ' : '‚ùå';
    const color = suite.passed ? 'green' : 'red';
    const duration = (suite.duration / 1000).toFixed(1);
    
    log(`   ${status} ${suite.name}: ${duration}s`, color);
    
    if (!suite.passed && suite.error) {
      log(`      –û—à–∏–±–∫–∞: ${suite.error}`, 'red');
    }
  });
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:', 'bright');
  
  if (successRate >= 95) {
    log('üéâ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.', 'green');
    log('   ‚Ä¢ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green');
    log('   ‚Ä¢ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ', 'green');
    log('   ‚Ä¢ UI –æ—Ç–∑—ã–≤—á–∏–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–Ω', 'green');
  } else if (successRate >= 80) {
    log('‚ö†Ô∏è  –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', 'yellow');
    log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—ã—à–µ', 'yellow');
    log('   ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã', 'yellow');
    log('   ‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π', 'yellow');
  } else {
    log('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã! –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞:', 'red');
    log('   ‚Ä¢ –ú–Ω–æ–≥–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã', 'red');
    log('   ‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É', 'red');
    log('   ‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏', 'red');
  }
  
  // –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
  log('\nüîÑ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:', 'bright');
  log('   1. –ò–∑—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤ –ø–∞–ø–∫–µ reports/', 'blue');
  log('   2. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã', 'blue');
  log('   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ: npm run test:functional', 'blue');
  log('   4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –Ω–∞–±–æ—Ä—ã:', 'blue');
  log('      ‚Ä¢ npm run test:api', 'blue');
  log('      ‚Ä¢ npm run test:search', 'blue');
  log('      ‚Ä¢ npm run test:ui', 'blue');
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runAllTests() {
  log('üß™ BudgetBuddy Complete Functional Testing Suite', 'bright');
  log('================================================', 'bright');
  log(`üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${allResults.baseUrl}`, 'blue');
  
  const startTime = Date.now();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...', 'yellow');
  const isHealthy = await checkServerHealth();
  
  if (!isHealthy) {
    log('\n‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ:', 'red');
    log(`   ${allResults.baseUrl}`, 'red');
    log('\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: npm run dev', 'yellow');
    process.exit(1);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã
  log('\nüöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤...', 'cyan');
  
  for (const suite of testSuites) {
    try {
      await runTestSuite(suite);
    } catch (error) {
      log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ ${suite.name}: ${error.message}`, 'red');
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏
    }
  }
  
  const totalDuration = Date.now() - startTime;
  allResults.summary.duration = totalDuration;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  saveResults();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
  showFinalSummary();
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
  const exitCode = allResults.summary.failed > 0 ? 1 : 0;
  process.exit(exitCode);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  log('\n\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 'yellow');
  saveResults();
  process.exit(0);
});

process.on('SIGTERM', () => {
  log('\n\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'yellow');
  saveResults();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫
runAllTests().catch(error => {
  log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
  process.exit(1);
});
