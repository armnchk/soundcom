#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è BudgetBuddy
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ API
 */

import fetch from 'node-fetch';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  baseUrl: process.env.TEST_BASE_URL || 'http://localhost:5000',
  timeout: 10000
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(url, options = {}) {
  const fullUrl = url.startsWith('http') ? url : `${config.baseUrl}${url}`;
  
  const defaultOptions = {
    timeout: config.timeout,
    headers: {
      'Content-Type': 'application/json',
      'User-Agent': 'UI-Test-Suite/1.0'
    }
  };

  const requestOptions = { ...defaultOptions, ...options };
  
  try {
    const response = await fetch(fullUrl, requestOptions);
    const data = await response.text();
    
    let jsonData;
    try {
      jsonData = JSON.parse(data);
    } catch {
      jsonData = data;
    }
    
    return {
      ok: response.ok,
      status: response.status,
      statusText: response.statusText,
      headers: Object.fromEntries(response.headers.entries()),
      data: jsonData,
      url: fullUrl
    };
  } catch (error) {
    return {
      ok: false,
      status: 0,
      statusText: error.message,
      headers: {},
      data: null,
      url: fullUrl,
      error: error.message
    };
  }
}

// –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function testHomePage() {
  log('\nüè† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´', 'bright');
  log('=================================', 'bright');
  
  const response = await makeRequest('/');
  
  const result = {
    name: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
    passed: false,
    issues: []
  };
  
  if (!response.ok) {
    result.issues.push(`HTTP –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
  }
  
  if (response.data && typeof response.data === 'string') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (!response.data.includes('<html') && !response.data.includes('<!DOCTYPE')) {
      result.issues.push('–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (!response.data.includes('BudgetBuddy') && !response.data.includes('–º—É–∑—ã–∫')) {
      result.issues.push('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    }
  }
  
  result.passed = result.issues.length === 0;
  
  if (result.passed) {
    log('   ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green');
  } else {
    log('   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π', 'red');
    result.issues.forEach(issue => log(`      ‚Ä¢ ${issue}`, 'red'));
  }
  
  return result;
}

// –¢–µ—Å—Ç API endpoints –¥–ª—è UI
async function testUIAPIEndpoints() {
  log('\nüîå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –î–õ–Ø UI', 'bright');
  log('============================', 'bright');
  
  const endpoints = [
    { url: '/api/releases', name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤' },
    { url: '/api/artists', name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π' },
    { url: '/api/collections', name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π' },
    { url: '/api/releases/search?q=test', name: '–ü–æ–∏—Å–∫ —Ä–µ–ª–∏–∑–æ–≤' },
    { url: '/api/artists/search?q=test', name: '–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π' },
    { url: '/api/csrf-token', name: '–ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞' }
  ];
  
  const results = [];
  
  for (const endpoint of endpoints) {
    const response = await makeRequest(endpoint.url);
    
    const result = {
      name: endpoint.name,
      url: endpoint.url,
      passed: false,
      issues: []
    };
    
    if (!response.ok) {
      result.issues.push(`HTTP –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
    }
    
    if (response.data === null) {
      result.issues.push('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (!response.headers['access-control-allow-origin']) {
      result.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏');
    }
    
    result.passed = result.issues.length === 0;
    results.push(result);
    
    const status = result.passed ? '‚úÖ' : '‚ùå';
    const color = result.passed ? 'green' : 'red';
    
    log(`   ${status} ${endpoint.name}`, color);
    
    if (!result.passed) {
      result.issues.forEach(issue => log(`      ‚Ä¢ ${issue}`, 'red'));
    }
  }
  
  return results;
}

// –¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async function testPagination() {
  log('\nüìÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ì–ò–ù–ê–¶–ò–ò', 'bright');
  log('==========================', 'bright');
  
  const results = [];
  
  // –¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ–ª–∏–∑–æ–≤
  const paginationTests = [
    { url: '/api/releases?limit=5', name: '–†–µ–ª–∏–∑—ã —Å –ª–∏–º–∏—Ç–æ–º 5' },
    { url: '/api/releases?limit=10', name: '–†–µ–ª–∏–∑—ã —Å –ª–∏–º–∏—Ç–æ–º 10' },
    { url: '/api/releases?limit=50', name: '–†–µ–ª–∏–∑—ã —Å –ª–∏–º–∏—Ç–æ–º 50' },
    { url: '/api/artists?limit=5', name: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Å –ª–∏–º–∏—Ç–æ–º 5' }
  ];
  
  for (const test of paginationTests) {
    const response = await makeRequest(test.url);
    
    const result = {
      name: test.name,
      passed: false,
      issues: []
    };
    
    if (!response.ok) {
      result.issues.push(`HTTP –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
    }
    
    if (response.data && Array.isArray(response.data)) {
      const limit = parseInt(test.url.split('limit=')[1]);
      if (response.data.length > limit) {
        result.issues.push(`–ü–æ–ª—É—á–µ–Ω–æ ${response.data.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –æ–∂–∏–¥–∞–ª–æ—Å—å –º–∞–∫—Å–∏–º—É–º ${limit}`);
      }
    }
    
    result.passed = result.issues.length === 0;
    results.push(result);
    
    const status = result.passed ? '‚úÖ' : '‚ùå';
    const color = result.passed ? 'green' : 'red';
    
    log(`   ${status} ${test.name}`, color);
    
    if (!result.passed) {
      result.issues.forEach(issue => log(`      ‚Ä¢ ${issue}`, 'red'));
    }
  }
  
  return results;
}

// –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
async function testFiltering() {
  log('\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–ê–¶–ò–ò', 'bright');
  log('===========================', 'bright');
  
  const results = [];
  
  // –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–ª–∏–∑–æ–≤
  const filterTests = [
    { url: '/api/releases?genre=rock', name: '–§–∏–ª—å—Ç—Ä –ø–æ –∂–∞–Ω—Ä—É: rock' },
    { url: '/api/releases?year=2023', name: '–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É: 2023' },
    { url: '/api/releases?genre=pop&year=2022', name: '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä' }
  ];
  
  for (const test of filterTests) {
    const response = await makeRequest(test.url);
    
    const result = {
      name: test.name,
      passed: false,
      issues: []
    };
    
    if (!response.ok) {
      result.issues.push(`HTTP –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
    }
    
    if (response.data && Array.isArray(response.data)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
      if (test.url.includes('genre=rock') && response.data.length > 0) {
        const hasRockGenre = response.data.some(release => 
          release.genres && release.genres.includes('rock')
        );
        if (!hasRockGenre) {
          result.issues.push('–§–∏–ª—å—Ç—Ä –ø–æ –∂–∞–Ω—Ä—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        }
      }
    }
    
    result.passed = result.issues.length === 0;
    results.push(result);
    
    const status = result.passed ? '‚úÖ' : '‚ùå';
    const color = result.passed ? 'green' : 'red';
    
    log(`   ${status} ${test.name}`, color);
    
    if (!result.passed) {
      result.issues.forEach(issue => log(`      ‚Ä¢ ${issue}`, 'red'));
    }
  }
  
  return results;
}

// –¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
async function testSorting() {
  log('\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–†–¢–ò–†–û–í–ö–ò', 'bright');
  log('===========================', 'bright');
  
  const results = [];
  
  // –¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–µ–ª–∏–∑–æ–≤
  const sortTests = [
    { url: '/api/releases/search?q=test&sortBy=rating_desc', name: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (—É–±—ã–≤–∞–Ω–∏–µ)' },
    { url: '/api/releases/search?q=test&sortBy=rating_asc', name: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ)' },
    { url: '/api/releases/search?q=test&sortBy=date_desc', name: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (—É–±—ã–≤–∞–Ω–∏–µ)' },
    { url: '/api/releases/search?q=test&sortBy=date_asc', name: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ)' }
  ];
  
  for (const test of sortTests) {
    const response = await makeRequest(test.url);
    
    const result = {
      name: test.name,
      passed: false,
      issues: []
    };
    
    if (!response.ok) {
      result.issues.push(`HTTP –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
    }
    
    if (response.data && Array.isArray(response.data) && response.data.length > 1) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      const isDesc = test.url.includes('_desc');
      const isRating = test.url.includes('rating');
      
      if (isRating) {
        const ratings = response.data.map(r => r.averageRating || 0);
        const isSorted = isDesc ? 
          ratings.every((val, i) => i === 0 || val <= ratings[i-1]) :
          ratings.every((val, i) => i === 0 || val >= ratings[i-1]);
        
        if (!isSorted) {
          result.issues.push('–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        }
      }
    }
    
    result.passed = result.issues.length === 0;
    results.push(result);
    
    const status = result.passed ? '‚úÖ' : '‚ùå';
    const color = result.passed ? 'green' : 'red';
    
    log(`   ${status} ${test.name}`, color);
    
    if (!result.passed) {
      result.issues.forEach(issue => log(`      ‚Ä¢ ${issue}`, 'red'));
    }
  }
  
  return results;
}

// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ UI
async function testUIPerformance() {
  log('\n‚ö° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò UI', 'bright');
  log('======================================', 'bright');
  
  const results = [];
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
  const performanceTests = [
    { url: '/', name: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' },
    { url: '/api/releases', name: 'API —Ä–µ–ª–∏–∑–æ–≤' },
    { url: '/api/artists', name: 'API –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π' },
    { url: '/api/collections', name: 'API –∫–æ–ª–ª–µ–∫—Ü–∏–π' },
    { url: '/api/releases/search?q=test', name: '–ü–æ–∏—Å–∫ —Ä–µ–ª–∏–∑–æ–≤' }
  ];
  
  for (const test of performanceTests) {
    const startTime = Date.now();
    const response = await makeRequest(test.url);
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    const result = {
      name: test.name,
      duration,
      success: response.ok,
      passed: false,
      issues: []
    };
    
    if (!response.ok) {
      result.issues.push(`HTTP –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
    if (duration > 5000) {
      result.issues.push(`–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫: ${duration}ms`);
    } else if (duration > 2000) {
      result.issues.push(`–ó–∞–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫: ${duration}ms`);
    }
    
    result.passed = result.issues.length === 0;
    results.push(result);
    
    const status = result.passed ? '‚úÖ' : '‚ö†Ô∏è';
    const color = duration < 1000 ? 'green' : duration < 3000 ? 'yellow' : 'red';
    
    log(`   ${status} ${test.name}: ${duration}ms`, color);
    
    if (!result.passed) {
      result.issues.forEach(issue => log(`      ‚Ä¢ ${issue}`, 'red'));
    }
  }
  
  return results;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runAllUITests() {
  log('üñ•Ô∏è  BudgetBuddy UI Testing Suite', 'bright');
  log('=================================', 'bright');
  log(`üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${config.baseUrl}`, 'blue');
  
  const allResults = {
    timestamp: new Date().toISOString(),
    baseUrl: config.baseUrl,
    tests: {
      homePage: null,
      apiEndpoints: [],
      pagination: [],
      filtering: [],
      sorting: [],
      performance: []
    }
  };
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    allResults.tests.homePage = await testHomePage();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints
    allResults.tests.apiEndpoints = await testUIAPIEndpoints();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    allResults.tests.pagination = await testPagination();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    allResults.tests.filtering = await testFiltering();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    allResults.tests.sorting = await testSorting();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    allResults.tests.performance = await testUIPerformance();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const outputFile = path.join(__dirname, 'reports', 'ui-test-results.json');
    const reportsDir = path.dirname(outputFile);
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir, { recursive: true });
    }
    
    fs.writeFileSync(outputFile, JSON.stringify(allResults, null, 2));
    log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputFile}`, 'green');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
    showUISummary(allResults);
    
  } catch (error) {
    log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Ç–æ–≥–æ–≤
function showUISummary(results) {
  const allTests = [
    results.tests.homePage,
    ...results.tests.apiEndpoints,
    ...results.tests.pagination,
    ...results.tests.filtering,
    ...results.tests.sorting,
    ...results.tests.performance
  ].filter(t => t !== null);
  
  const totalTests = allTests.length;
  const passedTests = allTests.filter(t => t.passed).length;
  const successRate = totalTests > 0 ? ((passedTests / totalTests) * 100).toFixed(1) : 0;
  
  log('\nüìà –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø UI', 'bright');
  log('========================', 'bright');
  log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`, 'blue');
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`, 'green');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalTests - passedTests}`, 'red');
  log(`üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`, successRate >= 90 ? 'green' : 'red');
  
  // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  if (results.tests.performance.length > 0) {
    const avgDuration = results.tests.performance.reduce((sum, p) => sum + p.duration, 0) / results.tests.performance.length;
    const maxDuration = Math.max(...results.tests.performance.map(p => p.duration));
    
    log(`\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:`, 'yellow');
    log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgDuration.toFixed(0)}ms`, avgDuration < 1000 ? 'green' : 'yellow');
    log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${maxDuration}ms`, maxDuration < 3000 ? 'green' : 'red');
  }
  
  if (successRate >= 95) {
    log('\nüéâ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! UI —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.', 'green');
  } else if (successRate >= 80) {
    log('\n‚ö†Ô∏è  –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.', 'yellow');
  } else {
    log('\nüö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã! UI —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏.', 'red');
  }
}

// –ó–∞–ø—É—Å–∫
runAllUITests().catch(error => {
  log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
  process.exit(1);
});
