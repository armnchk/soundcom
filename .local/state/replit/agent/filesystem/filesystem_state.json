{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Music Review Platform\n\n## Overview\n\nThis is a full-stack music review platform that allows users to discover, rate, and discuss music releases. The application features a comprehensive music database where users can browse albums, submit ratings, write reviews, and engage with the community through comments and reactions. The platform supports user authentication, content moderation, and administrative functions for managing releases and reports.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **UI Components**: Radix UI primitives with shadcn/ui component system\n- **Styling**: Tailwind CSS with CSS variables for theming and dark mode support\n- **Authentication Flow**: OAuth integration with session-based authentication\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API endpoints with JSON responses\n- **Authentication**: Replit Auth with OpenID Connect (OIDC) for OAuth authentication\n- **Session Management**: Express sessions with PostgreSQL session store\n- **Middleware**: Request logging, error handling, and authentication middleware\n\n### Database Architecture\n- **Primary Database**: PostgreSQL with Neon serverless driver\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema Design**: \n  - Users table with OAuth profile data and nickname system\n  - Artists and Releases with relational structure\n  - Ratings system with user-release relationships\n  - Comments with threading support and reactions\n  - Reports system for content moderation\n  - Sessions table for authentication persistence\n\n### Authentication & Authorization\n- **Provider**: Google OAuth via Replit Auth\n- **Session Storage**: PostgreSQL-backed sessions with configurable TTL\n- **User Management**: Profile creation with nickname requirement\n- **Admin System**: Role-based access control for administrative functions\n- **Security**: HTTP-only cookies, CSRF protection, and secure session configuration\n\n### Content Management\n- **Rating System**: 1-10 scale rating system with aggregated averages\n- **Comment System**: Threaded comments with like/dislike reactions\n- **Moderation**: User reporting system with admin review interface\n- **Search**: Full-text search across releases and artists\n- **Admin Panel**: CRUD operations for releases, user management, and report handling\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon PostgreSQL serverless database\n- **Authentication**: Replit Auth with Google OAuth provider\n- **Hosting**: Replit platform with integrated development environment\n\n### Frontend Libraries\n- **UI Framework**: Radix UI component primitives\n- **Data Fetching**: TanStack Query for API state management\n- **Styling**: Tailwind CSS with PostCSS processing\n- **Icons**: Lucide React icon library\n- **Date Handling**: date-fns for date formatting and manipulation\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Libraries\n- **Database**: Drizzle ORM with PostgreSQL adapter\n- **Authentication**: Passport.js with OpenID Connect strategy\n- **Session Management**: express-session with connect-pg-simple\n- **Validation**: Zod for runtime type validation\n- **Development**: tsx for TypeScript execution, esbuild for production builds\n\n### Development Tools\n- **Build System**: Vite for frontend, esbuild for backend\n- **Type Checking**: TypeScript with strict configuration\n- **Code Quality**: ESLint and Prettier (configured via shadcn/ui)\n- **Development Server**: Hot module replacement with Vite middleware\n- **Debugging**: Replit-specific development tools and error overlay","size_bytes":3923},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { scheduleDaily, scheduleWeeklyReleaseDateUpdate } from \"./scheduler\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    \n    // Запускаем автоматический планировщик музыкального импорта\n    try {\n      const schedulerInfo = scheduleDaily();\n      log(`🎵 Автоматический музыкальный импорт активирован`);\n      log(`⏰ Следующий запуск через ${schedulerInfo.hoursUntilNextRun} часов`);\n      \n      // Запускаем еженедельное обновление дат релизов\n      scheduleWeeklyReleaseDateUpdate();\n      log(`📅 Еженедельное обновление дат релизов активировано`);\n    } catch (error) {\n      log(`❌ Ошибка запуска планировщика: ${error}`);\n    }\n  });\n})();\n","size_bytes":2901},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { massImportService } from \"./music-import\";\nimport { scheduleDaily, stopScheduler, getSchedulerStatus, runDailyMusicImport, scheduleWeeklyReleaseDateUpdate } from \"./scheduler\";\nimport { musicAPI } from \"./combined-music-api\";\nimport { db } from \"./db\";\nimport { sql } from \"drizzle-orm\";\nimport { \n  insertArtistSchema, \n  insertReleaseSchema, \n  insertRatingSchema, \n  insertCommentSchema,\n  insertCommentReactionSchema,\n  insertReportSchema,\n  insertCollectionSchema,\n  insertCollectionReleaseSchema,\n  insertAutoImportPlaylistSchema,\n  autoImportPlaylists\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Nickname setup route\n  app.post('/api/auth/nickname', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { nickname } = req.body;\n      \n      if (!nickname || nickname.length < 3 || nickname.length > 20) {\n        return res.status(400).json({ message: \"Nickname must be 3-20 characters\" });\n      }\n\n      // Check if nickname is unique\n      const existingUser = await storage.getUser(userId);\n      if (existingUser?.nickname) {\n        return res.status(400).json({ message: \"Nickname already set\" });\n      }\n\n      const user = await storage.updateUserNickname(userId, nickname);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error setting nickname:\", error);\n      res.status(500).json({ message: \"Failed to set nickname\" });\n    }\n  });\n\n  // Artists routes\n  app.get('/api/artists', async (_req, res) => {\n    try {\n      const artists = await storage.getArtists();\n      res.json(artists);\n    } catch (error) {\n      console.error(\"Error fetching artists:\", error);\n      res.status(500).json({ message: \"Failed to fetch artists\" });\n    }\n  });\n\n  app.get('/api/artists/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const artist = await storage.getArtist(id);\n      if (!artist) {\n        return res.status(404).json({ message: \"Artist not found\" });\n      }\n      res.json(artist);\n    } catch (error) {\n      console.error(\"Error fetching artist:\", error);\n      res.status(500).json({ message: \"Failed to fetch artist\" });\n    }\n  });\n\n  app.post('/api/artists', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const artistData = insertArtistSchema.parse(req.body);\n      const artist = await storage.createArtist(artistData);\n      res.status(201).json(artist);\n    } catch (error) {\n      console.error(\"Error creating artist:\", error);\n      res.status(500).json({ message: \"Failed to create artist\" });\n    }\n  });\n\n  // Releases routes\n  app.get('/api/releases', async (req, res) => {\n    try {\n      const { genre, year, artistId, includeTestData } = req.query;\n      const filters = {\n        genre: genre as string,\n        year: year ? parseInt(year as string) : undefined,\n        artistId: artistId ? parseInt(artistId as string) : undefined,\n        includeTestData: includeTestData === 'true',\n      };\n      \n      const releases = await storage.getReleases(filters);\n      res.json(releases);\n    } catch (error) {\n      console.error(\"Error fetching releases:\", error);\n      res.status(500).json({ message: \"Failed to fetch releases\" });\n    }\n  });\n\n  app.get('/api/releases/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const release = await storage.getRelease(id);\n      if (!release) {\n        return res.status(404).json({ message: \"Release not found\" });\n      }\n      res.json(release);\n    } catch (error) {\n      console.error(\"Error fetching release:\", error);\n      res.status(500).json({ message: \"Failed to fetch release\" });\n    }\n  });\n\n  app.post('/api/releases', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const releaseData = insertReleaseSchema.parse(req.body);\n      const release = await storage.createRelease(releaseData);\n      res.status(201).json(release);\n    } catch (error) {\n      console.error(\"Error creating release:\", error);\n      res.status(500).json({ message: \"Failed to create release\" });\n    }\n  });\n\n  app.put('/api/releases/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const id = parseInt(req.params.id);\n      const releaseData = insertReleaseSchema.partial().parse(req.body);\n      const release = await storage.updateRelease(id, releaseData);\n      res.json(release);\n    } catch (error) {\n      console.error(\"Error updating release:\", error);\n      res.status(500).json({ message: \"Failed to update release\" });\n    }\n  });\n\n  app.delete('/api/releases/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const id = parseInt(req.params.id);\n      await storage.deleteRelease(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting release:\", error);\n      res.status(500).json({ message: \"Failed to delete release\" });\n    }\n  });\n\n  // Search routes\n  app.get('/api/search', async (req, res) => {\n    try {\n      const { q, sortBy } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ message: \"Search query required\" });\n      }\n      \n      const validSortOptions = ['date_desc', 'date_asc', 'rating_desc', 'rating_asc'];\n      const sort = sortBy && typeof sortBy === 'string' && validSortOptions.includes(sortBy) ? \n        sortBy as 'date_desc' | 'date_asc' | 'rating_desc' | 'rating_asc' : undefined;\n      \n      const releases = await storage.searchReleases(q, sort);\n      res.json(releases);\n    } catch (error) {\n      console.error(\"Error searching releases:\", error);\n      res.status(500).json({ message: \"Failed to search releases\" });\n    }\n  });\n\n  app.get('/api/search/artists', async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ message: \"Search query required\" });\n      }\n      \n      const artists = await storage.searchArtists(q);\n      res.json(artists);\n    } catch (error) {\n      console.error(\"Error searching artists:\", error);\n      res.status(500).json({ message: \"Failed to search artists\" });\n    }\n  });\n\n  // Ratings routes\n  app.get('/api/releases/:id/ratings', async (req, res) => {\n    try {\n      const releaseId = parseInt(req.params.id);\n      const ratings = await storage.getReleaseRatings(releaseId);\n      res.json(ratings);\n    } catch (error) {\n      console.error(\"Error fetching ratings:\", error);\n      res.status(500).json({ message: \"Failed to fetch ratings\" });\n    }\n  });\n\n  app.post('/api/releases/:id/rate', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const releaseId = parseInt(req.params.id);\n      const { score } = req.body;\n\n      if (!score || score < 1 || score > 10) {\n        return res.status(400).json({ message: \"Score must be between 1 and 10\" });\n      }\n\n      const rating = await storage.upsertRating({ userId, releaseId, score });\n      res.json(rating);\n    } catch (error) {\n      console.error(\"Error rating release:\", error);\n      res.status(500).json({ message: \"Failed to rate release\" });\n    }\n  });\n\n  app.get('/api/releases/:id/user-rating', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const releaseId = parseInt(req.params.id);\n      const rating = await storage.getRating(userId, releaseId);\n      res.json(rating || null);\n    } catch (error) {\n      console.error(\"Error fetching user rating:\", error);\n      res.status(500).json({ message: \"Failed to fetch user rating\" });\n    }\n  });\n\n  // Comments routes\n  app.get('/api/releases/:id/comments', async (req, res) => {\n    try {\n      const releaseId = parseInt(req.params.id);\n      const { sortBy } = req.query;\n      const comments = await storage.getComments(releaseId, sortBy as 'date' | 'rating' | 'likes');\n      res.json(comments);\n    } catch (error) {\n      console.error(\"Error fetching comments:\", error);\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n\n  app.post('/api/releases/:id/comments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const releaseId = parseInt(req.params.id);\n      const { text, rating, isAnonymous } = req.body;\n\n      if (!text && !rating) {\n        return res.status(400).json({ message: \"Either text or rating is required\" });\n      }\n\n      if (text && text.length > 1000) {\n        return res.status(400).json({ message: \"Comment text cannot exceed 1000 characters\" });\n      }\n\n      if (rating && (rating < 1 || rating > 10)) {\n        return res.status(400).json({ message: \"Rating must be between 1 and 10\" });\n      }\n\n      // Check if user already has a comment with rating for this release\n      if (rating && !isAnonymous) {\n        const existingComment = await storage.getUserCommentForRelease(userId, releaseId);\n        if (existingComment && existingComment.rating) {\n          return res.status(400).json({ message: \"You have already rated this release\" });\n        }\n      }\n\n      const commentData = {\n        userId: isAnonymous ? null : userId,\n        releaseId,\n        text: text || null,\n        rating: rating || null,\n        isAnonymous: !!isAnonymous,\n      };\n\n      const comment = await storage.createComment(commentData);\n      res.status(201).json(comment);\n    } catch (error) {\n      console.error(\"Error creating comment:\", error);\n      res.status(500).json({ message: \"Failed to create comment\" });\n    }\n  });\n\n  app.put('/api/comments/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const commentId = parseInt(req.params.id);\n      const { text, rating } = req.body;\n\n      if (text && text.length > 1000) {\n        return res.status(400).json({ message: \"Comment text cannot exceed 1000 characters\" });\n      }\n\n      if (rating && (rating < 1 || rating > 10)) {\n        return res.status(400).json({ message: \"Rating must be between 1 and 10\" });\n      }\n\n      const comment = await storage.updateComment(commentId, { text, rating });\n      res.json(comment);\n    } catch (error) {\n      console.error(\"Error updating comment:\", error);\n      res.status(500).json({ message: \"Failed to update comment\" });\n    }\n  });\n\n  app.delete('/api/comments/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const commentId = parseInt(req.params.id);\n\n      await storage.deleteComment(commentId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting comment:\", error);\n      res.status(500).json({ message: \"Failed to delete comment\" });\n    }\n  });\n\n  // Comment reactions routes\n  app.post('/api/comments/:id/react', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const commentId = parseInt(req.params.id);\n      const { reactionType } = req.body;\n\n      if (!['like', 'dislike'].includes(reactionType)) {\n        return res.status(400).json({ message: \"Reaction type must be 'like' or 'dislike'\" });\n      }\n\n      const reaction = await storage.upsertCommentReaction({ commentId, userId, reactionType });\n      res.json(reaction);\n    } catch (error) {\n      console.error(\"Error reacting to comment:\", error);\n      res.status(500).json({ message: \"Failed to react to comment\" });\n    }\n  });\n\n  app.delete('/api/comments/:id/react', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const commentId = parseInt(req.params.id);\n\n      await storage.deleteCommentReaction(commentId, userId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error removing reaction:\", error);\n      res.status(500).json({ message: \"Failed to remove reaction\" });\n    }\n  });\n\n  // Reports routes\n  app.post('/api/comments/:id/report', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const commentId = parseInt(req.params.id);\n      const { reason } = req.body;\n\n      const report = await storage.createReport({ commentId, reportedBy: userId, reason });\n      res.status(201).json(report);\n    } catch (error) {\n      console.error(\"Error reporting comment:\", error);\n      res.status(500).json({ message: \"Failed to report comment\" });\n    }\n  });\n\n  // Admin routes\n  app.get('/api/admin/reports', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { status } = req.query;\n      const reports = await storage.getReports(status as string);\n      res.json(reports);\n    } catch (error) {\n      console.error(\"Error fetching reports:\", error);\n      res.status(500).json({ message: \"Failed to fetch reports\" });\n    }\n  });\n\n  app.put('/api/admin/reports/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const reportId = parseInt(req.params.id);\n      const { status } = req.body;\n\n      if (!['pending', 'resolved'].includes(status)) {\n        return res.status(400).json({ message: \"Status must be 'pending' or 'resolved'\" });\n      }\n\n      const report = await storage.updateReportStatus(reportId, status);\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error updating report:\", error);\n      res.status(500).json({ message: \"Failed to update report\" });\n    }\n  });\n\n  // Mass import endpoint for admin (by artists)\n  app.post('/api/admin/import', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied. Admin rights required.\" });\n      }\n\n      const { artists } = req.body;\n      if (!artists || !Array.isArray(artists)) {\n        return res.status(400).json({ message: \"Artists array is required\" });\n      }\n\n      const result = await massImportService.importArtists(artists);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error importing artists:\", error);\n      res.status(500).json({ message: \"Failed to import artists\" });\n    }\n  });\n\n  // Mass import endpoint for admin (by years)\n  app.post('/api/admin/import/years', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied. Admin rights required.\" });\n      }\n\n      const { years } = req.body;\n      if (!years || !Array.isArray(years)) {\n        return res.status(400).json({ message: \"Years array is required\" });\n      }\n\n      // Validate years are numbers\n      const validYears = years.filter((year: any) => \n        typeof year === 'number' && year >= 1900 && year <= new Date().getFullYear()\n      );\n\n      if (validYears.length === 0) {\n        return res.status(400).json({ message: \"Valid years (1900-current) are required\" });\n      }\n\n      const result = await massImportService.importByYears(validYears);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error importing by years:\", error);\n      res.status(500).json({ message: \"Failed to import by years\" });\n    }\n  });\n\n  // Import stats endpoint for admin\n  app.get('/api/admin/import/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied. Admin rights required.\" });\n      }\n\n      const stats = await massImportService.getImportStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching import stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch import stats\" });\n    }\n  });\n\n  // Yandex Music Import Stats\n  app.get('/api/import/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied. Admin rights required.\" });\n      }\n\n      const stats = await storage.getImportStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error getting import stats:\", error);\n      res.status(500).json({ message: \"Failed to get import stats\" });\n    }\n  });\n\n  // Test Yandex Music Playlist Import\n  app.post('/api/import/test-playlist', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied. Admin rights required.\" });\n      }\n\n      const { playlistUrl } = req.body;\n      if (!playlistUrl || typeof playlistUrl !== 'string') {\n        return res.status(400).json({ message: \"Playlist URL is required\" });\n      }\n\n      if (!playlistUrl.includes('music.mts.ru') && !playlistUrl.includes('music.yandex.ru')) {\n        return res.status(400).json({ message: \"Invalid playlist URL - supported: MTS Music, Yandex Music\" });\n      }\n\n      // Import from playlist using the music importer\n      const musicImporter = await import('./music-importer');\n      const result = await musicImporter.importFromRussianPlaylist(playlistUrl);\n      \n      res.json({\n        success: true,\n        stats: result\n      });\n    } catch (error: any) {\n      console.error(\"Error testing playlist import:\", error);\n      res.status(500).json({ message: error.message || \"Failed to import playlist\" });\n    }\n  });\n\n  // Update existing artists with new releases\n  app.post('/api/import/update-artists', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied. Admin rights required.\" });\n      }\n\n      // Update all artists with Spotify IDs\n      const musicImporter = await import('./music-importer');\n      const result = await musicImporter.updateAllArtists();\n      \n      res.json({\n        success: true,\n        stats: result\n      });\n    } catch (error: any) {\n      console.error(\"Error updating artists:\", error);\n      res.status(500).json({ message: error.message || \"Failed to update artists\" });\n    }\n  });\n\n  // Test single artist API (temporary testing endpoint)\n  app.post('/api/test-single-artist', async (req, res) => {\n    try {\n      const { artistName } = req.body;\n      if (!artistName) {\n        return res.status(400).json({ message: \"Artist name is required\" });\n      }\n\n      console.log(`🧪 Тестирование артиста: ${artistName}`);\n      \n      // Simple test using combined music API\n      const combinedAPI = await import('./combined-music-api');\n      const musicAPI = new combinedAPI.CombinedMusicAPI();\n      \n      const result = await musicAPI.findArtist(artistName);\n      \n      if (!result) {\n        return res.json({\n          success: false,\n          message: `Artist \"${artistName}\" not found`,\n          albums: []\n        });\n      }\n      \n      const { artist, albums } = result;\n      \n      res.json({\n        success: true,\n        artist: {\n          name: artist.name,\n          source: artist.source,\n          id: artist.id\n        },\n        albums: albums.map(album => ({\n          title: album.title,\n          releaseDate: album.releaseDate,\n          type: album.albumType,\n          id: album.id\n        })),\n        totalAlbums: albums.length,\n        message: `Found ${albums.length} albums for ${artist.name}`\n      });\n    } catch (error: any) {\n      console.error(\"Error testing artist:\", error);\n      res.status(500).json({ message: error.message || \"Failed to test artist\" });\n    }\n  });\n\n  // Manual Daily Import Trigger - for testing\n  app.post('/api/import/manual-daily', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied. Admin rights required.\" });\n      }\n\n      console.log('🎯 Администратор запустил ручной импорт');\n      \n      // Import from scheduled daily import\n      const scheduler = await import('./scheduler');\n      const result = await scheduler.manualImportTrigger();\n      \n      res.json({\n        success: true,\n        stats: result,\n        message: 'Manual daily import completed successfully'\n      });\n    } catch (error: any) {\n      console.error(\"Error during manual daily import:\", error);\n      res.status(500).json({ message: error.message || \"Failed to run manual daily import\" });\n    }\n  });\n\n  // Background Import Jobs\n  app.post('/api/import/background-playlist', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied. Admin rights required.\" });\n      }\n\n      const { playlistUrl } = req.body;\n      if (!playlistUrl || typeof playlistUrl !== 'string') {\n        return res.status(400).json({ message: \"Playlist URL is required\" });\n      }\n\n      if (!playlistUrl.includes('music.mts.ru') && !playlistUrl.includes('music.yandex.ru')) {\n        return res.status(400).json({ message: \"Invalid playlist URL - supported: MTS Music, Yandex Music\" });\n      }\n\n      // Create background import job\n      const backgroundJobs = await import('./background-jobs');\n      const jobId = await backgroundJobs.createImportJob({\n        playlistUrl,\n        status: 'pending',\n        createdBy: userId,\n      });\n      \n      res.json({\n        success: true,\n        jobId,\n        message: 'Background import job created. Use /api/import/jobs to check progress.'\n      });\n    } catch (error: any) {\n      console.error(\"Error creating background import job:\", error);\n      res.status(500).json({ message: error.message || \"Failed to create background import job\" });\n    }\n  });\n\n  app.get('/api/import/jobs', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied. Admin rights required.\" });\n      }\n\n      const backgroundJobs = await import('./background-jobs');\n      const jobs = await backgroundJobs.getAllImportJobs(userId);\n      \n      res.json(jobs);\n    } catch (error: any) {\n      console.error(\"Error fetching import jobs:\", error);\n      res.status(500).json({ message: error.message || \"Failed to fetch import jobs\" });\n    }\n  });\n\n  app.get('/api/import/jobs/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied. Admin rights required.\" });\n      }\n\n      const jobId = parseInt(req.params.id);\n      if (isNaN(jobId)) {\n        return res.status(400).json({ message: \"Invalid job ID\" });\n      }\n\n      const backgroundJobs = await import('./background-jobs');\n      const job = await backgroundJobs.getImportJob(jobId);\n      \n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n\n      res.json(job);\n    } catch (error: any) {\n      console.error(\"Error fetching import job:\", error);\n      res.status(500).json({ message: error.message || \"Failed to fetch import job\" });\n    }\n  });\n\n  app.post('/api/import/jobs/:id/cancel', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied. Admin rights required.\" });\n      }\n\n      const jobId = parseInt(req.params.id);\n      if (isNaN(jobId)) {\n        return res.status(400).json({ message: \"Invalid job ID\" });\n      }\n\n      const backgroundJobs = await import('./background-jobs');\n      const cancelled = await backgroundJobs.cancelImportJob(jobId);\n      \n      if (!cancelled) {\n        return res.status(404).json({ message: \"Job not found or already completed\" });\n      }\n\n      res.json({ success: true, message: \"Job cancelled\" });\n    } catch (error: any) {\n      console.error(\"Error cancelling import job:\", error);\n      res.status(500).json({ message: error.message || \"Failed to cancel import job\" });\n    }\n  });\n\n  // User profile routes\n  app.get('/api/users/:id/ratings', async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const ratings = await storage.getUserRatings(userId);\n      res.json(ratings);\n    } catch (error) {\n      console.error(\"Error fetching user ratings:\", error);\n      res.status(500).json({ message: \"Failed to fetch user ratings\" });\n    }\n  });\n\n  app.get('/api/users/:id/comments', async (req, res) => {\n    try {\n      const userId = req.params.id;\n      const comments = await storage.getUserComments(userId);\n      res.json(comments);\n    } catch (error) {\n      console.error(\"Error fetching user comments:\", error);\n      res.status(500).json({ message: \"Failed to fetch user comments\" });\n    }\n  });\n\n  // Collection routes\n  app.get('/api/collections', async (req, res) => {\n    try {\n      const activeOnly = req.query.activeOnly !== 'false';\n      const collections = await storage.getCollections(activeOnly);\n      // Sort by sortOrder, then by id for stable sorting when sortOrder is the same\n      const sortedCollections = collections.sort((a, b) => {\n        const sortOrderDiff = (a.sortOrder || 0) - (b.sortOrder || 0);\n        if (sortOrderDiff !== 0) return sortOrderDiff;\n        // If sortOrder is the same, sort by id (ascending = earlier created first)\n        return a.id - b.id;\n      });\n      res.json(sortedCollections);\n    } catch (error) {\n      console.error(\"Error fetching collections:\", error);\n      res.status(500).json({ message: \"Failed to fetch collections\" });\n    }\n  });\n\n  app.get('/api/collections/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const collection = await storage.getCollection(id);\n      \n      if (!collection) {\n        return res.status(404).json({ message: \"Collection not found\" });\n      }\n      \n      res.json(collection);\n    } catch (error) {\n      console.error(\"Error fetching collection:\", error);\n      res.status(500).json({ message: \"Failed to fetch collection\" });\n    }\n  });\n\n  app.post('/api/collections', isAuthenticated, async (req: any, res) => {\n    try {\n      // Check if user is admin\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      // Extract releaseIds if present, validate the rest\n      const { releaseIds, ...collectionData } = req.body;\n      const validatedData = insertCollectionSchema.parse(collectionData);\n      \n      // Create the collection first\n      const collection = await storage.createCollection(validatedData);\n      \n      // Add releases if provided\n      if (releaseIds && Array.isArray(releaseIds) && releaseIds.length > 0) {\n        for (let i = 0; i < releaseIds.length; i++) {\n          await storage.addReleaseToCollection(collection.id, releaseIds[i], i);\n        }\n      }\n      \n      // Return collection with releases\n      const fullCollection = await storage.getCollection(collection.id);\n      res.status(201).json(fullCollection);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid collection data\", errors: error.errors });\n      }\n      console.error(\"Error creating collection:\", error);\n      res.status(500).json({ message: \"Failed to create collection\" });\n    }\n  });\n\n  app.put('/api/collections/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      // Check if user is admin\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const id = parseInt(req.params.id);\n      \n      // Extract releaseIds if present, validate the rest\n      const { releaseIds, ...collectionData } = req.body;\n      const validatedData = insertCollectionSchema.partial().parse(collectionData);\n      \n      // Update the collection first\n      const collection = await storage.updateCollection(id, validatedData);\n      \n      // Update releases if provided\n      if (releaseIds && Array.isArray(releaseIds)) {\n        // Remove all existing releases for this collection\n        await storage.removeAllReleasesFromCollection(id);\n        \n        // Add new releases with proper order\n        for (let i = 0; i < releaseIds.length; i++) {\n          await storage.addReleaseToCollection(id, releaseIds[i], i);\n        }\n      }\n      \n      // Return updated collection with releases\n      const fullCollection = await storage.getCollection(id);\n      res.json(fullCollection);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid collection data\", errors: error.errors });\n      }\n      console.error(\"Error updating collection:\", error);\n      res.status(500).json({ message: \"Failed to update collection\" });\n    }\n  });\n\n  app.delete('/api/collections/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      // Check if user is admin\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const id = parseInt(req.params.id);\n      await storage.deleteCollection(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting collection:\", error);\n      res.status(500).json({ message: \"Failed to delete collection\" });\n    }\n  });\n\n  app.post('/api/collections/:id/releases', isAuthenticated, async (req: any, res) => {\n    try {\n      // Check if user is admin\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const collectionId = parseInt(req.params.id);\n      const { releaseId, sortOrder } = req.body;\n\n      if (!releaseId) {\n        return res.status(400).json({ message: \"Release ID is required\" });\n      }\n\n      const collectionRelease = await storage.addReleaseToCollection(collectionId, releaseId, sortOrder);\n      res.status(201).json(collectionRelease);\n    } catch (error) {\n      console.error(\"Error adding release to collection:\", error);\n      res.status(500).json({ message: \"Failed to add release to collection\" });\n    }\n  });\n\n  app.delete('/api/collections/:id/releases/:releaseId', isAuthenticated, async (req: any, res) => {\n    try {\n      // Check if user is admin\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const collectionId = parseInt(req.params.id);\n      const releaseId = parseInt(req.params.releaseId);\n\n      await storage.removeReleaseFromCollection(collectionId, releaseId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error removing release from collection:\", error);\n      res.status(500).json({ message: \"Failed to remove release from collection\" });\n    }\n  });\n\n  app.put('/api/collections/:id/releases/:releaseId/sort', isAuthenticated, async (req: any, res) => {\n    try {\n      // Check if user is admin\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const collectionId = parseInt(req.params.id);\n      const releaseId = parseInt(req.params.releaseId);\n      const { sortOrder } = req.body;\n\n      if (typeof sortOrder !== 'number') {\n        return res.status(400).json({ message: \"Sort order must be a number\" });\n      }\n\n      await storage.updateCollectionReleaseSortOrder(collectionId, releaseId, sortOrder);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error updating sort order:\", error);\n      res.status(500).json({ message: \"Failed to update sort order\" });\n    }\n  });\n\n\n  app.post('/api/import/update-artists', isAuthenticated, async (req: any, res) => {\n    try {\n      // Check if user is admin\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      console.log(`Starting artist update process`);\n      \n      // Update existing artists\n      const { updateExistingArtists } = await import('./music-importer');\n      const stats = await updateExistingArtists();\n      \n      res.json({\n        success: true,\n        stats,\n        message: `Update completed: ${stats.newReleases} new releases, ${stats.updatedArtists} artists updated, ${stats.errors.length} errors`\n      });\n\n    } catch (error: any) {\n      console.error(\"Error during artist update:\", error);\n      res.status(500).json({ \n        success: false,\n        message: \"Update failed\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.get('/api/import/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      // Check if user is admin\n      const user = await storage.getUser(req.session.userId);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      // Get database statistics - we'll add these methods to storage interface\n      const totalArtists = 0; // await storage.getArtistCount();\n      const totalReleases = 0; // await storage.getReleaseCount();\n      const artistsWithSpotify = 0; // await storage.getArtistsWithSpotifyCount();\n      const recentReleases = 0; // await storage.getRecentReleasesCount(7);\n\n      res.json({\n        totalArtists,\n        totalReleases,\n        artistsWithSpotify,\n        recentReleases,\n        spotifyIntegration: artistsWithSpotify > 0 ? 'connected' : 'not_connected'\n      });\n\n    } catch (error) {\n      console.error(\"Error getting import stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch import stats\" });\n    }\n  });\n\n  // Automatic Scheduler Management Endpoints\n  \n  // Get scheduler status\n  app.get('/api/scheduler/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied. Admin rights required.\" });\n      }\n\n      const status = getSchedulerStatus();\n      res.json(status);\n    } catch (error) {\n      console.error(\"Error getting scheduler status:\", error);\n      res.status(500).json({ message: \"Failed to get scheduler status\" });\n    }\n  });\n\n  // Start automatic scheduler\n  app.post('/api/scheduler/start', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied. Admin rights required.\" });\n      }\n\n      const schedulerInfo = scheduleDaily();\n      \n      // Также запускаем еженедельное обновление дат релизов\n      scheduleWeeklyReleaseDateUpdate();\n      \n      res.json({\n        success: true,\n        message: \"Автоматический планировщик запущен\",\n        ...schedulerInfo\n      });\n    } catch (error) {\n      console.error(\"Error starting scheduler:\", error);\n      res.status(500).json({ message: \"Failed to start scheduler\" });\n    }\n  });\n\n  // Stop automatic scheduler\n  app.post('/api/scheduler/stop', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied. Admin rights required.\" });\n      }\n\n      const stopped = stopScheduler();\n      res.json({\n        success: stopped,\n        message: stopped ? \"Автоматический планировщик остановлен\" : \"Планировщик уже был остановлен\"\n      });\n    } catch (error) {\n      console.error(\"Error stopping scheduler:\", error);\n      res.status(500).json({ message: \"Failed to stop scheduler\" });\n    }\n  });\n\n  // Manually trigger daily import\n  app.post('/api/scheduler/trigger', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Access denied. Admin rights required.\" });\n      }\n\n      // Run in background to avoid timeout\n      runDailyMusicImport().then(stats => {\n        console.log('📊 Ручной импорт завершен:', stats);\n      }).catch(error => {\n        console.error('❌ Ошибка ручного импорта:', error);\n      });\n\n      res.json({\n        success: true,\n        message: \"Ежедневный импорт запущен в фоне. Проверьте логи сервера для отслеживания прогресса.\"\n      });\n    } catch (error) {\n      console.error(\"Error triggering manual import:\", error);\n      res.status(500).json({ message: \"Failed to trigger manual import\" });\n    }\n  });\n\n  // Auto Import Playlists management (Admin only)\n  app.get('/api/auto-import-playlists', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const playlists = await storage.getAutoImportPlaylists();\n      res.json(playlists);\n    } catch (error) {\n      console.error(\"Error fetching auto playlists:\", error);\n      res.status(500).json({ message: \"Failed to fetch playlists\" });\n    }\n  });\n\n  app.post('/api/auto-import-playlists', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      console.log(\"Received playlist data:\", JSON.stringify(req.body, null, 2));\n      \n      const validated = insertAutoImportPlaylistSchema.parse(req.body);\n      console.log(\"Validated playlist data:\", JSON.stringify(validated, null, 2));\n      \n      const playlist = await storage.createAutoImportPlaylist(validated);\n      res.json(playlist);\n    } catch (error) {\n      console.error(\"Error creating auto playlist:\", error);\n      if (error instanceof z.ZodError) {\n        console.error(\"Zod validation errors:\", JSON.stringify(error.errors, null, 2));\n        return res.status(400).json({ \n          message: \"Ошибка валидации\", \n          errors: error.errors.map(e => ({\n            field: e.path.join('.'),\n            message: e.message\n          }))\n        });\n      }\n      res.status(500).json({ message: \"Failed to create playlist\" });\n    }\n  });\n\n  app.put('/api/auto-import-playlists/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const id = parseInt(req.params.id);\n      const validated = insertAutoImportPlaylistSchema.partial().parse(req.body);\n      const playlist = await storage.updateAutoImportPlaylist(id, validated);\n      res.json(playlist);\n    } catch (error) {\n      console.error(\"Error updating auto playlist:\", error);\n      res.status(500).json({ message: \"Failed to update playlist\" });\n    }\n  });\n\n  app.delete('/api/auto-import-playlists/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const id = parseInt(req.params.id);\n      await storage.deleteAutoImportPlaylist(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting auto playlist:\", error);\n      res.status(500).json({ message: \"Failed to delete playlist\" });\n    }\n  });\n\n  // Import Logs endpoints\n  app.get('/api/import-logs', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n      const logs = await storage.getImportLogs(limit);\n      res.json(logs);\n    } catch (error) {\n      console.error(\"Error fetching import logs:\", error);\n      res.status(500).json({ message: \"Failed to fetch import logs\" });\n    }\n  });\n\n  app.get('/api/import-logs/latest', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const latestLog = await storage.getLatestImportLog();\n      res.json(latestLog || null);\n    } catch (error) {\n      console.error(\"Error fetching latest import log:\", error);\n      res.status(500).json({ message: \"Failed to fetch latest import log\" });\n    }\n  });\n\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":44599},"server/storage.ts":{"content":"import {\n  users,\n  artists,\n  releases,\n  ratings,\n  comments,\n  commentReactions,\n  reports,\n  collections,\n  collectionReleases,\n  autoImportPlaylists,\n  importLogs,\n  type User,\n  type UpsertUser,\n  type Artist,\n  type Release,\n  type Rating,\n  type Comment,\n  type CommentReaction,\n  type Report,\n  type Collection,\n  type CollectionRelease,\n  type SelectAutoImportPlaylist,\n  type ImportLog,\n  type InsertArtist,\n  type InsertRelease,\n  type InsertRating,\n  type InsertComment,\n  type InsertCommentReaction,\n  type InsertReport,\n  type InsertCollection,\n  type InsertCollectionRelease,\n  type InsertAutoImportPlaylist,\n  type InsertImportLog,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql, and, or, ilike } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserNickname(id: string, nickname: string): Promise<User>;\n\n  // Artist operations\n  getArtists(): Promise<Artist[]>;\n  getArtist(id: number): Promise<Artist | undefined>;\n  getArtistByName(name: string): Promise<Artist | undefined>;\n  createArtist(artist: InsertArtist): Promise<Artist>;\n  \n  // Release operations\n  getReleases(filters?: { genre?: string; year?: number; artistId?: number }): Promise<(Release & { artist: Artist; averageRating: number; commentCount: number })[]>;\n  getRelease(id: number): Promise<(Release & { artist: Artist; averageRating: number; commentCount: number }) | undefined>;\n  getReleaseByTitleAndArtist(title: string, artistId: number): Promise<Release | undefined>;\n  createRelease(release: InsertRelease): Promise<Release>;\n  updateRelease(id: number, release: Partial<InsertRelease>): Promise<Release>;\n  deleteRelease(id: number): Promise<void>;\n  searchReleases(query: string, sortBy?: 'date_desc' | 'date_asc' | 'rating_desc' | 'rating_asc'): Promise<(Release & { artist: Artist; averageRating: number })[]>;\n  searchArtists(query: string): Promise<(Artist & { latestReleaseCover?: string })[]>;\n  \n  // Rating operations\n  getRating(userId: string, releaseId: number): Promise<Rating | undefined>;\n  upsertRating(rating: InsertRating): Promise<Rating>;\n  getReleaseRatings(releaseId: number): Promise<{ averageRating: number; count: number }>;\n  \n  // Comment operations\n  getComments(releaseId: number, sortBy?: 'date' | 'rating' | 'likes'): Promise<(Comment & { \n    user: Pick<User, 'id' | 'nickname' | 'profileImageUrl'> | null;\n    likeCount: number;\n    dislikeCount: number;\n    userReaction?: 'like' | 'dislike';\n  })[]>;\n  createComment(comment: InsertComment): Promise<Comment>;\n  updateComment(id: number, comment: Partial<InsertComment>): Promise<Comment>;\n  deleteComment(id: number): Promise<void>;\n  \n  // Comment reaction operations\n  upsertCommentReaction(reaction: InsertCommentReaction): Promise<CommentReaction>;\n  deleteCommentReaction(commentId: number, userId: string): Promise<void>;\n  \n  // Report operations\n  createReport(report: InsertReport): Promise<Report>;\n  getReports(status?: string): Promise<(Report & { comment: Comment; user: Pick<User, 'nickname'> })[]>;\n  updateReportStatus(id: number, status: string): Promise<Report>;\n  \n  // User profile operations\n  getUserRatings(userId: string): Promise<(Rating & { release: Release & { artist: Artist } })[]>;\n  getUserComments(userId: string): Promise<(Comment & { release: Release & { artist: Artist } })[]>;\n  \n  // Collection operations\n  getCollections(activeOnly?: boolean): Promise<(Collection & { releases: (Release & { artist: Artist })[] })[]>;\n  getCollection(id: number): Promise<(Collection & { releases: (Release & { artist: Artist })[] }) | undefined>;\n  createCollection(collection: InsertCollection): Promise<Collection>;\n  updateCollection(id: number, collection: Partial<InsertCollection>): Promise<Collection>;\n  deleteCollection(id: number): Promise<void>;\n  addReleaseToCollection(collectionId: number, releaseId: number, sortOrder?: number): Promise<CollectionRelease>;\n  removeReleaseFromCollection(collectionId: number, releaseId: number): Promise<void>;\n  updateCollectionReleaseSortOrder(collectionId: number, releaseId: number, sortOrder: number): Promise<void>;\n  \n  // Import statistics operations\n  getImportStats(): Promise<{\n    totalArtists: number;\n    totalReleases: number;\n    artistsWithSpotify: number;\n    recentReleases: number;\n  }>;\n  \n  // Auto Import Playlists operations\n  getAutoImportPlaylists(): Promise<SelectAutoImportPlaylist[]>;\n  createAutoImportPlaylist(playlist: InsertAutoImportPlaylist): Promise<SelectAutoImportPlaylist>;\n  updateAutoImportPlaylist(id: number, playlist: Partial<InsertAutoImportPlaylist>): Promise<SelectAutoImportPlaylist>;\n  deleteAutoImportPlaylist(id: number): Promise<void>;\n  \n  // Import Logs operations\n  createImportLog(log: InsertImportLog): Promise<ImportLog>;\n  updateImportLog(id: number, log: Partial<InsertImportLog>): Promise<ImportLog>;\n  getImportLogs(limit?: number): Promise<ImportLog[]>;\n  getLatestImportLog(): Promise<ImportLog | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserNickname(id: string, nickname: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ nickname, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  // Artist operations\n  async getArtists(): Promise<Artist[]> {\n    return await db.select().from(artists).orderBy(artists.name);\n  }\n\n  async getArtist(id: number): Promise<Artist | undefined> {\n    const [artist] = await db.select().from(artists).where(eq(artists.id, id));\n    return artist;\n  }\n\n  async getArtistByName(name: string): Promise<Artist | undefined> {\n    const [artist] = await db.select().from(artists).where(eq(artists.name, name));\n    return artist;\n  }\n\n  async createArtist(artist: InsertArtist): Promise<Artist> {\n    const [newArtist] = await db.insert(artists).values(artist).returning();\n    return newArtist;\n  }\n\n  // Release operations\n  async getReleases(filters?: { genre?: string; year?: number; artistId?: number; includeTestData?: boolean }): Promise<(Release & { artist: Artist; averageRating: number; commentCount: number })[]> {\n    const whereConditions = [];\n    \n    // По умолчанию скрываем тестовые данные\n    if (!filters?.includeTestData) {\n      whereConditions.push(eq(releases.isTestData, false));\n    }\n    \n    if (filters?.artistId) {\n      whereConditions.push(eq(releases.artistId, filters.artistId));\n    }\n    \n    if (filters?.year) {\n      whereConditions.push(sql`EXTRACT(YEAR FROM ${releases.releaseDate}) = ${filters.year}`);\n    }\n\n    let query = db\n      .select({\n        id: releases.id,\n        artistId: releases.artistId,\n        title: releases.title,\n        releaseDate: releases.releaseDate,\n        coverUrl: releases.coverUrl,\n        streamingLinks: releases.streamingLinks,\n        isTestData: releases.isTestData,\n        createdAt: releases.createdAt,\n        artist: {\n          id: artists.id,\n          name: artists.name,\n          createdAt: artists.createdAt,\n        },\n        averageRating: sql<number>`COALESCE(AVG(${ratings.score}), 0)`,\n        commentCount: sql<number>`COUNT(DISTINCT ${comments.id})`,\n      })\n      .from(releases)\n      .leftJoin(artists, eq(releases.artistId, artists.id))\n      .leftJoin(ratings, eq(releases.id, ratings.releaseId))\n      .leftJoin(comments, eq(releases.id, comments.releaseId))\n      .groupBy(releases.id, artists.id);\n\n    if (whereConditions.length > 0) {\n      query = query.where(and(...whereConditions)) as any;\n    }\n\n    const result = await query.orderBy(desc(releases.createdAt));\n    return result as (Release & { artist: Artist; averageRating: number; commentCount: number })[];\n  }\n\n  async getRelease(id: number): Promise<(Release & { artist: Artist; averageRating: number; commentCount: number }) | undefined> {\n    const [result] = await db\n      .select({\n        id: releases.id,\n        artistId: releases.artistId,\n        title: releases.title,\n        releaseDate: releases.releaseDate,\n        coverUrl: releases.coverUrl,\n        streamingLinks: releases.streamingLinks,\n        isTestData: releases.isTestData,\n        createdAt: releases.createdAt,\n        artist: {\n          id: artists.id,\n          name: artists.name,\n          createdAt: artists.createdAt,\n        },\n        averageRating: sql<number>`COALESCE(AVG(${ratings.score}), 0)`,\n        commentCount: sql<number>`COUNT(DISTINCT ${comments.id})`,\n      })\n      .from(releases)\n      .leftJoin(artists, eq(releases.artistId, artists.id))\n      .leftJoin(ratings, eq(releases.id, ratings.releaseId))\n      .leftJoin(comments, eq(releases.id, comments.releaseId))\n      .where(eq(releases.id, id))\n      .groupBy(releases.id, artists.id);\n\n    return result as (Release & { artist: Artist; averageRating: number; commentCount: number }) | undefined;\n  }\n\n  async getReleaseByTitleAndArtist(title: string, artistId: number): Promise<Release | undefined> {\n    const [release] = await db\n      .select()\n      .from(releases)\n      .where(and(eq(releases.title, title), eq(releases.artistId, artistId)));\n    return release;\n  }\n\n  async createRelease(release: InsertRelease): Promise<Release> {\n    const [newRelease] = await db.insert(releases).values(release).returning();\n    return newRelease;\n  }\n\n  async updateRelease(id: number, release: Partial<InsertRelease>): Promise<Release> {\n    const [updatedRelease] = await db\n      .update(releases)\n      .set(release)\n      .where(eq(releases.id, id))\n      .returning();\n    return updatedRelease;\n  }\n\n  async deleteRelease(id: number): Promise<void> {\n    await db.delete(releases).where(eq(releases.id, id));\n  }\n\n  async searchReleases(query: string, sortBy?: 'date_desc' | 'date_asc' | 'rating_desc' | 'rating_asc'): Promise<(Release & { artist: Artist; averageRating: number })[]> {\n    // Build the base query with groupBy and orderBy in the correct order\n    let orderByClause;\n    \n    if (sortBy === 'date_desc') {\n      orderByClause = [desc(releases.releaseDate), desc(releases.createdAt)];\n    } else if (sortBy === 'date_asc') {\n      orderByClause = [releases.releaseDate, releases.createdAt];\n    } else if (sortBy === 'rating_desc') {\n      orderByClause = [desc(sql`COALESCE(AVG(${ratings.score}), 0)`)];\n    } else if (sortBy === 'rating_asc') {\n      orderByClause = [sql`COALESCE(AVG(${ratings.score}), 0)`];\n    } else {\n      // Default sorting by relevance (no specific order)\n      orderByClause = [desc(releases.createdAt)];\n    }\n\n    const result = await db\n      .select({\n        id: releases.id,\n        artistId: releases.artistId,\n        title: releases.title,\n        releaseDate: releases.releaseDate,\n        coverUrl: releases.coverUrl,\n        streamingLinks: releases.streamingLinks,\n        createdAt: releases.createdAt,\n        artist: {\n          id: artists.id,\n          name: artists.name,\n          createdAt: artists.createdAt,\n        },\n        averageRating: sql<number>`COALESCE(AVG(${ratings.score}), 0)`.as('averageRating'),\n      })\n      .from(releases)\n      .leftJoin(artists, eq(releases.artistId, artists.id))\n      .leftJoin(ratings, eq(ratings.releaseId, releases.id))\n      .where(\n        or(\n          ilike(releases.title, `%${query}%`),\n          ilike(artists.name, `%${query}%`)\n        )\n      )\n      .groupBy(releases.id, artists.id)\n      .orderBy(...orderByClause);\n\n    return result as (Release & { artist: Artist; averageRating: number })[];\n  }\n\n  async searchArtists(query: string): Promise<(Artist & { latestReleaseCover?: string })[]> {\n    const result = await db\n      .select({\n        id: artists.id,\n        name: artists.name,\n        spotifyId: artists.spotifyId,\n        createdAt: artists.createdAt,\n        latestReleaseCover: sql<string>`(\n          SELECT r.cover_url \n          FROM releases r \n          WHERE r.artist_id = artists.id \n          ORDER BY r.release_date DESC, r.created_at DESC \n          LIMIT 1\n        )`.as('latestReleaseCover'),\n      })\n      .from(artists)\n      .where(ilike(artists.name, `%${query}%`));\n\n    return result as (Artist & { latestReleaseCover?: string })[];\n  }\n\n  // Rating operations\n  async getRating(userId: string, releaseId: number): Promise<Rating | undefined> {\n    const [rating] = await db\n      .select()\n      .from(ratings)\n      .where(and(eq(ratings.userId, userId), eq(ratings.releaseId, releaseId)));\n    return rating;\n  }\n\n  async upsertRating(rating: InsertRating): Promise<Rating> {\n    const [result] = await db\n      .insert(ratings)\n      .values(rating)\n      .onConflictDoUpdate({\n        target: [ratings.userId, ratings.releaseId],\n        set: {\n          score: rating.score,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return result;\n  }\n\n  async getReleaseRatings(releaseId: number): Promise<{ averageRating: number; count: number }> {\n    const [result] = await db\n      .select({\n        averageRating: sql<number>`COALESCE(AVG(${ratings.score}), 0)`,\n        count: sql<number>`COUNT(*)`,\n      })\n      .from(ratings)\n      .where(eq(ratings.releaseId, releaseId));\n\n    return result || { averageRating: 0, count: 0 };\n  }\n\n  // Comment operations\n  async getComments(releaseId: number, sortBy: 'date' | 'rating' | 'likes' = 'date'): Promise<(Comment & { \n    user: Pick<User, 'id' | 'nickname' | 'profileImageUrl'> | null;\n    likeCount: number;\n    dislikeCount: number;\n    userReaction?: 'like' | 'dislike';\n  })[]> {\n    let orderBy;\n    switch (sortBy) {\n      case 'rating':\n        orderBy = desc(comments.rating);\n        break;\n      case 'likes':\n        orderBy = sql`like_count DESC`;\n        break;\n      default:\n        orderBy = desc(comments.createdAt);\n    }\n\n    const result = await db\n      .select({\n        id: comments.id,\n        userId: comments.userId,\n        releaseId: comments.releaseId,\n        text: comments.text,\n        rating: comments.rating,\n        isAnonymous: comments.isAnonymous,\n        createdAt: comments.createdAt,\n        updatedAt: comments.updatedAt,\n        user: {\n          id: users.id,\n          nickname: users.nickname,\n          profileImageUrl: users.profileImageUrl,\n        },\n        likeCount: sql<number>`COUNT(CASE WHEN ${commentReactions.reactionType} = 'like' THEN 1 END)`,\n        dislikeCount: sql<number>`COUNT(CASE WHEN ${commentReactions.reactionType} = 'dislike' THEN 1 END)`,\n      })\n      .from(comments)\n      .leftJoin(users, and(eq(comments.userId, users.id), eq(comments.isAnonymous, false)))\n      .leftJoin(commentReactions, eq(comments.id, commentReactions.commentId))\n      .where(eq(comments.releaseId, releaseId))\n      .groupBy(comments.id, users.id)\n      .orderBy(orderBy);\n\n    return result as (Comment & { \n      user: Pick<User, 'id' | 'nickname' | 'profileImageUrl'> | null;\n      likeCount: number;\n      dislikeCount: number;\n    })[];\n  }\n\n  async createComment(comment: InsertComment): Promise<Comment> {\n    const [newComment] = await db.insert(comments).values(comment).returning();\n    return newComment;\n  }\n\n  async updateComment(id: number, comment: Partial<InsertComment>): Promise<Comment> {\n    const [updatedComment] = await db\n      .update(comments)\n      .set({ ...comment, updatedAt: new Date() })\n      .where(eq(comments.id, id))\n      .returning();\n    return updatedComment;\n  }\n\n  async deleteComment(id: number): Promise<void> {\n    await db.delete(comments).where(eq(comments.id, id));\n  }\n\n  async getUserCommentForRelease(userId: string, releaseId: number): Promise<Comment | null> {\n    const [result] = await db\n      .select()\n      .from(comments)\n      .where(and(eq(comments.userId, userId), eq(comments.releaseId, releaseId)))\n      .limit(1);\n    return result || null;\n  }\n\n  // Comment reaction operations\n  async upsertCommentReaction(reaction: InsertCommentReaction): Promise<CommentReaction> {\n    const [result] = await db\n      .insert(commentReactions)\n      .values(reaction)\n      .onConflictDoUpdate({\n        target: [commentReactions.commentId, commentReactions.userId],\n        set: {\n          reactionType: reaction.reactionType,\n        },\n      })\n      .returning();\n    return result;\n  }\n\n  async deleteCommentReaction(commentId: number, userId: string): Promise<void> {\n    await db\n      .delete(commentReactions)\n      .where(and(eq(commentReactions.commentId, commentId), eq(commentReactions.userId, userId)));\n  }\n\n  // Report operations\n  async createReport(report: InsertReport): Promise<Report> {\n    const [newReport] = await db.insert(reports).values(report).returning();\n    return newReport;\n  }\n\n  async getReports(status?: string): Promise<(Report & { comment: Comment; user: Pick<User, 'nickname'> })[]> {\n    let query = db\n      .select({\n        id: reports.id,\n        commentId: reports.commentId,\n        reportedBy: reports.reportedBy,\n        reason: reports.reason,\n        status: reports.status,\n        createdAt: reports.createdAt,\n        comment: {\n          id: comments.id,\n          userId: comments.userId,\n          releaseId: comments.releaseId,\n          text: comments.text,\n          rating: comments.rating,\n          isAnonymous: comments.isAnonymous,\n          createdAt: comments.createdAt,\n          updatedAt: comments.updatedAt,\n        },\n        user: {\n          nickname: users.nickname,\n        },\n      })\n      .from(reports)\n      .leftJoin(comments, eq(reports.commentId, comments.id))\n      .leftJoin(users, eq(reports.reportedBy, users.id));\n\n    if (status) {\n      query = query.where(eq(reports.status, status)) as any;\n    }\n\n    const result = await query.orderBy(desc(reports.createdAt));\n    return result as (Report & { comment: Comment; user: Pick<User, 'nickname'> })[];\n  }\n\n  async updateReportStatus(id: number, status: string): Promise<Report> {\n    const [updatedReport] = await db\n      .update(reports)\n      .set({ status })\n      .where(eq(reports.id, id))\n      .returning();\n    return updatedReport;\n  }\n\n  // User profile operations\n  async getUserRatings(userId: string): Promise<(Rating & { release: Release & { artist: Artist } })[]> {\n    const result = await db\n      .select({\n        id: ratings.id,\n        userId: ratings.userId,\n        releaseId: ratings.releaseId,\n        score: ratings.score,\n        createdAt: ratings.createdAt,\n        updatedAt: ratings.updatedAt,\n        release: {\n          id: releases.id,\n          artistId: releases.artistId,\n          title: releases.title,\n          type: releases.type,\n          releaseDate: releases.releaseDate,\n          coverUrl: releases.coverUrl,\n          streamingLinks: releases.streamingLinks,\n          isTestData: releases.isTestData,\n          createdAt: releases.createdAt,\n        },\n        artist: {\n          id: artists.id,\n          name: artists.name,\n          createdAt: artists.createdAt,\n        },\n      })\n      .from(ratings)\n      .leftJoin(releases, eq(ratings.releaseId, releases.id))\n      .leftJoin(artists, eq(releases.artistId, artists.id))\n      .where(eq(ratings.userId, userId))\n      .orderBy(desc(ratings.createdAt));\n\n    return result.map(row => ({\n      ...row,\n      release: {\n        ...row.release,\n        artist: row.artist\n      }\n    })) as (Rating & { release: Release & { artist: Artist } })[];\n  }\n\n  async getUserComments(userId: string): Promise<(Comment & { release: Release & { artist: Artist } })[]> {\n    const result = await db\n      .select({\n        id: comments.id,\n        userId: comments.userId,\n        releaseId: comments.releaseId,\n        text: comments.text,\n        rating: comments.rating,\n        isAnonymous: comments.isAnonymous,\n        createdAt: comments.createdAt,\n        updatedAt: comments.updatedAt,\n        release: {\n          id: releases.id,\n          artistId: releases.artistId,\n          title: releases.title,\n          type: releases.type,\n          releaseDate: releases.releaseDate,\n          coverUrl: releases.coverUrl,\n          streamingLinks: releases.streamingLinks,\n          isTestData: releases.isTestData,\n          createdAt: releases.createdAt,\n        },\n        artist: {\n          id: artists.id,\n          name: artists.name,\n          createdAt: artists.createdAt,\n        },\n      })\n      .from(comments)\n      .leftJoin(releases, eq(comments.releaseId, releases.id))\n      .leftJoin(artists, eq(releases.artistId, artists.id))\n      .where(eq(comments.userId, userId))\n      .orderBy(desc(comments.createdAt));\n\n    return result.map(row => ({\n      ...row,\n      release: {\n        ...row.release,\n        artist: row.artist\n      }\n    })) as (Comment & { release: Release & { artist: Artist } })[];\n  }\n\n  // Collection operations\n  async getCollections(activeOnly = true): Promise<(Collection & { releases: (Release & { artist: Artist })[] })[]> {\n    const query = db\n      .select({\n        collection: collections,\n        release: releases,\n        artist: artists,\n        sortOrder: collectionReleases.sortOrder,\n      })\n      .from(collections)\n      .leftJoin(collectionReleases, eq(collections.id, collectionReleases.collectionId))\n      .leftJoin(releases, eq(collectionReleases.releaseId, releases.id))\n      .leftJoin(artists, eq(releases.artistId, artists.id))\n      .orderBy(collections.sortOrder, collectionReleases.sortOrder);\n\n    if (activeOnly) {\n      query.where(eq(collections.isActive, true));\n    }\n\n    const result = await query;\n    \n    // Group by collection\n    const collectionsMap = new Map<number, Collection & { releases: (Release & { artist: Artist })[] }>();\n    \n    for (const row of result) {\n      if (!collectionsMap.has(row.collection.id)) {\n        collectionsMap.set(row.collection.id, {\n          ...row.collection,\n          releases: []\n        });\n      }\n      \n      if (row.release && row.artist) {\n        collectionsMap.get(row.collection.id)!.releases.push({\n          ...row.release,\n          artist: row.artist\n        });\n      }\n    }\n    \n    return Array.from(collectionsMap.values());\n  }\n\n  async getCollection(id: number): Promise<(Collection & { releases: (Release & { artist: Artist })[] }) | undefined> {\n    const result = await db\n      .select({\n        collection: collections,\n        release: releases,\n        artist: artists,\n        sortOrder: collectionReleases.sortOrder,\n      })\n      .from(collections)\n      .leftJoin(collectionReleases, eq(collections.id, collectionReleases.collectionId))\n      .leftJoin(releases, eq(collectionReleases.releaseId, releases.id))\n      .leftJoin(artists, eq(releases.artistId, artists.id))\n      .where(eq(collections.id, id))\n      .orderBy(collectionReleases.sortOrder);\n\n    if (result.length === 0) return undefined;\n\n    const collectionData = result[0].collection;\n    const releasesData = result\n      .filter(row => row.release && row.artist)\n      .map(row => ({\n        ...row.release!,\n        artist: row.artist!\n      }));\n\n    return {\n      ...collectionData,\n      releases: releasesData\n    };\n  }\n\n  async createCollection(collection: InsertCollection): Promise<Collection> {\n    const [created] = await db\n      .insert(collections)\n      .values(collection)\n      .returning();\n    return created;\n  }\n\n  async updateCollection(id: number, collection: Partial<InsertCollection>): Promise<Collection> {\n    const [updated] = await db\n      .update(collections)\n      .set({ ...collection, updatedAt: new Date() })\n      .where(eq(collections.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteCollection(id: number): Promise<void> {\n    await db.delete(collections).where(eq(collections.id, id));\n  }\n\n  async addReleaseToCollection(collectionId: number, releaseId: number, sortOrder = 0): Promise<CollectionRelease> {\n    const [created] = await db\n      .insert(collectionReleases)\n      .values({ collectionId, releaseId, sortOrder })\n      .returning();\n    return created;\n  }\n\n  async removeReleaseFromCollection(collectionId: number, releaseId: number): Promise<void> {\n    await db\n      .delete(collectionReleases)\n      .where(and(\n        eq(collectionReleases.collectionId, collectionId),\n        eq(collectionReleases.releaseId, releaseId)\n      ));\n  }\n\n  async removeAllReleasesFromCollection(collectionId: number): Promise<void> {\n    await db\n      .delete(collectionReleases)\n      .where(eq(collectionReleases.collectionId, collectionId));\n  }\n\n  async updateCollectionReleaseSortOrder(collectionId: number, releaseId: number, sortOrder: number): Promise<void> {\n    await db\n      .update(collectionReleases)\n      .set({ sortOrder })\n      .where(and(\n        eq(collectionReleases.collectionId, collectionId),\n        eq(collectionReleases.releaseId, releaseId)\n      ));\n  }\n\n  async getImportStats(): Promise<{\n    totalArtists: number;\n    totalReleases: number;\n    artistsWithSpotify: number;\n    recentReleases: number;\n  }> {\n    // Get total counts\n    const [totalArtistsResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(artists);\n    \n    const [totalReleasesResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(releases);\n    \n    // Get artists with Spotify IDs\n    const [artistsWithSpotifyResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(artists)\n      .where(sql`spotify_id IS NOT NULL AND spotify_id != ''`);\n    \n    // Get releases from the past week\n    const oneWeekAgo = new Date();\n    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n    \n    const [recentReleasesResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(releases)\n      .where(sql`created_at > ${oneWeekAgo}`);\n    \n    return {\n      totalArtists: totalArtistsResult.count,\n      totalReleases: totalReleasesResult.count,\n      artistsWithSpotify: artistsWithSpotifyResult.count,\n      recentReleases: recentReleasesResult.count\n    };\n  }\n\n  // Auto Import Playlists operations\n  async getAutoImportPlaylists(): Promise<SelectAutoImportPlaylist[]> {\n    return await db.select().from(autoImportPlaylists).orderBy(autoImportPlaylists.sortOrder, autoImportPlaylists.createdAt);\n  }\n\n  async createAutoImportPlaylist(playlist: InsertAutoImportPlaylist): Promise<SelectAutoImportPlaylist> {\n    const [created] = await db.insert(autoImportPlaylists).values(playlist).returning();\n    return created;\n  }\n\n  async updateAutoImportPlaylist(id: number, playlist: Partial<InsertAutoImportPlaylist>): Promise<SelectAutoImportPlaylist> {\n    const [updated] = await db\n      .update(autoImportPlaylists)\n      .set({ ...playlist, updatedAt: new Date() })\n      .where(eq(autoImportPlaylists.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteAutoImportPlaylist(id: number): Promise<void> {\n    await db.delete(autoImportPlaylists).where(eq(autoImportPlaylists.id, id));\n  }\n\n  // Import Logs operations\n  async createImportLog(log: InsertImportLog): Promise<ImportLog> {\n    const [created] = await db.insert(importLogs).values(log).returning();\n    return created;\n  }\n\n  async updateImportLog(id: number, log: Partial<InsertImportLog>): Promise<ImportLog> {\n    const [updated] = await db\n      .update(importLogs)\n      .set(log)\n      .where(eq(importLogs.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getImportLogs(limit: number = 20): Promise<ImportLog[]> {\n    return db\n      .select()\n      .from(importLogs)\n      .orderBy(desc(importLogs.startedAt))\n      .limit(limit);\n  }\n\n  async getLatestImportLog(): Promise<ImportLog | undefined> {\n    const [latest] = await db\n      .select()\n      .from(importLogs)\n      .orderBy(desc(importLogs.startedAt))\n      .limit(1);\n    return latest;\n  }\n\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":28374},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  serial,\n  unique,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  nickname: varchar(\"nickname\").unique(),\n  isAdmin: boolean(\"is_admin\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const artists = pgTable(\"artists\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  spotifyId: varchar(\"spotify_id\", { length: 255 }),\n  deezerId: varchar(\"deezer_id\", { length: 255 }),\n  itunesId: varchar(\"itunes_id\", { length: 255 }),\n  yandexMusicId: varchar(\"yandex_music_id\", { length: 255 }),\n  yandexMusicUrl: text(\"yandex_music_url\"),\n  imageUrl: text(\"image_url\"),\n  genres: text(\"genres\").array(),\n  popularity: integer(\"popularity\"),\n  followers: integer(\"followers\"),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const releases = pgTable(\"releases\", {\n  id: serial(\"id\").primaryKey(),\n  artistId: integer(\"artist_id\").references(() => artists.id),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  type: varchar(\"type\", { length: 50 }).default(\"album\"), // \"album\", \"single\", or \"compilation\"\n  releaseDate: timestamp(\"release_date\"),\n  coverUrl: text(\"cover_url\"),\n  streamingLinks: jsonb(\"streaming_links\"),\n  spotifyId: varchar(\"spotify_id\", { length: 255 }),\n  deezerId: varchar(\"deezer_id\", { length: 255 }),\n  itunesId: varchar(\"itunes_id\", { length: 255 }),\n  totalTracks: integer(\"total_tracks\"),\n  isTestData: boolean(\"is_test_data\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const ratings = pgTable(\"ratings\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  releaseId: integer(\"release_id\").references(() => releases.id),\n  score: integer(\"score\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const comments = pgTable(\"comments\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  releaseId: integer(\"release_id\").references(() => releases.id),\n  text: text(\"text\"),\n  rating: integer(\"rating\"),\n  isAnonymous: boolean(\"is_anonymous\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const commentReactions = pgTable(\"comment_reactions\", {\n  id: serial(\"id\").primaryKey(),\n  commentId: integer(\"comment_id\").references(() => comments.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  reactionType: varchar(\"reaction_type\", { length: 10 }).notNull(), // 'like' or 'dislike'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const reports = pgTable(\"reports\", {\n  id: serial(\"id\").primaryKey(),\n  commentId: integer(\"comment_id\").references(() => comments.id),\n  reportedBy: varchar(\"reported_by\").references(() => users.id),\n  reason: text(\"reason\"),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\"), // 'pending' or 'resolved'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const collections = pgTable(\"collections\", {\n  id: serial(\"id\").primaryKey(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  subtitle: varchar(\"subtitle\", { length: 255 }),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  sortOrder: integer(\"sort_order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const collectionReleases = pgTable(\"collection_releases\", {\n  id: serial(\"id\").primaryKey(),\n  collectionId: integer(\"collection_id\").references(() => collections.id, { onDelete: \"cascade\" }).notNull(),\n  releaseId: integer(\"release_id\").references(() => releases.id, { onDelete: \"cascade\" }).notNull(),\n  sortOrder: integer(\"sort_order\").default(0),\n  addedAt: timestamp(\"added_at\").defaultNow(),\n}, (table) => ({\n  uniqueCollectionRelease: unique().on(table.collectionId, table.releaseId),\n}));\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  ratings: many(ratings),\n  comments: many(comments),\n  commentReactions: many(commentReactions),\n  reports: many(reports),\n}));\n\nexport const artistsRelations = relations(artists, ({ many }) => ({\n  releases: many(releases),\n}));\n\nexport const releasesRelations = relations(releases, ({ one, many }) => ({\n  artist: one(artists, {\n    fields: [releases.artistId],\n    references: [artists.id],\n  }),\n  ratings: many(ratings),\n  comments: many(comments),\n  collectionReleases: many(collectionReleases),\n}));\n\nexport const ratingsRelations = relations(ratings, ({ one }) => ({\n  user: one(users, {\n    fields: [ratings.userId],\n    references: [users.id],\n  }),\n  release: one(releases, {\n    fields: [ratings.releaseId],\n    references: [releases.id],\n  }),\n}));\n\nexport const commentsRelations = relations(comments, ({ one, many }) => ({\n  user: one(users, {\n    fields: [comments.userId],\n    references: [users.id],\n  }),\n  release: one(releases, {\n    fields: [comments.releaseId],\n    references: [releases.id],\n  }),\n  reactions: many(commentReactions),\n  reports: many(reports),\n}));\n\nexport const commentReactionsRelations = relations(commentReactions, ({ one }) => ({\n  comment: one(comments, {\n    fields: [commentReactions.commentId],\n    references: [comments.id],\n  }),\n  user: one(users, {\n    fields: [commentReactions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const reportsRelations = relations(reports, ({ one }) => ({\n  comment: one(comments, {\n    fields: [reports.commentId],\n    references: [comments.id],\n  }),\n  user: one(users, {\n    fields: [reports.reportedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const collectionsRelations = relations(collections, ({ many }) => ({\n  collectionReleases: many(collectionReleases),\n}));\n\nexport const collectionReleasesRelations = relations(collectionReleases, ({ one }) => ({\n  collection: one(collections, {\n    fields: [collectionReleases.collectionId],\n    references: [collections.id],\n  }),\n  release: one(releases, {\n    fields: [collectionReleases.releaseId],\n    references: [releases.id],\n  }),\n}));\n\n// Schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertArtistSchema = createInsertSchema(artists).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReleaseSchema = createInsertSchema(releases).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRatingSchema = createInsertSchema(ratings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCommentReactionSchema = createInsertSchema(commentReactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReportSchema = createInsertSchema(reports).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCollectionSchema = createInsertSchema(collections).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCollectionReleaseSchema = createInsertSchema(collectionReleases).omit({\n  id: true,\n  addedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Artist = typeof artists.$inferSelect;\nexport type Release = typeof releases.$inferSelect;\nexport type Rating = typeof ratings.$inferSelect;\nexport type Comment = typeof comments.$inferSelect;\nexport type CommentReaction = typeof commentReactions.$inferSelect;\nexport type Report = typeof reports.$inferSelect;\nexport type Collection = typeof collections.$inferSelect;\nexport type CollectionRelease = typeof collectionReleases.$inferSelect;\n\nexport type InsertArtist = z.infer<typeof insertArtistSchema>;\nexport type InsertRelease = z.infer<typeof insertReleaseSchema>;\nexport type InsertRating = z.infer<typeof insertRatingSchema>;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\nexport type InsertCommentReaction = z.infer<typeof insertCommentReactionSchema>;\nexport type InsertReport = z.infer<typeof insertReportSchema>;\nexport type InsertCollection = z.infer<typeof insertCollectionSchema>;\nexport type InsertCollectionRelease = z.infer<typeof insertCollectionReleaseSchema>;\n\n// Import Jobs schema for background processing\nexport const importJobs = pgTable('import_jobs', {\n  id: serial('id').primaryKey(),\n  playlistUrl: text('playlist_url').notNull(),\n  status: varchar('status', { length: 20 }).notNull().default('pending'), // 'pending', 'processing', 'completed', 'failed'\n  progress: integer('progress').default(0), // percentage 0-100\n  totalArtists: integer('total_artists').default(0),\n  processedArtists: integer('processed_artists').default(0),\n  newReleases: integer('new_releases').default(0),\n  skippedReleases: integer('skipped_releases').default(0),\n  errors: integer('errors').default(0),\n  errorMessage: text('error_message'),\n  startedAt: timestamp('started_at'),\n  completedAt: timestamp('completed_at'),\n  createdBy: varchar('created_by').references(() => users.id).notNull(),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n\n// Автопарсинг плейлистов - список URL для ежедневного импорта\nexport const autoImportPlaylists = pgTable('auto_import_playlists', {\n  id: serial('id').primaryKey(),\n  url: text('url').notNull().unique(),\n  name: varchar('name', { length: 255 }).notNull(),\n  description: text('description'),\n  enabled: boolean('enabled').default(true),\n  service: varchar('service', { length: 50 }).default('mts'), // 'mts', 'yandex', etc.\n  lastImportAt: timestamp('last_import_at'),\n  sortOrder: integer('sort_order').default(0),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\nexport const insertImportJobSchema = createInsertSchema(importJobs).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport type ImportJob = typeof importJobs.$inferSelect;\nexport type InsertImportJob = z.infer<typeof insertImportJobSchema>;\n\n// Auto Import Playlists schema\nexport const insertAutoImportPlaylistSchema = createInsertSchema(autoImportPlaylists)\n  .omit({ \n    id: true, \n    createdAt: true,\n    updatedAt: true\n  })\n  .extend({\n    url: z.string().min(1, \"URL обязателен\").url(\"Введите корректный URL\"),\n    name: z.string().min(1, \"Название обязательно\").max(255, \"Название слишком длинное\"),\n    sortOrder: z.number().int().min(0, \"Порядок сортировки должен быть неотрицательным\").optional(),\n    enabled: z.boolean().optional(),\n    service: z.string().optional(),\n    description: z.string().optional(),\n    lastImportAt: z.date().nullable().optional()\n  });\nexport type InsertAutoImportPlaylist = z.infer<typeof insertAutoImportPlaylistSchema>;\nexport type SelectAutoImportPlaylist = typeof autoImportPlaylists.$inferSelect;\n\n// Import logs для отслеживания результатов автоматического импорта\nexport const importLogs = pgTable('import_logs', {\n  id: serial('id').primaryKey(),\n  startedAt: timestamp('started_at').notNull().defaultNow(),\n  completedAt: timestamp('completed_at'),\n  status: varchar('status', { length: 20 }).notNull().default('running'), // 'running', 'completed', 'failed'\n  totalPlaylists: integer('total_playlists').default(0),\n  processedPlaylists: integer('processed_playlists').default(0),\n  totalArtists: integer('total_artists').default(0),\n  newReleases: integer('new_releases').default(0),\n  skippedReleases: integer('skipped_releases').default(0),\n  errors: integer('errors').default(0),\n  playlistResults: jsonb('playlist_results'), // детали по каждому плейлисту\n  errorMessage: text('error_message'),\n  type: varchar('type', { length: 20 }).default('scheduled'), // 'scheduled', 'manual'\n});\n\nexport const insertImportLogSchema = createInsertSchema(importLogs).omit({ \n  id: true\n});\n\nexport type ImportLog = typeof importLogs.$inferSelect;\nexport type InsertImportLog = z.infer<typeof insertImportLogSchema>;\n\n// Discography cache для ускорения импортов\nexport const discographyCache = pgTable('discography_cache', {\n  id: serial('id').primaryKey(),\n  artistId: integer('artist_id').references(() => artists.id, { onDelete: 'cascade' }).notNull(),\n  source: varchar('source', { length: 20 }).notNull(), // 'deezer', 'itunes'\n  albumIds: text('album_ids').array().notNull(), // массив ID альбомов\n  lastUpdated: timestamp('last_updated').notNull().defaultNow(),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n\nexport const insertDiscographyCacheSchema = createInsertSchema(discographyCache).omit({ \n  id: true,\n  createdAt: true\n});\n\nexport type DiscographyCache = typeof discographyCache.$inferSelect;\nexport type InsertDiscographyCache = z.infer<typeof insertDiscographyCacheSchema>;\n","size_bytes":13957},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Release from \"@/pages/release\";\nimport Artist from \"@/pages/artist\";\nimport Profile from \"@/pages/profile\";\nimport Admin from \"@/pages/admin\";\nimport Search from \"@/pages/search\";\n\nfunction Router() {\n\n  return (\n    <Switch>\n      {/* Public routes - accessible to everyone */}\n      <Route path=\"/release/:id\" component={Release} />\n      <Route path=\"/artist/:id\" component={Artist} />\n      <Route path=\"/search\" component={Search} />\n      \n        <Route path=\"/\" component={Home} />\n        <Route path=\"/profile/:id?\" component={Profile} />\n        <Route path=\"/admin\" component={Admin} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background dark\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1295},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(0 0% 13%);\n  --card: hsl(0 0% 98%);\n  --card-foreground: hsl(0 0% 13%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(0 0% 13%);\n  --primary: hsl(225 100% 56%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(0 0% 40%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 96%);\n  --muted-foreground: hsl(0 0% 45%);\n  --accent: hsl(225 100% 56%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(0 0% 90%);\n  --input: hsl(0 0% 96%);\n  --ring: hsl(207 100% 50%);\n  --sidebar: hsl(0 0% 98%);\n  --sidebar-foreground: hsl(0 0% 13%);\n  --sidebar-primary: hsl(207 100% 50%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(0 0% 96%);\n  --sidebar-accent-foreground: hsl(207 100% 50%);\n  --sidebar-border: hsl(0 0% 90%);\n  --sidebar-ring: hsl(207 100% 50%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(280 100% 70% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(280 100% 70% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(280 100% 70% / 0.00), 0px 1px 2px -1px hsl(280 100% 70% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(280 100% 70% / 0.00), 0px 1px 2px -1px hsl(280 100% 70% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(280 100% 70% / 0.00), 0px 2px 4px -1px hsl(280 100% 70% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(280 100% 70% / 0.00), 0px 4px 6px -1px hsl(280 100% 70% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(280 100% 70% / 0.00), 0px 8px 10px -1px hsl(280 100% 70% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(280 100% 70% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 9%);\n  --foreground: hsl(0 0% 95%);\n  --card: hsl(0 0% 12%);\n  --card-foreground: hsl(0 0% 95%);\n  --popover: hsl(0 0% 12%);\n  --popover-foreground: hsl(0 0% 95%);\n  --primary: hsl(225 100% 56%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(0 0% 25%);\n  --secondary-foreground: hsl(0 0% 95%);\n  --muted: hsl(0 0% 15%);\n  --muted-foreground: hsl(0 0% 60%);\n  --accent: hsl(225 100% 56%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(0 0% 95%);\n  --border: hsl(0 0% 20%);\n  --input: hsl(0 0% 15%);\n  --ring: hsl(207 100% 50%);\n  --sidebar: hsl(0 0% 12%);\n  --sidebar-foreground: hsl(0 0% 95%);\n  --sidebar-primary: hsl(207 100% 50%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(0 0% 15%);\n  --sidebar-accent-foreground: hsl(207 100% 50%);\n  --sidebar-border: hsl(0 0% 20%);\n  --sidebar-ring: hsl(207 100% 50%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(280 100% 70% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(280 100% 70% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(280 100% 70% / 0.00), 0px 1px 2px -1px hsl(280 100% 70% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(280 100% 70% / 0.00), 0px 1px 2px -1px hsl(280 100% 70% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(280 100% 70% / 0.00), 0px 2px 4px -1px hsl(280 100% 70% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(280 100% 70% / 0.00), 0px 4px 6px -1px hsl(280 100% 70% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(280 100% 70% / 0.00), 0px 8px 10px -1px hsl(280 100% 70% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(280 100% 70% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.rating-stars {\n  display: inline-flex;\n  gap: 2px;\n}\n\n.rating-star {\n  color: hsl(215 20.2% 65.1%);\n  cursor: pointer;\n  transition: color 0.2s ease;\n}\n\n.rating-star:hover,\n.rating-star.active {\n  color: hsl(45 93% 47%);\n}\n\n.album-cover {\n  aspect-ratio: 1;\n  object-fit: cover;\n}\n\n.gradient-overlay {\n  background: linear-gradient(135deg, hsl(280 100% 70%) 0%, hsl(320 100% 70%) 100%);\n}\n\n.comment-thread {\n  border-left: 2px solid hsl(217 32% 17%);\n}\n\n.section-divider {\n  background: linear-gradient(90deg, transparent 0%, hsl(0 0% 90%) 50%, transparent 100%);\n  height: 1px;\n}\n\n/* Modern flowing animations and abstract elements */\n@keyframes float-complex {\n  0%, 100% { \n    transform: translateY(0px) rotate(0deg) scale(1); \n  }\n  25% { \n    transform: translateY(-15px) rotate(2deg) scale(1.05); \n  }\n  50% { \n    transform: translateY(-20px) rotate(0deg) scale(1); \n  }\n  75% { \n    transform: translateY(-10px) rotate(-2deg) scale(0.95); \n  }\n}\n\n@keyframes flow-wave {\n  0%, 100% { \n    transform: translateY(0px) rotate(0deg);\n    border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;\n  }\n  25% { \n    transform: translateY(-10px) rotate(1deg);\n    border-radius: 40% 60% 70% 30% / 80% 50% 30% 60%;\n  }\n  50% { \n    transform: translateY(-20px) rotate(0deg);\n    border-radius: 70% 30% 40% 60% / 40% 70% 60% 30%;\n  }\n  75% { \n    transform: translateY(-5px) rotate(-1deg);\n    border-radius: 30% 70% 60% 40% / 60% 40% 80% 50%;\n  }\n}\n\n@keyframes morphing-blob {\n  0%, 100% {\n    border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;\n    transform: translate(-50%, -50%) scale(1) rotate(0deg);\n  }\n  25% {\n    border-radius: 30% 70% 40% 60% / 80% 20% 60% 40%;\n    transform: translate(-50%, -50%) scale(1.1) rotate(90deg);\n  }\n  50% {\n    border-radius: 80% 20% 60% 40% / 40% 80% 20% 60%;\n    transform: translate(-50%, -50%) scale(0.9) rotate(180deg);\n  }\n  75% {\n    border-radius: 40% 60% 80% 20% / 60% 40% 80% 20%;\n    transform: translate(-50%, -50%) scale(1.05) rotate(270deg);\n  }\n}\n\n@keyframes particle-drift {\n  0% {\n    transform: translateY(100vh) scale(0);\n    opacity: 0;\n  }\n  10% {\n    opacity: 1;\n    transform: translateY(90vh) scale(1);\n  }\n  90% {\n    opacity: 1;\n    transform: translateY(10vh) scale(1);\n  }\n  100% {\n    transform: translateY(0vh) scale(0);\n    opacity: 0;\n  }\n}\n\n@keyframes neon-pulse {\n  0%, 100% { \n    box-shadow: 0 0 20px hsl(225 100% 56% / 0.3), 0 0 40px hsl(225 100% 56% / 0.1); \n  }\n  50% { \n    box-shadow: 0 0 30px hsl(225 100% 56% / 0.5), 0 0 60px hsl(225 100% 56% / 0.2); \n  }\n}\n\n@keyframes text-glow {\n  0%, 100% { \n    text-shadow: 0 0 10px rgba(255, 255, 255, 0.1); \n  }\n  50% { \n    text-shadow: 0 0 20px rgba(255, 255, 255, 0.3), 0 0 30px rgba(255, 255, 255, 0.1); \n  }\n}\n\n.hero-animation {\n  animation: float-complex 12s ease-in-out infinite;\n}\n\n.float-animation {\n  animation: float-complex 8s ease-in-out infinite;\n}\n\n.morphing-shape {\n  animation: morphing-blob 20s ease-in-out infinite;\n}\n\n.wave-animation {\n  animation: flow-wave 15s ease-in-out infinite;\n}\n\n.neon-glow {\n  animation: neon-pulse 3s ease-in-out infinite;\n}\n\n.text-glow {\n  animation: text-glow 4s ease-in-out infinite;\n}\n\n.particle {\n  animation: particle-drift 12s linear infinite;\n}\n\n/* Abstract background elements - Light theme with blue/black/gray */\n.abstract-bg {\n  position: relative;\n  overflow: hidden;\n  background: linear-gradient(180deg, hsl(0 0% 100%) 0%, hsl(0 0% 99%) 50%, hsl(0 0% 97%) 100%);\n}\n\n.dark .abstract-bg {\n  background: linear-gradient(180deg, hsl(0 0% 9%) 0%, hsl(0 0% 12%) 100%);\n}\n\n.flowing-orb {\n  position: absolute;\n  border-radius: 50%;\n  filter: blur(50px);\n}\n\n.flowing-orb.blue {\n  background: radial-gradient(circle, hsl(225 100% 56% / 0.15) 0%, hsl(225 100% 56% / 0.05) 50%, transparent 100%);\n}\n\n.flowing-orb.gray {\n  background: radial-gradient(circle, hsl(0 0% 20% / 0.1) 0%, hsl(0 0% 40% / 0.03) 50%, transparent 100%);\n}\n\n.flowing-orb.dark {\n  background: radial-gradient(circle, hsl(0 0% 0% / 0.08) 0%, hsl(0 0% 10% / 0.02) 50%, transparent 100%);\n}\n\n.floating-particle {\n  position: absolute;\n  width: 3px;\n  height: 3px;\n  border-radius: 50%;\n  filter: blur(1px);\n}\n\n.floating-particle.blue {\n  background: hsl(225 100% 56% / 0.4);\n}\n\n.floating-particle.gray {\n  background: hsl(0 0% 30% / 0.3);\n}\n\n.floating-particle.dark {\n  background: hsl(0 0% 10% / 0.4);\n}\n\n/* Smooth hover transitions */\n.smooth-hover {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.smooth-hover:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n/* Carousel styles */\n.carousel-container {\n  overflow: hidden;\n  position: relative;\n}\n\n.carousel-track {\n  display: flex;\n  transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n  will-change: transform;\n}\n\n.carousel-item {\n  flex: 0 0 auto;\n  margin-right: 1.5rem;\n}\n\n/* Custom scrollbar */\n.custom-scrollbar::-webkit-scrollbar {\n  height: 6px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: hsl(0 0% 96%);\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: hsl(207 100% 50%);\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: hsl(207 100% 45%);\n}\n\n.dark .custom-scrollbar::-webkit-scrollbar-track {\n  background: hsl(0 0% 15%);\n}\n\n.dark .custom-scrollbar::-webkit-scrollbar-thumb {\n  background: hsl(207 100% 50%);\n}\n\n/* Glassmorphism effect */\n.glass-effect {\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  background: rgba(255, 255, 255, 0.9);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.dark .glass-effect {\n  background: rgba(23, 23, 23, 0.9);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n","size_bytes":9456},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CommentItem.tsx":{"content":"import { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { ThumbsUp, ThumbsDown, Flag, Edit, Trash2 } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\n\ninterface CommentItemProps {\n  comment: {\n    id: number;\n    text?: string;\n    rating?: number;\n    isAnonymous: boolean;\n    createdAt: string;\n    user: {\n      id: string;\n      nickname: string;\n      profileImageUrl?: string;\n    } | null;\n    likeCount: number;\n    dislikeCount: number;\n    userReaction?: 'like' | 'dislike';\n  };\n  currentUserId?: string;\n  onLike?: (commentId: number) => void;\n  onDislike?: (commentId: number) => void;\n  onReport?: (commentId: number) => void;\n  onEdit?: (commentId: number) => void;\n  onDelete?: (commentId: number) => void;\n  className?: string;\n}\n\nexport function CommentItem({\n  comment,\n  currentUserId,\n  onLike,\n  onDislike,\n  onReport,\n  onEdit,\n  onDelete,\n  className,\n}: CommentItemProps) {\n  const isOwner = currentUserId && comment.user?.id === currentUserId;\n  const displayName = comment.isAnonymous ? \"Anonymous\" : comment.user?.nickname || \"Unknown\";\n  const userInitials = comment.isAnonymous ? \"A\" : (comment.user?.nickname?.substring(0, 2).toUpperCase() || \"U\");\n\n  return (\n    <div className={cn(\"bg-secondary rounded-lg p-4\", className)} data-testid={`comment-${comment.id}`}>\n      <div className=\"flex items-start space-x-4\">\n        <Avatar className=\"w-10 h-10 flex-shrink-0\">\n          {!comment.isAnonymous && comment.user?.profileImageUrl ? (\n            <AvatarImage src={comment.user.profileImageUrl} alt={displayName} />\n          ) : null}\n          <AvatarFallback className={comment.isAnonymous ? \"bg-muted\" : \"bg-primary\"}>\n            {userInitials}\n          </AvatarFallback>\n        </Avatar>\n        \n        <div className=\"flex-1\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <span className=\"font-medium text-foreground text-sm\" data-testid=\"comment-author\">\n              {displayName}\n            </span>\n            {comment.rating && (\n              <span className=\"text-sm font-medium text-primary\" data-testid=\"comment-rating\">\n                {comment.rating}/10\n              </span>\n            )}\n            <span className=\"text-xs text-muted-foreground\" data-testid=\"comment-date\">\n              {formatDistanceToNow(new Date(comment.createdAt), { addSuffix: true })}\n            </span>\n          </div>\n          \n          {comment.text && (\n            <p className=\"text-foreground text-sm leading-relaxed mb-3\" data-testid=\"comment-text\">\n              {comment.text}\n            </p>\n          )}\n          \n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"flex items-center space-x-1 text-xs h-auto p-1\",\n                comment.userReaction === 'like' && \"text-primary\"\n              )}\n              onClick={() => onLike?.(comment.id)}\n              data-testid=\"button-like\"\n            >\n              <ThumbsUp className=\"w-3 h-3\" />\n              <span data-testid=\"like-count\">{comment.likeCount}</span>\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"flex items-center space-x-1 text-xs h-auto p-1\",\n                comment.userReaction === 'dislike' && \"text-destructive\"\n              )}\n              onClick={() => onDislike?.(comment.id)}\n              data-testid=\"button-dislike\"\n            >\n              <ThumbsDown className=\"w-3 h-3\" />\n              <span data-testid=\"dislike-count\">{comment.dislikeCount}</span>\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-xs text-muted-foreground hover:text-foreground h-auto p-1\"\n              onClick={() => onReport?.(comment.id)}\n              data-testid=\"button-report\"\n            >\n              <Flag className=\"w-3 h-3 mr-1\" />\n              Report\n            </Button>\n            \n            {isOwner && (\n              <div className=\"ml-auto flex items-center space-x-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-xs text-primary hover:text-primary/80 h-auto p-1\"\n                  onClick={() => onEdit?.(comment.id)}\n                  data-testid=\"button-edit\"\n                >\n                  <Edit className=\"w-3 h-3 mr-1\" />\n                  Edit\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-xs text-destructive hover:text-destructive/80 h-auto p-1\"\n                  onClick={() => onDelete?.(comment.id)}\n                  data-testid=\"button-delete\"\n                >\n                  <Trash2 className=\"w-3 h-3 mr-1\" />\n                  Delete\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5193},"client/src/components/ReleaseCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { MessageCircle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ReleaseCardProps {\n  release: {\n    id: number;\n    title: string;\n    coverUrl?: string;\n    artist: {\n      name: string;\n    };\n    averageRating: number;\n    commentCount: number;\n  };\n  onClick?: () => void;\n  className?: string;\n}\n\nexport function ReleaseCard({ release, onClick, className }: ReleaseCardProps) {\n  return (\n    <Card \n      className={cn(\n        \"group cursor-pointer transition-all duration-300 hover:border-primary/50 hover:shadow-lg hover:shadow-primary/10\",\n        className\n      )}\n      onClick={onClick}\n      data-testid={`release-card-${release.id}`}\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"aspect-square mb-3 overflow-hidden rounded-md\">\n          {release.coverUrl ? (\n            <img \n              src={release.coverUrl} \n              alt={`${release.title} cover`}\n              className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n              data-testid=\"release-cover\"\n            />\n          ) : (\n            <div className=\"w-full h-full bg-muted flex items-center justify-center rounded-md\">\n              <span className=\"text-muted-foreground text-sm\">No Cover</span>\n            </div>\n          )}\n        </div>\n        \n        <h3 className=\"font-semibold text-foreground text-sm mb-1 truncate\" data-testid=\"release-title\">\n          {release.title}\n        </h3>\n        <p className=\"text-muted-foreground text-xs mb-2 truncate\" data-testid=\"artist-name\">\n          {release.artist.name}\n        </p>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm font-medium text-primary\" data-testid=\"release-rating\">\n            {release.averageRating && Number(release.averageRating) > 0 \n              ? Number(release.averageRating).toFixed(1) \n              : '—'\n            }\n          </div>\n          <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n            <MessageCircle className=\"w-3 h-3\" />\n            <span data-testid=\"comment-count\">{release.commentCount}</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2302},"client/src/components/SearchBar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface SearchBarProps {\n  onSearch?: (query: string) => void;\n  onResults?: (results: any[]) => void;\n  placeholder?: string;\n  className?: string;\n}\n\nexport function SearchBar({ \n  onSearch, \n  onResults, \n  placeholder = \"Найти альбомы, артистов, песни...\",\n  className \n}: SearchBarProps) {\n  const [query, setQuery] = useState(\"\");\n  const [debouncedQuery, setDebouncedQuery] = useState(\"\");\n\n  // Debounce the query\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedQuery(query);\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [query]);\n\n  // Search API call\n  const { data: searchResults } = useQuery({\n    queryKey: [\"/api/search\", { q: debouncedQuery }],\n    enabled: debouncedQuery.length > 2,\n    queryFn: async ({ queryKey }) => {\n      const [, params] = queryKey as [string, { q: string }];\n      const response = await fetch(`/api/search?q=${encodeURIComponent(params.q)}`);\n      if (!response.ok) throw new Error('Поиск не удался');\n      return response.json();\n    },\n  });\n\n  useEffect(() => {\n    if (searchResults && onResults) {\n      onResults(searchResults);\n    }\n  }, [searchResults, onResults]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (onSearch && query.trim()) {\n      onSearch(query.trim());\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={cn(\"relative\", className)}>\n      <div className=\"relative\">\n        <Input\n          type=\"text\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          placeholder={placeholder}\n          className=\"pl-10 bg-input border-border focus:ring-2 focus:ring-ring\"\n          data-testid=\"input-search\"\n        />\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n      </div>\n    </form>\n  );\n}\n","size_bytes":2106},"client/src/components/StarRating.tsx":{"content":"import { Star } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StarRatingProps {\n  rating: number | null | undefined;\n  maxRating?: number;\n  size?: \"sm\" | \"md\" | \"lg\";\n  interactive?: boolean;\n  onRatingChange?: (rating: number) => void;\n  className?: string;\n}\n\nexport function StarRating({\n  rating,\n  maxRating = 10,\n  size = \"md\",\n  interactive = false,\n  onRatingChange,\n  className,\n}: StarRatingProps) {\n  const sizeClasses = {\n    sm: \"w-3 h-3\",\n    md: \"w-4 h-4\",\n    lg: \"w-5 h-5\",\n  };\n\n  const handleStarClick = (starRating: number) => {\n    if (interactive && onRatingChange) {\n      onRatingChange(starRating);\n    }\n  };\n\n  return (\n    <div className={cn(\"flex items-center gap-1\", className)} data-testid=\"star-rating\">\n      {Array.from({ length: maxRating }, (_, index) => {\n        const starNumber = index + 1;\n        const filled = starNumber <= Number(rating || 0);\n        \n        return (\n          <Star\n            key={index}\n            className={cn(\n              sizeClasses[size],\n              filled ? \"fill-yellow-400 text-yellow-400\" : \"text-muted-foreground\",\n              interactive && \"cursor-pointer hover:text-yellow-400 transition-colors\"\n            )}\n            onClick={() => handleStarClick(starNumber)}\n            data-testid={`star-${starNumber}`}\n          />\n        );\n      })}\n      {maxRating <= 5 && (\n        <span className=\"text-sm text-muted-foreground ml-1\" data-testid=\"rating-text\">\n          {Number(rating || 0).toFixed(1)}\n        </span>\n      )}\n    </div>\n  );\n}\n","size_bytes":1559},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    queryFn: () => fetch(\"/api/auth/user\", { credentials: \"include\" })\n      .then(res => res.ok ? res.json() : null)\n      .catch(() => null),\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":451},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"import type { \n  User, \n  Artist, \n  Release, \n  Rating, \n  Comment, \n  CommentReaction,\n  Report \n} from \"@shared/schema\";\n\nexport interface ReleaseWithDetails extends Release {\n  artist: Artist;\n  averageRating: number;\n  commentCount: number;\n}\n\nexport interface CommentWithDetails extends Comment {\n  user: User | null;\n  likesCount: number;\n  dislikesCount: number;\n  userReaction?: string | null;\n}\n\nexport interface UserProfile extends User {\n  comments: (Comment & { release: Release & { artist: Artist } })[];\n  ratings: (Rating & { release: Release & { artist: Artist } })[];\n}\n\nexport interface ReportWithDetails extends Report {\n  comment: Comment;\n  user: User;\n}\n","size_bytes":677},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertTriangle, Trash2, X, Shield, Upload, Download, Database, Calendar, User, List, Search, Eye, FolderOpen, Plus, Album } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Switch } from \"@/components/ui/switch\";\n\nexport default function Admin() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState<'releases' | 'reports' | 'users' | 'import' | 'browse' | 'collections' | 'music-import' | 'playlists' | 'import-logs'>('releases');\n  const [releaseForm, setReleaseForm] = useState({\n    title: '',\n    artistName: '',\n    releaseDate: '',\n    coverUrl: '',\n    spotifyUrl: '',\n    appleMusicUrl: ''\n  });\n  const [showTestData, setShowTestData] = useState(() => {\n    const saved = localStorage.getItem('showTestData');\n    return saved === 'true';\n  });\n  const [releaseSearch, setReleaseSearch] = useState('');\n\n  useEffect(() => {\n    if (!authLoading && (!user || !user.isAdmin)) {\n      toast({\n        title: \"Не авторизован\",\n        description: \"У вас нет прав доступа к админ-панели.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 2000);\n    }\n  }, [authLoading, user, toast]);\n\n  // Save test data preference to localStorage\n  useEffect(() => {\n    localStorage.setItem('showTestData', showTestData.toString());\n    // Invalidate releases queries to refetch with new setting\n    queryClient.invalidateQueries({ queryKey: [\"/api/releases\"] });\n  }, [showTestData, queryClient]);\n\n  const { data: reports = [] } = useQuery({\n    queryKey: [\"/api/admin/reports\", { status: 'pending' }],\n    enabled: !!user?.isAdmin && activeTab === 'reports',\n    queryFn: async ({ queryKey }) => {\n      const [, params] = queryKey as [string, { status: string }];\n      const response = await fetch(`/api/admin/reports?status=${params.status}`);\n      if (!response.ok) throw new Error('Failed to fetch reports');\n      return response.json();\n    },\n  });\n\n  const addReleaseMutation = useMutation({\n    mutationFn: async (data: typeof releaseForm) => {\n      // First create or find artist\n      const artistResponse = await apiRequest('POST', '/api/artists', { name: data.artistName });\n      const artist = await artistResponse.json();\n      \n      // Then create release\n      const releaseData = {\n        artistId: artist.id,\n        title: data.title,\n        releaseDate: new Date(data.releaseDate).toISOString(),\n        coverUrl: data.coverUrl || null,\n        streamingLinks: {\n          spotify: data.spotifyUrl || null,\n          appleMusic: data.appleMusicUrl || null\n        }\n      };\n      \n      const response = await apiRequest('POST', '/api/releases', releaseData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Релиз добавлен!\" });\n      setReleaseForm({\n        title: '',\n        artistName: '',\n        releaseDate: '',\n        coverUrl: '',\n        spotifyUrl: '',\n        appleMusicUrl: ''\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/releases\"] });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Не авторизован\",\n          description: \"Вы вышли из системы. Заходим заново...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Ошибка\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddRelease = () => {\n    if (!releaseForm.title || !releaseForm.artistName || !releaseForm.releaseDate) {\n      toast({ \n        title: \"Missing required fields\", \n        description: \"Please fill in title, artist, and release date.\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n    addReleaseMutation.mutate(releaseForm);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <Shield className=\"w-6 h-6 text-primary\" />\n            <h1 className=\"text-3xl font-bold text-foreground\">Админ-панель</h1>\n          </div>\n          <p className=\"text-muted-foreground\">Manage releases, reports, and users</p>\n        </div>\n\n        {/* Admin Navigation */}\n        <div className=\"flex flex-wrap gap-4 mb-8\">\n          <Button\n            variant={activeTab === 'releases' ? 'default' : 'secondary'}\n            onClick={() => setActiveTab('releases')}\n            data-testid=\"tab-releases\"\n          >\n            Добавить релизы\n          </Button>\n          <Button\n            variant={activeTab === 'browse' ? 'default' : 'secondary'}\n            onClick={() => setActiveTab('browse')}\n            data-testid=\"tab-browse\"\n          >\n            <List className=\"w-4 h-4 mr-2\" />\n            Все релизы\n          </Button>\n          <Button\n            variant={activeTab === 'reports' ? 'default' : 'secondary'}\n            onClick={() => setActiveTab('reports')}\n            data-testid=\"tab-reports\"\n          >\n            Жалобы на комменты\n            {reports.length > 0 && (\n              <span className=\"ml-2 bg-destructive text-destructive-foreground rounded-full px-2 py-0.5 text-xs\">\n                {reports.length}\n              </span>\n            )}\n          </Button>\n          <Button\n            variant={activeTab === 'users' ? 'default' : 'secondary'}\n            onClick={() => setActiveTab('users')}\n            data-testid=\"tab-users\"\n          >\n            User Management\n          </Button>\n          <Button\n            variant={activeTab === 'import' ? 'default' : 'secondary'}\n            onClick={() => setActiveTab('import')}\n            data-testid=\"tab-import\"\n          >\n            Импорт релизов\n          </Button>\n          <Button\n            variant={activeTab === 'collections' ? 'default' : 'secondary'}\n            onClick={() => setActiveTab('collections')}\n            data-testid=\"tab-collections\"\n          >\n            <FolderOpen className=\"w-4 h-4 mr-2\" />\n            Подборки\n          </Button>\n          <Button\n            variant={activeTab === 'music-import' ? 'default' : 'secondary'}\n            onClick={() => setActiveTab('music-import')}\n            data-testid=\"tab-music-import\"\n          >\n            <Download className=\"w-4 h-4 mr-2\" />\n            Импорт музыки\n          </Button>\n          <Button\n            variant={activeTab === 'playlists' ? 'default' : 'secondary'}\n            onClick={() => setActiveTab('playlists')}\n            data-testid=\"tab-playlists\"\n          >\n            <List className=\"w-4 h-4 mr-2\" />\n            Плейлисты\n          </Button>\n          <Button\n            variant={activeTab === 'import-logs' ? 'default' : 'secondary'}\n            onClick={() => setActiveTab('import-logs')}\n            data-testid=\"tab-import-logs\"\n          >\n            <Calendar className=\"w-4 h-4 mr-2\" />\n            Логи импорта\n          </Button>\n        </div>\n\n        {/* Manage Releases Tab */}\n        {activeTab === 'releases' && (\n          <Card>\n            <CardContent className=\"p-6\">\n              {/* Test Data Toggle */}\n              <div className=\"flex items-center justify-between mb-6 pb-4 border-b\">\n                <div>\n                  <h3 className=\"text-lg font-semibold text-foreground\">Настройки отображения</h3>\n                  <p className=\"text-sm text-muted-foreground\">Управление видимостью тестовых данных</p>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Label htmlFor=\"show-test-data\" className=\"text-sm font-medium\">\n                    Показывать тестовые релизы\n                  </Label>\n                  <Switch\n                    id=\"show-test-data\"\n                    checked={showTestData}\n                    onCheckedChange={setShowTestData}\n                    data-testid=\"switch-show-test-data\"\n                  />\n                </div>\n              </div>\n\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  handleAddRelease();\n                }}\n                className=\"grid grid-cols-1 md:grid-cols-2 gap-4\"\n                data-testid=\"form-add-release\"\n              >\n                <div>\n                  <Label htmlFor=\"title\">Название релиза *</Label>\n                  <Input\n                    id=\"title\"\n                    placeholder=\"Album Title\"\n                    value={releaseForm.title}\n                    onChange={(e) => setReleaseForm(prev => ({ ...prev, title: e.target.value }))}\n                    data-testid=\"input-release-title\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"artistName\">Исполнитель *</Label>\n                  <Input\n                    id=\"artistName\"\n                    placeholder=\"Artist Name\"\n                    value={releaseForm.artistName}\n                    onChange={(e) => setReleaseForm(prev => ({ ...prev, artistName: e.target.value }))}\n                    data-testid=\"input-artist-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"releaseDate\">Дата релиза *</Label>\n                  <Input\n                    id=\"releaseDate\"\n                    type=\"date\"\n                    value={releaseForm.releaseDate}\n                    onChange={(e) => setReleaseForm(prev => ({ ...prev, releaseDate: e.target.value }))}\n                    data-testid=\"input-release-date\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"coverUrl\">Ссылка на обложку</Label>\n                  <Input\n                    id=\"coverUrl\"\n                    placeholder=\"https://example.com/cover.jpg\"\n                    value={releaseForm.coverUrl}\n                    onChange={(e) => setReleaseForm(prev => ({ ...prev, coverUrl: e.target.value }))}\n                    data-testid=\"input-cover-url\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"spotifyUrl\">Spotify URL</Label>\n                  <Input\n                    id=\"spotifyUrl\"\n                    placeholder=\"https://open.spotify.com/album/...\"\n                    value={releaseForm.spotifyUrl}\n                    onChange={(e) => setReleaseForm(prev => ({ ...prev, spotifyUrl: e.target.value }))}\n                    data-testid=\"input-spotify-url\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"appleMusicUrl\">Apple Music URL</Label>\n                  <Input\n                    id=\"appleMusicUrl\"\n                    placeholder=\"https://music.apple.com/album/...\"\n                    value={releaseForm.appleMusicUrl}\n                    onChange={(e) => setReleaseForm(prev => ({ ...prev, appleMusicUrl: e.target.value }))}\n                    data-testid=\"input-apple-music-url\"\n                  />\n                </div>\n                <div className=\"md:col-span-2\">\n                  <Button\n                    type=\"submit\"\n                    disabled={addReleaseMutation.isPending}\n                    data-testid=\"button-add-release\"\n                  >\n                    {addReleaseMutation.isPending ? \"Добавляем...\" : \"Добавить релиз\"}\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Reports Tab */}\n        {activeTab === 'reports' && (\n          <ReportsTab reports={reports} />\n        )}\n\n        {/* Users Tab */}\n        {activeTab === 'users' && (\n          <UserManagementTab />\n        )}\n\n        {/* Import Tab */}\n        {activeTab === 'import' && (\n          <MusicImportTab />\n        )}\n\n        {/* Browse Releases Tab */}\n        {activeTab === 'browse' && (\n          <ReleaseBrowserTab \n            searchQuery={releaseSearch} \n            onSearchChange={setReleaseSearch} \n            showTestData={showTestData}\n          />\n        )}\n\n        {/* Collections Tab */}\n        {activeTab === 'collections' && (\n          <CollectionsTab />\n        )}\n\n        {/* Music Import Tab */}\n        {activeTab === 'music-import' && (\n          <YandexMusicImportTab />\n        )}\n\n        {/* Playlists Tab */}\n        {activeTab === 'playlists' && (\n          <PlaylistsTab />\n        )}\n\n        {/* Import Logs Tab */}\n        {activeTab === 'import-logs' && (\n          <ImportLogsTab />\n        )}\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n\n// Компонент для импорта из российских музыкальных сервисов\nfunction YandexMusicImportTab() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [playlistUrl, setPlaylistUrl] = useState('');\n\n  // Fetch import stats\n  const { data: importStats } = useQuery({\n    queryKey: [\"/api/import/stats\"],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/import/stats');\n      return response.json();\n    },\n  });\n\n  const testPlaylistImport = useMutation({\n    mutationFn: async (url: string) => {\n      const response = await apiRequest('POST', '/api/import/test-playlist', { playlistUrl: url });\n      return response.json();\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Импорт завершен!\",\n        description: `✅ Добавлено: ${result.stats.newReleases} релизов | ⏭️ Пропущено: ${result.stats.skippedReleases} | ❌ Ошибок: ${result.stats.errors.length}`,\n      });\n      \n      setPlaylistUrl('');\n      queryClient.invalidateQueries({ queryKey: [\"/api/import/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/releases\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка импорта\",\n        description: error.message || \"Не удалось импортировать плейлист\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateArtists = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/import/update-artists', {});\n      return response.json();\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Обновление завершено!\",\n        description: `✅ Новых релизов: ${result.stats.newReleases} | 🔄 Обновлено артистов: ${result.stats.updatedArtists} | ❌ Ошибок: ${result.stats.errors.length}`,\n      });\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/import/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/releases\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка обновления\",\n        description: error.message || \"Не удалось обновить артистов\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTestImport = () => {\n    if (!playlistUrl.trim()) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Пожалуйста, введите URL плейлиста\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!playlistUrl.includes('music.mts.ru') && !playlistUrl.includes('music.yandex.ru')) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Пожалуйста, введите корректную ссылку на плейлист (MTS Music или Яндекс Музыка)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    testPlaylistImport.mutate(playlistUrl);\n  };\n\n  const predefinedPlaylists = [\n    { name: \"🔥 MTS Чарт\", url: \"https://music.mts.ru/chart\" },\n    { name: \"Чарт Яндекс\", url: \"https://music.yandex.ru/chart\" },\n    { name: \"Новые релизы\", url: \"https://music.yandex.ru/playlists/2111e2b6-587d-a600-2fea-54df7c314477\" },\n    { name: \"Indie Rock\", url: \"https://music.yandex.ru/playlists/3c5d7e75-c8ea-55af-9689-2263608117ba\" },\n    { name: \"Russian Hip-Hop\", url: \"https://music.yandex.ru/playlists/83d59684-4c03-783a-8a27-8a04d52edb95\" }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <Download className=\"w-6 h-6 text-primary\" />\n            <div>\n              <h3 className=\"text-xl font-semibold text-white\">Импорт музыки из российских сервисов</h3>\n              <p className=\"text-white/70 text-sm\">\n                Автоматический импорт релизов через Deezer/iTunes API на основе плейлистов MTS Music и Яндекс Музыки\n              </p>\n            </div>\n          </div>\n\n          {/* Import Statistics */}\n          {importStats && (\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6 p-4 bg-muted/20 rounded-lg\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary\">{importStats.totalArtists || 0}</div>\n                <div className=\"text-sm text-white/70\">Всего артистов</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary\">{importStats.totalReleases || 0}</div>\n                <div className=\"text-sm text-white/70\">Всего релизов</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary\">{importStats.artistsWithSpotify || 0}</div>\n                <div className=\"text-sm text-white/70\">С Spotify</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary\">{importStats.recentReleases || 0}</div>\n                <div className=\"text-sm text-white/70\">За неделю</div>\n              </div>\n            </div>\n          )}\n\n          {/* Test Import Section */}\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"playlist-url\" className=\"text-white\">URL плейлиста (MTS Music или Яндекс Музыка)</Label>\n              <div className=\"flex gap-2 mt-1\">\n                <Input\n                  id=\"playlist-url\"\n                  placeholder=\"https://music.mts.ru/chart или https://music.yandex.ru/playlists/...\"\n                  value={playlistUrl}\n                  onChange={(e) => setPlaylistUrl(e.target.value)}\n                  className=\"text-white\"\n                  data-testid=\"input-playlist-url\"\n                />\n                <Button\n                  onClick={handleTestImport}\n                  disabled={testPlaylistImport.isPending}\n                  data-testid=\"button-test-import\"\n                >\n                  {testPlaylistImport.isPending ? (\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                      Импорт...\n                    </div>\n                  ) : (\n                    <>\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      Тест импорта\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            {/* Predefined Playlists */}\n            <div>\n              <Label className=\"text-white\">Популярные плейлисты:</Label>\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {predefinedPlaylists.map((playlist) => (\n                  <Button\n                    key={playlist.name}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setPlaylistUrl(playlist.url)}\n                    data-testid={`button-preset-${playlist.name.toLowerCase().replace(' ', '-')}`}\n                  >\n                    {playlist.name}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <Alert className=\"mt-4\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription className=\"text-white/80\">\n              <strong>Как работает импорт:</strong>\n              <br />\n              1. Парсим плейлист Яндекс Музыки для получения списка артистов\n              <br />\n              2. Ищем каждого артиста в Spotify по имени  \n              <br />\n              3. Загружаем полную дискографию артиста через Spotify API\n              <br />\n              4. Сохраняем все релизы (альбомы, синглы, компиляции) в базу данных\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n\n      {/* Update Existing Artists */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h4 className=\"text-lg font-semibold text-white\">Обновление существующих артистов</h4>\n              <p className=\"text-white/70 text-sm\">\n                Проверить новые релизы для артистов, которые уже есть в базе данных\n              </p>\n            </div>\n            <Button\n              onClick={() => updateArtists.mutate()}\n              disabled={updateArtists.isPending}\n              data-testid=\"button-update-artists\"\n            >\n              {updateArtists.isPending ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                  Обновление...\n                </div>\n              ) : (\n                <>\n                  <Calendar className=\"w-4 h-4 mr-2\" />\n                  Обновить артистов\n                </>\n              )}\n            </Button>\n          </div>\n          \n          <Alert>\n            <Database className=\"h-4 w-4\" />\n            <AlertDescription className=\"text-white/80\">\n              Это действие проверит всех артистов в базе данных и добавит новые релизы, \n              если они были выпущены с момента последнего обновления. \n              Рекомендуется запускать ежедневно для актуальной базы релизов.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n\n      {/* Background Import Jobs */}\n      <BackgroundImportSection />\n\n      {/* Automatic Scheduler Management */}\n      <AutomaticSchedulerSection />\n    </div>\n  );\n}\n\n// Background Import Jobs Component\nfunction BackgroundImportSection() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [backgroundUrl, setBackgroundUrl] = useState('');\n\n  // Fetch background jobs\n  const { data: jobs = [], isLoading: jobsLoading } = useQuery({\n    queryKey: [\"/api/import/jobs\"],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/import/jobs');\n      return response.json();\n    },\n    refetchInterval: 2000, // Refresh every 2 seconds for real-time updates\n  });\n\n  // Start background import\n  const startBackgroundImport = useMutation({\n    mutationFn: async (url: string) => {\n      const response = await apiRequest('POST', '/api/import/background-playlist', { playlistUrl: url });\n      return response.json();\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Фоновый импорт запущен!\",\n        description: `Задача #${result.jobId} создана. Отслеживайте прогресс ниже.`,\n      });\n      setBackgroundUrl('');\n      queryClient.invalidateQueries({ queryKey: [\"/api/import/jobs\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка запуска\",\n        description: error.message || \"Не удалось запустить фоновый импорт\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Cancel background job\n  const cancelJob = useMutation({\n    mutationFn: async (jobId: number) => {\n      const response = await apiRequest('POST', `/api/import/jobs/${jobId}/cancel`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Задача отменена\",\n        description: \"Фоновый импорт был отменён\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/import/jobs\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка отмены\",\n        description: error.message || \"Не удалось отменить задачу\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStartBackgroundImport = () => {\n    if (!backgroundUrl.trim()) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Пожалуйста, введите URL плейлиста\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!backgroundUrl.includes('music.mts.ru') && !backgroundUrl.includes('music.yandex.ru')) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Пожалуйста, введите корректную ссылку на плейлист (MTS Music или Яндекс Музыка)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    startBackgroundImport.mutate(backgroundUrl);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'text-yellow-500';\n      case 'processing': return 'text-blue-500';\n      case 'completed': return 'text-green-500';\n      case 'failed': return 'text-red-500';\n      default: return 'text-gray-500';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'pending': return 'Ожидание';\n      case 'processing': return 'Выполняется';\n      case 'completed': return 'Завершен';\n      case 'failed': return 'Ошибка';\n      default: return status;\n    }\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center gap-3 mb-6\">\n          <Database className=\"w-6 h-6 text-primary\" />\n          <div>\n            <h3 className=\"text-xl font-semibold text-white\">Фоновый импорт (для массовой обработки)</h3>\n            <p className=\"text-white/70 text-sm\">\n              Запуск длительного импорта в фоне для обработки больших плейлистов без таймаутов\n            </p>\n          </div>\n        </div>\n\n        {/* Background Import Form */}\n        <div className=\"space-y-4 mb-6\">\n          <div>\n            <Label htmlFor=\"background-url\" className=\"text-white\">URL плейлиста для фонового импорта</Label>\n            <div className=\"flex gap-2 mt-1\">\n              <Input\n                id=\"background-url\"\n                placeholder=\"https://music.mts.ru/chart или https://music.yandex.ru/playlists/...\"\n                value={backgroundUrl}\n                onChange={(e) => setBackgroundUrl(e.target.value)}\n                className=\"text-white\"\n                data-testid=\"input-background-url\"\n              />\n              <Button\n                onClick={handleStartBackgroundImport}\n                disabled={startBackgroundImport.isPending}\n                data-testid=\"button-start-background\"\n              >\n                {startBackgroundImport.isPending ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                    Запуск...\n                  </div>\n                ) : (\n                  <>\n                    <Database className=\"w-4 h-4 mr-2\" />\n                    Запустить в фоне\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Jobs List */}\n        <div>\n          <h4 className=\"text-lg font-semibold text-white mb-4\">Фоновые задачи</h4>\n          \n          {jobsLoading ? (\n            <div className=\"text-center py-4\">\n              <div className=\"w-6 h-6 border-2 border-current border-t-transparent rounded-full animate-spin mx-auto\" />\n              <p className=\"text-white/70 mt-2\">Загрузка задач...</p>\n            </div>\n          ) : jobs.length === 0 ? (\n            <div className=\"text-center py-8 text-white/70\">\n              Нет фоновых задач\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {jobs.map((job: any) => (\n                <div key={job.id} className=\"border border-white/20 rounded-lg p-4 bg-muted/10\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-3\">\n                      <span className=\"font-medium text-white\">Задача #{job.id}</span>\n                      <span className={`text-sm font-medium ${getStatusColor(job.status)}`}>\n                        {getStatusText(job.status)}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      {job.status === 'processing' && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => cancelJob.mutate(job.id)}\n                          disabled={cancelJob.isPending}\n                        >\n                          Отменить\n                        </Button>\n                      )}\n                      <span className=\"text-xs text-white/60\">\n                        {new Date(job.createdAt).toLocaleString('ru')}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-sm text-white/80 mb-3\">\n                    <div className=\"break-all\">{job.playlistUrl}</div>\n                  </div>\n\n                  {/* Progress Bar */}\n                  {job.status === 'processing' && (\n                    <div className=\"mb-3\">\n                      <div className=\"flex justify-between text-xs text-white/70 mb-1\">\n                        <span>Прогресс: {job.progress || 0}%</span>\n                        <span>{job.processedArtists || 0}/{job.totalArtists || 0} артистов</span>\n                      </div>\n                      <div className=\"w-full bg-white/20 rounded-full h-2\">\n                        <div \n                          className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n                          style={{ width: `${job.progress || 0}%` }}\n                        />\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Results */}\n                  {(job.status === 'completed' || job.status === 'processing') && (\n                    <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                      <div className=\"text-center\">\n                        <div className=\"font-medium text-green-400\">{job.newReleases || 0}</div>\n                        <div className=\"text-white/60\">Новых</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"font-medium text-yellow-400\">{job.skippedReleases || 0}</div>\n                        <div className=\"text-white/60\">Пропущено</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"font-medium text-red-400\">{job.errors || 0}</div>\n                        <div className=\"text-white/60\">Ошибок</div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Error Message */}\n                  {job.status === 'failed' && job.errorMessage && (\n                    <div className=\"mt-2 p-2 bg-red-900/20 border border-red-500/30 rounded text-red-400 text-sm\">\n                      {job.errorMessage}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        <Alert className=\"mt-4\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription className=\"text-white/80\">\n            <strong>Фоновый импорт:</strong> Обрабатывает плейлисты любого размера без таймаутов. \n            Идеально для больших плейлистов с сотнями артистов. Следите за прогрессом в режиме реального времени.\n          </AlertDescription>\n        </Alert>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Automatic Scheduler Management Component\nfunction AutomaticSchedulerSection() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch scheduler status\n  const { data: schedulerStatus, isLoading: statusLoading } = useQuery({\n    queryKey: [\"/api/scheduler/status\"],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/scheduler/status');\n      return response.json();\n    },\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  // Start scheduler\n  const startScheduler = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/scheduler/start', {});\n      return response.json();\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Планировщик запущен!\",\n        description: result.message,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/scheduler/status\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка запуска\",\n        description: error.message || \"Не удалось запустить планировщик\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Stop scheduler\n  const stopScheduler = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/scheduler/stop', {});\n      return response.json();\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Планировщик остановлен\",\n        description: result.message,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/scheduler/status\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка остановки\",\n        description: error.message || \"Не удалось остановить планировщик\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Trigger manual import\n  const triggerImport = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/scheduler/trigger', {});\n      return response.json();\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Импорт запущен\",\n        description: result.message,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка запуска\",\n        description: error.message || \"Не удалось запустить импорт\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (isActive: boolean) => {\n    return isActive ? 'text-green-500' : 'text-red-500';\n  };\n\n  const getStatusText = (isActive: boolean) => {\n    return isActive ? 'Активен' : 'Остановлен';\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center gap-3 mb-6\">\n          <Calendar className=\"w-6 h-6 text-primary\" />\n          <div>\n            <h3 className=\"text-xl font-semibold text-white\">Автоматический ежедневный импорт</h3>\n            <p className=\"text-white/70 text-sm\">\n              Система автоматически обновляет базу каждый день в 03:00 МСК\n            </p>\n          </div>\n        </div>\n\n        {statusLoading ? (\n          <div className=\"text-center py-4\">\n            <div className=\"w-6 h-6 border-2 border-current border-t-transparent rounded-full animate-spin mx-auto\" />\n            <p className=\"text-white/70 mt-2\">Загрузка статуса...</p>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {/* Current Status */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"bg-muted/20 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-white font-medium\">Статус планировщика</span>\n                  <span className={`text-sm font-bold ${getStatusColor(schedulerStatus?.isActive)}`}>\n                    {getStatusText(schedulerStatus?.isActive)}\n                  </span>\n                </div>\n                {schedulerStatus?.isActive && schedulerStatus?.nextRun && (\n                  <div className=\"text-sm text-white/70\">\n                    Следующий запуск: {new Date(schedulerStatus.nextRun).toLocaleString('ru')}\n                    <br />\n                    Через: {schedulerStatus.hoursUntilNextRun} часов\n                  </div>\n                )}\n              </div>\n\n              <div className=\"bg-muted/20 rounded-lg p-4\">\n                <div className=\"text-white font-medium mb-2\">Автоматически обрабатывает</div>\n                <div className=\"text-sm text-white/70\">\n                  • MTS Music Чарт<br />\n                  • Яндекс Музыка плейлисты<br />\n                  • Обновление всех артистов<br />\n                  • Поиск новых релизов\n                </div>\n              </div>\n            </div>\n\n            {/* Control Buttons */}\n            <div className=\"flex gap-3\">\n              {schedulerStatus?.isActive ? (\n                <Button\n                  onClick={() => stopScheduler.mutate()}\n                  disabled={stopScheduler.isPending}\n                  variant=\"destructive\"\n                  data-testid=\"button-stop-scheduler\"\n                >\n                  {stopScheduler.isPending ? (\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                      Остановка...\n                    </div>\n                  ) : (\n                    <>\n                      <X className=\"w-4 h-4 mr-2\" />\n                      Остановить планировщик\n                    </>\n                  )}\n                </Button>\n              ) : (\n                <Button\n                  onClick={() => startScheduler.mutate()}\n                  disabled={startScheduler.isPending}\n                  data-testid=\"button-start-scheduler\"\n                >\n                  {startScheduler.isPending ? (\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                      Запуск...\n                    </div>\n                  ) : (\n                    <>\n                      <Calendar className=\"w-4 h-4 mr-2\" />\n                      Запустить планировщик\n                    </>\n                  )}\n                </Button>\n              )}\n\n              <Button\n                onClick={() => triggerImport.mutate()}\n                disabled={triggerImport.isPending}\n                variant=\"secondary\"\n                data-testid=\"button-trigger-import\"\n              >\n                {triggerImport.isPending ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                    Запуск...\n                  </div>\n                ) : (\n                  <>\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    Запустить сейчас\n                  </>\n                )}\n              </Button>\n            </div>\n\n            {/* Info Alert */}\n            <Alert>\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription className=\"text-white/80\">\n                <strong>Автоматический импорт:</strong> Планировщик запускается автоматически при старте сервера.\n                Каждый день в 03:00 МСК система будет обновлять базу новыми релизами из русских музыкальных сервисов.\n                Можете также запустить импорт вручную в любое время.\n              </AlertDescription>\n            </Alert>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Reports Tab Component\nfunction ReportsTab({ reports }: { reports: any[] }) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const dismissReportMutation = useMutation({\n    mutationFn: async (reportId: number) => {\n      const response = await apiRequest('POST', `/api/admin/reports/${reportId}/dismiss`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Жалоба отклонена\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/reports\"] });\n    },\n  });\n\n  const deleteCommentMutation = useMutation({\n    mutationFn: async (reportId: number) => {\n      const response = await apiRequest('POST', `/api/admin/reports/${reportId}/delete-comment`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Комментарий удален\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/reports\"] });\n    },\n  });\n\n  if (reports.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <p className=\"text-muted-foreground\">Нет активных жалоб</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {reports.map((report: any) => (\n        <Card key={report.id}>\n          <CardContent className=\"p-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <p className=\"font-medium\">Жалоба от: {report.reportedBy.nickname}</p>\n                <p className=\"text-sm text-muted-foreground\">Причина: {report.reason}</p>\n              </div>\n              <div className=\"bg-muted p-3 rounded\">\n                <p className=\"text-sm\">{report.comment.content}</p>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  От: {report.comment.user.nickname} • {new Date(report.comment.createdAt).toLocaleDateString()}\n                </p>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"destructive\"\n                  onClick={() => deleteCommentMutation.mutate(report.id)}\n                  disabled={deleteCommentMutation.isPending}\n                >\n                  Удалить комментарий\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => dismissReportMutation.mutate(report.id)}\n                  disabled={dismissReportMutation.isPending}\n                >\n                  Отклонить жалобу\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n\n// User Management Tab Component\nfunction UserManagementTab() {\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/admin/users');\n      return response.json();\n    },\n  });\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-xl font-semibold mb-4 text-white\">Управление пользователями</h3>\n        <div className=\"space-y-4\">\n          {users.map((user: any) => (\n            <div key={user.id} className=\"flex items-center justify-between p-4 border rounded\">\n              <div>\n                <p className=\"font-medium text-white\">{user.nickname || user.name}</p>\n                <p className=\"text-sm text-white/70\">{user.email}</p>\n                <p className=\"text-xs text-white/50\">\n                  Зарегистрирован: {new Date(user.createdAt).toLocaleDateString()}\n                </p>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className={`px-2 py-1 rounded text-xs ${user.isAdmin ? 'bg-primary text-primary-foreground' : 'bg-muted text-muted-foreground'}`}>\n                  {user.isAdmin ? 'Админ' : 'Пользователь'}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Music Import Tab Component\nfunction MusicImportTab() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [importMode, setImportMode] = useState<'artists' | 'years'>('artists');\n  const [artistList, setArtistList] = useState('');\n  const [yearsList, setYearsList] = useState('');\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/admin/import/stats\"],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/admin/import/stats');\n      return response.json();\n    },\n  });\n\n  const importMutation = useMutation({\n    mutationFn: async (data: { artists?: string[]; years?: number[] }) => {\n      if (data.artists) {\n        const response = await apiRequest('POST', '/api/admin/import', { artists: data.artists });\n        return response.json();\n      } else if (data.years) {\n        const response = await apiRequest('POST', '/api/admin/import/years', { years: data.years });\n        return response.json();\n      }\n      throw new Error('Invalid import data');\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Импорт завершен!\",\n        description: `✅ Добавлено: ${result.success || 0} релизов`,\n      });\n      setArtistList('');\n      setYearsList('');\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/import/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/releases\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка импорта\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImport = () => {\n    if (importMode === 'artists') {\n      const artists = artistList.split('\\n').filter(name => name.trim());\n      if (artists.length === 0) {\n        toast({ title: \"Список пуст\", variant: \"destructive\" });\n        return;\n      }\n      importMutation.mutate({ artists });\n    } else {\n      const years = yearsList.split('\\n').map(y => parseInt(y.trim())).filter(y => !isNaN(y));\n      if (years.length === 0) {\n        toast({ title: \"Список пуст\", variant: \"destructive\" });\n        return;\n      }\n      importMutation.mutate({ years });\n    }\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center gap-3 mb-6\">\n          <Upload className=\"w-6 h-6 text-primary\" />\n          <div>\n            <h3 className=\"text-xl font-semibold text-white\">Массовый импорт релизов</h3>\n            <p className=\"text-white/70 text-sm\">Импорт через Last.fm API</p>\n          </div>\n        </div>\n\n        {stats && (\n          <div className=\"grid grid-cols-2 gap-4 mb-6 p-4 bg-muted/20 rounded-lg\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary\">{stats.totalReleases || 0}</div>\n              <div className=\"text-sm text-white/70\">Всего релизов</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary\">{stats.totalArtists || 0}</div>\n              <div className=\"text-sm text-white/70\">Всего артистов</div>\n            </div>\n          </div>\n        )}\n\n        <div className=\"space-y-4\">\n          <RadioGroup value={importMode} onValueChange={(value: 'artists' | 'years') => setImportMode(value)}>\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem value=\"artists\" id=\"artists\" />\n              <Label htmlFor=\"artists\" className=\"text-white\">По артистам</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem value=\"years\" id=\"years\" />\n              <Label htmlFor=\"years\" className=\"text-white\">По годам</Label>\n            </div>\n          </RadioGroup>\n\n          {importMode === 'artists' ? (\n            <div>\n              <Label className=\"text-white\">Список артистов (по одному на строку):</Label>\n              <Textarea\n                placeholder=\"Arctic Monkeys&#10;Radiohead&#10;...\"\n                value={artistList}\n                onChange={(e) => setArtistList(e.target.value)}\n                rows={6}\n                className=\"text-white\"\n              />\n            </div>\n          ) : (\n            <div>\n              <Label className=\"text-white\">Список годов (по одному на строку):</Label>\n              <Textarea\n                placeholder=\"2023&#10;2022&#10;...\"\n                value={yearsList}\n                onChange={(e) => setYearsList(e.target.value)}\n                rows={6}\n                className=\"text-white\"\n              />\n            </div>\n          )}\n\n          <Button\n            onClick={handleImport}\n            disabled={importMutation.isPending}\n            className=\"w-full\"\n          >\n            {importMutation.isPending ? (\n              <div className=\"flex items-center gap-2\">\n                <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                Импорт...\n              </div>\n            ) : (\n              <>\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Начать импорт\n              </>\n            )}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Release Browser Tab Component  \nfunction ReleaseBrowserTab({ searchQuery, onSearchChange, showTestData }: { \n  searchQuery: string; \n  onSearchChange: (query: string) => void; \n  showTestData: boolean \n}) {\n  const { data: releases = [] } = useQuery({\n    queryKey: [\"/api/releases\", { showTestData }],\n    queryFn: async ({ queryKey }) => {\n      const [, params] = queryKey as [string, { showTestData: boolean }];\n      const response = await fetch(`/api/releases?showTestData=${params.showTestData}`);\n      if (!response.ok) throw new Error('Failed to fetch releases');\n      return response.json();\n    },\n  });\n\n  const filteredReleases = releases.filter((release: any) =>\n    release.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    release.artist?.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center gap-3 mb-6\">\n          <List className=\"w-6 h-6 text-primary\" />\n          <h3 className=\"text-xl font-semibold text-white\">Все релизы ({filteredReleases.length})</h3>\n        </div>\n\n        <div className=\"mb-4\">\n          <Input\n            placeholder=\"Поиск по названию или артисту...\"\n            value={searchQuery}\n            onChange={(e) => onSearchChange(e.target.value)}\n            className=\"text-white\"\n          />\n        </div>\n\n        <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n          {filteredReleases.map((release: any) => (\n            <div\n              key={release.id}\n              className=\"flex items-center gap-4 p-4 border rounded hover:bg-muted/50\"\n            >\n              {release.coverUrl ? (\n                <img\n                  src={release.coverUrl}\n                  alt={release.title}\n                  className=\"w-12 h-12 rounded object-cover\"\n                />\n              ) : (\n                <div className=\"w-12 h-12 bg-muted rounded flex items-center justify-center\">\n                  <Album className=\"w-6 h-6 text-muted-foreground\" />\n                </div>\n              )}\n              <div className=\"flex-1\">\n                <h4 className=\"font-medium text-white\">{release.title}</h4>\n                <p className=\"text-sm text-white/70\">{release.artist?.name}</p>\n                <p className=\"text-xs text-white/50\">\n                  {release.releaseDate ? new Date(release.releaseDate).getFullYear() : 'Нет даты'}\n                </p>\n              </div>\n              <div className=\"text-sm text-white/70\">\n                ⭐ {release.averageRating?.toFixed(1) || 'Нет оценок'}\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Collections Tab Component\nfunction CollectionsTab() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [newCollection, setNewCollection] = useState({ title: '', description: '', isPublic: true });\n  const [editingCollection, setEditingCollection] = useState<any>(null);\n  const [managingReleases, setManagingReleases] = useState<number | null>(null);\n  const [releaseSearch, setReleaseSearch] = useState('');\n\n  const { data: collections = [] } = useQuery({\n    queryKey: [\"/api/admin/collections\"],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/admin/collections');\n      return response.json();\n    },\n  });\n\n  const { data: allReleases = [] } = useQuery({\n    queryKey: [\"/api/releases\", { showTestData: true }],\n    queryFn: async () => {\n      const response = await fetch('/api/releases?showTestData=true');\n      return response.json();\n    },\n  });\n\n  const filteredReleases = allReleases.filter((release: any) =>\n    release.title.toLowerCase().includes(releaseSearch.toLowerCase()) ||\n    release.artist?.name.toLowerCase().includes(releaseSearch.toLowerCase())\n  );\n\n  const createCollectionMutation = useMutation({\n    mutationFn: async (data: typeof newCollection) => {\n      const response = await apiRequest('POST', '/api/admin/collections', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Подборка создана!\" });\n      setNewCollection({ title: '', description: '', isPublic: true });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/collections\"] });\n    },\n  });\n\n  const deleteCollectionMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest('DELETE', `/api/admin/collections/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Подборка удалена!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/collections\"] });\n    },\n  });\n\n  const addReleaseMutation = useMutation({\n    mutationFn: async (data: { collectionId: number; releaseId: number; sortOrder: number }) => {\n      const response = await apiRequest('POST', `/api/admin/collections/${data.collectionId}/releases`, {\n        releaseId: data.releaseId,\n        sortOrder: data.sortOrder\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Релиз добавлен!\" });\n      setReleaseSearch('');\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/collections\"] });\n    },\n  });\n\n  const removeReleaseMutation = useMutation({\n    mutationFn: async (data: { collectionId: number; releaseId: number }) => {\n      const response = await apiRequest('DELETE', `/api/admin/collections/${data.collectionId}/releases/${data.releaseId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Релиз удален!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/collections\"] });\n    },\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Create Collection */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center gap-3 mb-4\">\n            <FolderOpen className=\"w-6 h-6 text-primary\" />\n            <h3 className=\"text-xl font-semibold text-white\">Создать новую подборку</h3>\n          </div>\n\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              if (!newCollection.title.trim()) {\n                toast({ title: \"Введите название\", variant: \"destructive\" });\n                return;\n              }\n              createCollectionMutation.mutate(newCollection);\n            }}\n            className=\"space-y-4\"\n          >\n            <div>\n              <Label className=\"text-white\">Название подборки</Label>\n              <Input\n                placeholder=\"Название подборки\"\n                value={newCollection.title}\n                onChange={(e) => setNewCollection(prev => ({ ...prev, title: e.target.value }))}\n                className=\"text-white\"\n              />\n            </div>\n            <div>\n              <Label className=\"text-white\">Описание</Label>\n              <Textarea\n                placeholder=\"Описание подборки\"\n                value={newCollection.description}\n                onChange={(e) => setNewCollection(prev => ({ ...prev, description: e.target.value }))}\n                className=\"text-white\"\n              />\n            </div>\n            <Button type=\"submit\" disabled={createCollectionMutation.isPending}>\n              {createCollectionMutation.isPending ? \"Создаем...\" : \"Создать подборку\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* Collections List */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-xl font-semibold text-white mb-4\">\n            Все подборки ({collections.length})\n          </h3>\n\n          {collections.length === 0 ? (\n            <p className=\"text-white/70\">Нет созданных подборок</p>\n          ) : (\n            <div className=\"space-y-4\">\n              {collections.map((collection: any) => (\n                <div key={collection.id} className=\"border rounded p-4\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div>\n                      <h5 className=\"font-semibold text-white\">{collection.title}</h5>\n                      {collection.description && (\n                        <p className=\"text-sm text-white/70 mt-1\">{collection.description}</p>\n                      )}\n                      <p className=\"text-xs text-white/50 mt-1\">\n                        {collection.isPublic ? 'Публичная' : 'Приватная'} • {collection.releases?.length || 0} релизов\n                      </p>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setManagingReleases(managingReleases === collection.id ? null : collection.id)}\n                      >\n                        <List className=\"w-4 h-4 mr-1\" />\n                        {collection.releases?.length || 0}\n                      </Button>\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => deleteCollectionMutation.mutate(collection.id)}\n                        disabled={deleteCollectionMutation.isPending}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Release Management */}\n                  {managingReleases === collection.id && (\n                    <div className=\"border-t pt-3 space-y-3\">\n                      <h6 className=\"font-medium text-white\">Релизы в подборке ({collection.releases?.length || 0})</h6>\n                      \n                      {collection.releases?.length > 0 && (\n                        <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                          {collection.releases.map((release: any) => (\n                            <div\n                              key={release.id}\n                              className=\"flex items-center justify-between p-2 bg-muted/50 rounded\"\n                            >\n                              <div className=\"flex-1\">\n                                <p className=\"font-medium text-sm text-white\">{release.title}</p>\n                                <p className=\"text-xs text-white/70\">\n                                  {release.artist?.name} • {release.releaseDate ? new Date(release.releaseDate).getFullYear() : 'Нет даты'}\n                                </p>\n                              </div>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => removeReleaseMutation.mutate({ \n                                  collectionId: collection.id, \n                                  releaseId: release.id \n                                })}\n                                disabled={removeReleaseMutation.isPending}\n                              >\n                                <X className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n\n                      {/* Add Release */}\n                      <div className=\"space-y-2\">\n                        <Input\n                          placeholder=\"Поиск релизов для добавления...\"\n                          value={releaseSearch}\n                          onChange={(e) => setReleaseSearch(e.target.value)}\n                          className=\"text-white\"\n                        />\n                        \n                        {releaseSearch && (\n                          <div className=\"max-h-32 overflow-y-auto border rounded\">\n                            {filteredReleases\n                              .filter((release: any) => !collection.releases?.some((cr: any) => cr.id === release.id))\n                              .slice(0, 10)\n                              .map((release: any) => (\n                                <div\n                                  key={release.id}\n                                  className=\"flex items-center justify-between p-2 hover:bg-muted/50 cursor-pointer\"\n                                  onClick={() => {\n                                    addReleaseMutation.mutate({\n                                      collectionId: collection.id,\n                                      releaseId: release.id,\n                                      sortOrder: collection.releases?.length || 0\n                                    });\n                                  }}\n                                >\n                                  <div>\n                                    <p className=\"font-medium text-sm text-white\">{release.title}</p>\n                                    <p className=\"text-xs text-white/70\">{release.artist?.name}</p>\n                                  </div>\n                                  <Plus className=\"w-4 h-4\" />\n                                </div>\n                              ))}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Компонент для управления плейлистами автоимпорта\nfunction PlaylistsTab() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [playlistForm, setPlaylistForm] = useState({\n    name: '',\n    url: '',\n    enabled: true,\n    sortOrder: 0\n  });\n  const [isEditing, setIsEditing] = useState<number | null>(null);\n\n  const { data: playlists = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/auto-import-playlists\"],\n    enabled: true,\n  });\n\n  const createPlaylistMutation = useMutation({\n    mutationFn: async (data: typeof playlistForm) => {\n      const response = await apiRequest('POST', '/api/auto-import-playlists', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auto-import-playlists\"] });\n      setPlaylistForm({ name: '', url: '', enabled: true, sortOrder: 0 });\n      toast({\n        title: \"Плейлист добавлен\",\n        description: \"Новый плейлист успешно добавлен в автоимпорт.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось добавить плейлист.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePlaylistMutation = useMutation({\n    mutationFn: async ({ id, ...data }: { id: number } & Partial<typeof playlistForm>) => {\n      const response = await apiRequest('PUT', `/api/auto-import-playlists/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auto-import-playlists\"] });\n      setIsEditing(null);\n      toast({\n        title: \"Плейлист обновлен\",\n        description: \"Плейлист успешно обновлен.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось обновить плейлист.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePlaylistMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest('DELETE', `/api/auto-import-playlists/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auto-import-playlists\"] });\n      toast({\n        title: \"Плейлист удален\",\n        description: \"Плейлист удален из автоимпорта.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось удалить плейлист.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!playlistForm.name.trim() || !playlistForm.url.trim()) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Название и URL обязательны для заполнения.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createPlaylistMutation.mutate(playlistForm);\n  };\n\n  const handleEdit = (playlist: any) => {\n    setIsEditing(playlist.id);\n    setPlaylistForm({\n      name: playlist.name,\n      url: playlist.url,\n      enabled: playlist.enabled,\n      sortOrder: playlist.sortOrder\n    });\n  };\n\n  const handleUpdate = (id: number) => {\n    if (!playlistForm.name.trim() || !playlistForm.url.trim()) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Название и URL обязательны для заполнения.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updatePlaylistMutation.mutate({ id, ...playlistForm });\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(null);\n    setPlaylistForm({ name: '', url: '', enabled: true, sortOrder: 0 });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-card border-border\">\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-xl font-semibold text-white mb-4\">Управление плейлистами автоимпорта</h3>\n          \n          <Alert className=\"mb-6\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Здесь вы можете добавлять, редактировать и удалять плейлисты из российских музыкальных сервисов для автоматического импорта музыки.\n              Система ежедневно проверяет указанные плейлисты и добавляет новые релизы в базу данных.\n            </AlertDescription>\n          </Alert>\n\n          {/* Форма добавления/редактирования */}\n          <form onSubmit={handleSubmit} className=\"space-y-4 mb-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"playlist-name\" className=\"text-white\">\n                  Название плейлиста\n                </Label>\n                <Input\n                  id=\"playlist-name\"\n                  type=\"text\"\n                  value={playlistForm.name}\n                  onChange={(e) => setPlaylistForm({ ...playlistForm, name: e.target.value })}\n                  placeholder=\"Новинки хип-хопа\"\n                  className=\"text-white\"\n                  data-testid=\"input-playlist-name\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"playlist-url\" className=\"text-white\">\n                  URL плейлиста\n                </Label>\n                <Input\n                  id=\"playlist-url\"\n                  type=\"text\"\n                  value={playlistForm.url}\n                  onChange={(e) => setPlaylistForm({ ...playlistForm, url: e.target.value })}\n                  placeholder=\"https://music.mts.ru/playlist/...\"\n                  className=\"text-white\"\n                  data-testid=\"input-playlist-url\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  id=\"playlist-enabled\"\n                  checked={playlistForm.enabled}\n                  onCheckedChange={(checked) => setPlaylistForm({ ...playlistForm, enabled: checked })}\n                  data-testid=\"switch-playlist-enabled\"\n                />\n                <Label htmlFor=\"playlist-enabled\" className=\"text-white\">\n                  Активен\n                </Label>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"playlist-order\" className=\"text-white\">\n                  Порядок сортировки\n                </Label>\n                <Input\n                  id=\"playlist-order\"\n                  type=\"number\"\n                  value={playlistForm.sortOrder}\n                  onChange={(e) => setPlaylistForm({ ...playlistForm, sortOrder: parseInt(e.target.value) || 0 })}\n                  placeholder=\"0\"\n                  className=\"text-white\"\n                  data-testid=\"input-playlist-order\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex gap-2\">\n              {isEditing ? (\n                <>\n                  <Button\n                    type=\"button\"\n                    onClick={() => handleUpdate(isEditing)}\n                    disabled={updatePlaylistMutation.isPending}\n                    data-testid=\"button-update-playlist\"\n                  >\n                    Обновить плейлист\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleCancelEdit}\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    Отмена\n                  </Button>\n                </>\n              ) : (\n                <Button\n                  type=\"submit\"\n                  disabled={createPlaylistMutation.isPending}\n                  data-testid=\"button-add-playlist\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Добавить плейлист\n                </Button>\n              )}\n            </div>\n          </form>\n\n          {/* Список плейлистов */}\n          {isLoading ? (\n            <div className=\"text-center text-white/70 py-8\">Загрузка плейлистов...</div>\n          ) : playlists.length === 0 ? (\n            <div className=\"text-center text-white/70 py-8\">\n              Нет добавленных плейлистов. Добавьте первый плейлист выше.\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <h4 className=\"text-lg font-medium text-white\">Текущие плейлисты ({playlists.length})</h4>\n              \n              {playlists.map((playlist: any) => (\n                <div\n                  key={playlist.id}\n                  className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\"\n                  data-testid={`playlist-item-${playlist.id}`}\n                >\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <h5 className=\"font-medium text-white\" data-testid={`text-playlist-name-${playlist.id}`}>\n                        {playlist.name}\n                      </h5>\n                      <span\n                        className={`px-2 py-1 text-xs rounded ${\n                          playlist.enabled \n                            ? 'bg-green-500/20 text-green-400' \n                            : 'bg-red-500/20 text-red-400'\n                        }`}\n                        data-testid={`status-playlist-${playlist.id}`}\n                      >\n                        {playlist.enabled ? 'Активен' : 'Отключен'}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-white/70 mb-1\" data-testid={`text-playlist-url-${playlist.id}`}>\n                      {playlist.url}\n                    </p>\n                    <p className=\"text-xs text-white/50\">\n                      Порядок: {playlist.sortOrder} • \n                      Создан: {new Date(playlist.createdAt).toLocaleDateString('ru-RU')} •\n                      Обновлен: {new Date(playlist.updatedAt).toLocaleDateString('ru-RU')}\n                    </p>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(playlist)}\n                      disabled={isEditing === playlist.id}\n                      data-testid={`button-edit-${playlist.id}`}\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => deletePlaylistMutation.mutate(playlist.id)}\n                      disabled={deletePlaylistMutation.isPending}\n                      data-testid={`button-delete-${playlist.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction ImportLogsTab() {\n  const { toast } = useToast();\n\n  // Мутация для ручного запуска импорта\n  const manualImportMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/import/manual-daily', {});\n      return response;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Импорт запущен!\",\n        description: \"Автоматический импорт музыки запущен успешно. Результаты появятся в логах.\",\n      });\n      // Обновляем данные\n      queryClient.invalidateQueries({ queryKey: [\"/api/import-logs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/import-logs/latest\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка импорта\",\n        description: error.message || \"Не удалось запустить импорт\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Получаем историю логов импорта\n  const { data: importLogs = [], isLoading: logsLoading } = useQuery({\n    queryKey: [\"/api/import-logs\"],\n    queryFn: async () => {\n      const response = await fetch('/api/import-logs');\n      if (!response.ok) throw new Error('Failed to fetch import logs');\n      return response.json();\n    },\n  });\n\n  // Получаем последний лог импорта\n  const { data: latestLog, isLoading: latestLoading } = useQuery({\n    queryKey: [\"/api/import-logs/latest\"],\n    queryFn: async () => {\n      const response = await fetch('/api/import-logs/latest');\n      if (!response.ok) throw new Error('Failed to fetch latest import log');\n      return response.json();\n    },\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString('ru-RU');\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'running':\n        return 'bg-blue-500/20 text-blue-400';\n      case 'completed':\n        return 'bg-green-500/20 text-green-400';\n      case 'failed':\n        return 'bg-red-500/20 text-red-400';\n      default:\n        return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'running':\n        return 'Выполняется';\n      case 'completed':\n        return 'Завершен';\n      case 'failed':\n        return 'Ошибка';\n      default:\n        return status;\n    }\n  };\n\n  if (logsLoading || latestLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"text-white/70\">Загрузка логов импорта...</div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Тестовый запуск импорта */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">Тестовый запуск</h3>\n              <p className=\"text-white/70 text-sm\">\n                Запустить импорт всех плейлистов прямо сейчас, не дожидаясь автоматического запуска в 03:00\n              </p>\n            </div>\n            <Button\n              onClick={() => manualImportMutation.mutate()}\n              disabled={manualImportMutation.isPending}\n              className=\"bg-primary hover:bg-primary/90\"\n              data-testid=\"button-manual-import\"\n            >\n              {manualImportMutation.isPending ? 'Запускается...' : 'Запустить сейчас'}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Последний импорт */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-xl font-bold text-white mb-4\">Последний автоматический импорт</h3>\n          {latestLog ? (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"text-sm text-white/70 mb-1\">Статус</div>\n                  <span className={`px-2 py-1 text-xs rounded ${getStatusColor(latestLog.status)}`}>\n                    {getStatusText(latestLog.status)}\n                  </span>\n                </div>\n                <div className=\"p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"text-sm text-white/70 mb-1\">Начало импорта</div>\n                  <div className=\"font-medium text-white\">{formatDate(latestLog.startedAt)}</div>\n                </div>\n                <div className=\"p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"text-sm text-white/70 mb-1\">Завершение</div>\n                  <div className=\"font-medium text-white\">\n                    {latestLog.completedAt ? formatDate(latestLog.completedAt) : 'В процессе...'}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"text-sm text-white/70 mb-1\">Плейлистов</div>\n                  <div className=\"text-2xl font-bold text-white\">\n                    {latestLog.processedPlaylists}/{latestLog.totalPlaylists}\n                  </div>\n                </div>\n                <div className=\"p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"text-sm text-white/70 mb-1\">Новых релизов</div>\n                  <div className=\"text-2xl font-bold text-green-400\">{latestLog.newReleases}</div>\n                </div>\n                <div className=\"p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"text-sm text-white/70 mb-1\">Пропущено</div>\n                  <div className=\"text-2xl font-bold text-yellow-400\">{latestLog.skippedReleases}</div>\n                </div>\n                <div className=\"p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"text-sm text-white/70 mb-1\">Ошибок</div>\n                  <div className=\"text-2xl font-bold text-red-400\">{latestLog.errors}</div>\n                </div>\n              </div>\n\n              {/* Детали плейлистов */}\n              {latestLog.playlistResults && latestLog.playlistResults.length > 0 && (\n                <div className=\"mt-6\">\n                  <h4 className=\"text-lg font-semibold text-white mb-3\">Обработанные плейлисты</h4>\n                  <div className=\"space-y-2\">\n                    {latestLog.playlistResults.map((result: any, index: number) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                        <div>\n                          <div className=\"font-medium text-white\">{result.playlistName}</div>\n                          <div className=\"text-sm text-white/70\">{result.playlistUrl}</div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          {result.jobId && (\n                            <span className=\"text-xs text-white/50\">Job #{result.jobId}</span>\n                          )}\n                          <span className={`px-2 py-1 text-xs rounded ${\n                            result.status === 'started' ? 'bg-blue-500/20 text-blue-400' : 'bg-gray-500/20 text-gray-400'\n                          }`}>\n                            {result.status === 'started' ? 'Запущен' : 'Пропущен'}\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Ошибки */}\n              {latestLog.errorMessage && (\n                <div className=\"mt-4\">\n                  <Alert>\n                    <AlertTriangle className=\"h-4 w-4\" />\n                    <AlertDescription className=\"text-white\">\n                      <strong>Ошибки импорта:</strong> {latestLog.errorMessage}\n                    </AlertDescription>\n                  </Alert>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-white/70\">\n              Автоматических импортов пока не было\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* История импортов */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-xl font-bold text-white mb-4\">История автоматических импортов</h3>\n          {importLogs.length > 0 ? (\n            <div className=\"space-y-3\">\n              {importLogs.map((log: any) => (\n                <div key={log.id} className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      <span className={`px-2 py-1 text-xs rounded ${getStatusColor(log.status)}`}>\n                        {getStatusText(log.status)}\n                      </span>\n                      <span className=\"text-sm text-white/70\">\n                        {formatDate(log.startedAt)}\n                      </span>\n                      {log.completedAt && (\n                        <span className=\"text-xs text-white/50\">\n                          → {formatDate(log.completedAt)}\n                        </span>\n                      )}\n                    </div>\n                    <div className=\"flex items-center gap-4 text-sm\">\n                      <span className=\"text-white\">\n                        Плейлистов: <strong>{log.processedPlaylists}/{log.totalPlaylists}</strong>\n                      </span>\n                      <span className=\"text-green-400\">\n                        Релизов: <strong>{log.newReleases}</strong>\n                      </span>\n                      <span className=\"text-yellow-400\">\n                        Пропущено: <strong>{log.skippedReleases}</strong>\n                      </span>\n                      {log.errors > 0 && (\n                        <span className=\"text-red-400\">\n                          Ошибок: <strong>{log.errors}</strong>\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-white/50\">\n                    ID: {log.id}\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-white/70\">\n              История импортов пуста\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":89430},"client/src/pages/artist.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport { ReleaseCard } from \"@/components/release/release-card\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Music, ArrowLeft } from \"lucide-react\";\nimport type { Artist, Release } from \"@shared/schema\";\n\nexport default function Artist() {\n  const { id } = useParams<{ id: string }>();\n  const [, setLocation] = useLocation();\n  const artistId = parseInt(id || '0');\n\n  const { data: artist, isLoading: artistLoading } = useQuery<Artist>({\n    queryKey: [\"/api/artists\", artistId],\n    enabled: !!artistId,\n  });\n\n  const { data: releases = [], isLoading: releasesLoading } = useQuery<(Release & { artist: Artist; averageRating: number; commentCount: number })[]>({\n    queryKey: [\"/api/releases\", { artistId }],\n    enabled: !!artistId,\n    queryFn: async ({ queryKey }) => {\n      const [, params] = queryKey as [string, { artistId: number }];\n      const response = await fetch(`/api/releases?artistId=${params.artistId}`);\n      if (!response.ok) throw new Error('Failed to fetch releases');\n      return response.json();\n    },\n  });\n\n  const handleReleaseClick = (releaseId: number) => {\n    setLocation(`/release/${releaseId}`);\n  };\n\n  if (artistLoading || releasesLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navbar />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"bg-muted h-8 w-64 rounded mb-8\"></div>\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-6\">\n              {Array.from({ length: 12 }).map((_, i) => (\n                <div key={i}>\n                  <div className=\"bg-muted rounded-lg aspect-square mb-3\"></div>\n                  <div className=\"bg-muted h-4 rounded mb-2\"></div>\n                  <div className=\"bg-muted h-3 rounded w-3/4\"></div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!artist) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navbar />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 flex items-center justify-center\">\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <h1 className=\"text-2xl font-bold text-foreground mb-2\">Artist Not Found</h1>\n              <p className=\"text-muted-foreground\">The artist you're looking for doesn't exist.</p>\n            </CardContent>\n          </Card>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Artist Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-2\" data-testid=\"text-artist-name\">\n            {artist.name}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {releases.length} release{releases.length !== 1 ? 's' : ''}\n          </p>\n        </div>\n\n        {/* Releases Grid */}\n        {releases.length > 0 ? (\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-6\">\n            {releases.map((release: any) => (\n              <ReleaseCard\n                key={release.id}\n                release={release}\n                onClick={() => handleReleaseClick(release.id)}\n              />\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <Music className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Releases</h3>\n              <p className=\"text-muted-foreground\">\n                This artist doesn't have any releases in our database yet.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":4282},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Music, FolderOpen, ArrowRight, Search } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface ReleaseWithDetails {\n  id: number;\n  title: string;\n  coverUrl?: string;\n  releaseDate: string;\n  artist: {\n    name: string;\n  };\n  averageRating: number;\n  commentCount: number;\n}\n\ninterface Collection {\n  id: number;\n  title: string;\n  subtitle?: string;\n  description?: string;\n  releases: ReleaseWithDetails[];\n}\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Fetch featured collections\n  const { data: collections = [], isLoading: collectionsLoading } = useQuery<Collection[]>({\n    queryKey: [\"/api/collections\"],\n    queryFn: async () => {\n      const response = await fetch('/api/collections?activeOnly=true');\n      if (!response.ok) throw new Error('Failed to fetch collections');\n      return response.json();\n    },\n  });\n\n  const handleReleaseClick = (releaseId: number) => {\n    setLocation(`/release/${releaseId}`);\n  };\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      setLocation(`/search?q=${encodeURIComponent(searchQuery.trim())}`);\n    }\n  };\n\n  if (collectionsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navbar />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"space-y-8\">\n            {Array.from({ length: 3 }).map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"bg-muted h-8 w-64 rounded mb-4\"></div>\n                <div className=\"flex space-x-4\">\n                  {Array.from({ length: 6 }).map((_, j) => (\n                    <div key={j} className=\"flex-none w-32\">\n                      <div className=\"bg-muted rounded-lg aspect-square mb-2\"></div>\n                      <div className=\"bg-muted h-4 rounded mb-1\"></div>\n                      <div className=\"bg-muted h-3 rounded w-3/4\"></div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Search Section */}\n        <section className=\"mb-12\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-4\" data-testid=\"text-hero-title\">\n              Найди свою музыку\n            </h1>\n            <p className=\"text-lg text-white/80 mb-8 max-w-2xl mx-auto\" data-testid=\"text-hero-description\">\n              Ищи релизы, исполнителей, читай отзывы и ставь оценки\n            </p>\n          </div>\n          \n          <div className=\"max-w-2xl mx-auto\">\n            <form onSubmit={handleSearch} className=\"relative\">\n              <Input\n                type=\"text\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                placeholder=\"Поиск релизов, исполнителей...\"\n                className=\"w-full pl-12 pr-24 py-6 text-lg text-white bg-background border-2 border-muted focus:border-primary rounded-full shadow-sm focus:shadow-lg transition-all\"\n                data-testid=\"input-search-main\"\n              />\n              <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-6 h-6 text-muted-foreground\" />\n              <Button \n                type=\"submit\"\n                size=\"sm\"\n                className=\"absolute right-2 top-1/2 transform -translate-y-1/2 rounded-full px-6 bg-primary hover:bg-primary/90\"\n                data-testid=\"button-search-main\"\n              >\n                Найти\n              </Button>\n            </form>\n          </div>\n        </section>\n\n        {/* Collections Section */}\n        {collections.length > 0 ? (\n          <section className=\"mb-8\">\n            <div className=\"space-y-12\">\n              {collections.map((collection) => (\n                <div key={collection.id}>\n                  <div className=\"mb-6\">\n                    <h2 className=\"text-3xl font-bold text-white mb-2\">\n                      {collection.title}\n                    </h2>\n                    {(collection.subtitle || collection.description) && (\n                      <p className=\"text-white/70 text-lg\">\n                        {collection.subtitle || collection.description}\n                      </p>\n                    )}\n                  </div>\n\n                  {/* Collection Releases - Horizontal Scroll */}\n                  <div className=\"relative\">\n                    <div className=\"flex space-x-6 overflow-x-auto pb-4 scroll-smooth\" style={{ scrollbarWidth: 'thin' }}>\n                      {collection.releases.slice(0, 5).map((release) => (\n                        <div\n                          key={release.id}\n                          className=\"flex-none w-52 cursor-pointer group\"\n                          onClick={() => handleReleaseClick(release.id)}\n                          data-testid={`collection-release-${collection.id}-${release.id}`}\n                        >\n                          <div className=\"w-52 h-52 rounded-xl overflow-hidden mb-4 bg-muted shadow-lg group-hover:shadow-xl transition-all duration-300\">\n                            {release.coverUrl ? (\n                              <img \n                                src={release.coverUrl} \n                                alt={`${release.title} cover`}\n                                className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-200\"\n                              />\n                            ) : (\n                              <div className=\"w-full h-full bg-muted flex items-center justify-center\">\n                                <Music className=\"w-8 h-8 text-muted-foreground\" />\n                              </div>\n                            )}\n                          </div>\n                          <h4 className=\"font-semibold text-lg text-white truncate\" title={release.title}>\n                            {release.title}\n                          </h4>\n                          <p className=\"text-base text-white/70 truncate\" title={release.artist.name}>\n                            {release.artist.name}\n                          </p>\n                          <div className=\"flex items-center mt-3\">\n                            <span className=\"text-base font-semibold text-primary\">\n                              {release.averageRating && Number(release.averageRating) > 0 \n                                ? Number(release.averageRating).toFixed(1) \n                                : '—'\n                              }\n                            </span>\n                          </div>\n                        </div>\n                      ))}\n                      \n                      {collection.releases.length > 5 && (\n                        <div className=\"flex-none w-52 flex items-center justify-center\">\n                          <div className=\"text-center text-muted-foreground\">\n                            <ArrowRight className=\"w-8 h-8 mx-auto mb-3\" />\n                            <p className=\"text-base font-medium\">\n                              +{collection.releases.length - 5} more\n                            </p>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </section>\n        ) : (\n          <div className=\"text-center py-12\">\n            <FolderOpen className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-white/70\">Контент будет показан здесь после создания подборок в админке.</p>\n          </div>\n        )}\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":8463},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Music, ArrowLeft } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { User, Rating, Comment, Release, Artist } from \"@shared/schema\";\n\nexport default function Profile() {\n  const { id } = useParams<{ id?: string }>();\n  const [, setLocation] = useLocation();\n  const { user: currentUser, isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState<'ratings' | 'reviews'>('ratings');\n\n  // Use current user's ID if no ID provided\n  const profileUserId = id || currentUser?.id;\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Не авторизован\",\n        description: \"Вы вышли из системы. Выполняется вход...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [authLoading, isAuthenticated, toast]);\n\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    enabled: !!profileUserId && isAuthenticated,\n  });\n\n  const { data: userRatings = [] } = useQuery<(Rating & { release: Release & { artist: Artist } })[]>({\n    queryKey: [\"/api/users\", profileUserId, \"ratings\"],\n    enabled: !!profileUserId && activeTab === 'ratings',\n  });\n\n  const { data: userComments = [] } = useQuery<(Comment & { release: Release & { artist: Artist } })[]>({\n    queryKey: [\"/api/users\", profileUserId, \"comments\"],\n    enabled: !!profileUserId && activeTab === 'reviews',\n  });\n\n  if (authLoading || isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navbar />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 flex items-center justify-center\">\n          <div className=\"animate-pulse text-muted-foreground\">Загрузка профиля...</div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navbar />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 flex items-center justify-center\">\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <h1 className=\"text-2xl font-bold text-foreground mb-2\">Пользователь не найден</h1>\n              <p className=\"text-muted-foreground\">Профиль пользователя, который вы ищете, не существует.</p>\n            </CardContent>\n          </Card>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  const userInitials = user.nickname?.substring(0, 2).toUpperCase() || \n                      user.firstName?.substring(0, 2).toUpperCase() || \"U\";\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      \n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card className=\"p-6 md:p-8\">\n          {/* Profile Header */}\n          <div className=\"flex items-center space-x-6 mb-8\">\n            <Avatar className=\"w-16 h-16\">\n              {user.profileImageUrl && (\n                <AvatarImage src={user.profileImageUrl} alt={user.nickname || 'User'} />\n              )}\n              <AvatarFallback className=\"bg-primary text-primary-foreground text-xl font-bold\">\n                {userInitials}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-user-nickname\">\n                {user.nickname || user.firstName || 'User'}\n              </h1>\n              <p className=\"text-muted-foreground\">\n                Присоединился {user.createdAt ? new Date(user.createdAt).toLocaleDateString('ru-RU', { \n                  year: 'numeric', \n                  month: 'long' \n                }) : 'недавно'}\n              </p>\n              <div className=\"flex items-center space-x-4 mt-2\">\n                <span className=\"text-sm text-muted-foreground\">\n                  <span className=\"font-semibold text-foreground\" data-testid=\"text-total-ratings\">\n                    {userRatings.length}\n                  </span> Оценок\n                </span>\n                <span className=\"text-sm text-muted-foreground\">\n                  <span className=\"font-semibold text-foreground\" data-testid=\"text-total-comments\">\n                    {userComments.length}\n                  </span> Отзывов\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Profile Tabs */}\n          <div className=\"border-b border-border mb-6\">\n            <nav className=\"flex space-x-8\">\n              <Button\n                variant=\"ghost\"\n                className={`pb-2 border-b-2 font-medium text-sm ${\n                  activeTab === 'ratings' \n                    ? 'border-primary text-primary' \n                    : 'border-transparent text-muted-foreground hover:text-foreground'\n                }`}\n                onClick={() => setActiveTab('ratings')}\n                data-testid=\"tab-ratings\"\n              >\n                Recent Ratings\n              </Button>\n              <Button\n                variant=\"ghost\"\n                className={`pb-2 border-b-2 font-medium text-sm ${\n                  activeTab === 'reviews' \n                    ? 'border-primary text-primary' \n                    : 'border-transparent text-muted-foreground hover:text-foreground'\n                }`}\n                onClick={() => setActiveTab('reviews')}\n                data-testid=\"tab-reviews\"\n              >\n                Отзывы\n              </Button>\n            </nav>\n          </div>\n\n          {/* Recent Ratings */}\n          {activeTab === 'ratings' && (\n            <div className=\"space-y-4\">\n              {userRatings.map((rating: any) => (\n                <Card \n                  key={rating.id}\n                  className=\"cursor-pointer hover:border-primary/50 transition-colors\"\n                  onClick={() => setLocation(`/release/${rating.release.id}`)}\n                  data-testid={`rating-${rating.id}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-12 h-12 rounded-md overflow-hidden flex-shrink-0\">\n                        {rating.release.coverUrl ? (\n                          <img \n                            src={rating.release.coverUrl} \n                            alt={`${rating.release.title} cover`}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        ) : (\n                          <div className=\"w-full h-full bg-muted flex items-center justify-center\">\n                            <Music className=\"w-4 h-4 text-muted-foreground\" />\n                          </div>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-foreground text-sm\">{rating.release.title}</h4>\n                        <p className=\"text-muted-foreground text-xs\">{rating.release.artist.name}</p>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-sm font-medium text-primary\">{rating.score}/10</span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {new Date(rating.createdAt).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n\n              {userRatings.length === 0 && (\n                <Card>\n                  <CardContent className=\"p-12 text-center\">\n                    <p className=\"text-muted-foreground\">Оценок пока нет.</p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          )}\n\n          {/* Reviews */}\n          {activeTab === 'reviews' && (\n            <div className=\"space-y-4\">\n              {userComments.map((comment: any) => (\n                <Card \n                  key={comment.id}\n                  className=\"cursor-pointer hover:border-primary/50 transition-colors\"\n                  onClick={() => setLocation(`/release/${comment.release.id}`)}\n                  data-testid={`comment-${comment.id}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start space-x-4\">\n                      <div className=\"w-12 h-12 rounded-md overflow-hidden flex-shrink-0\">\n                        {comment.release.coverUrl ? (\n                          <img \n                            src={comment.release.coverUrl} \n                            alt={`${comment.release.title} cover`}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        ) : (\n                          <div className=\"w-full h-full bg-muted flex items-center justify-center\">\n                            <Music className=\"w-4 h-4 text-muted-foreground\" />\n                          </div>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h4 className=\"font-medium text-foreground text-sm\">{comment.release.title}</h4>\n                          {comment.rating && (\n                            <span className=\"text-sm font-medium text-primary\">{comment.rating}/10</span>\n                          )}\n                        </div>\n                        <p className=\"text-muted-foreground text-xs mb-2\">{comment.release.artist.name}</p>\n                        {comment.text && (\n                          <p className=\"text-foreground text-sm leading-relaxed\">{comment.text}</p>\n                        )}\n                        <p className=\"text-xs text-muted-foreground mt-2\">\n                          {new Date(comment.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n\n              {userComments.length === 0 && (\n                <Card>\n                  <CardContent className=\"p-12 text-center\">\n                    <p className=\"text-muted-foreground\">Отзывов пока нет.</p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          )}\n        </Card>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":11344},"client/src/pages/release.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport { StarRating } from \"@/components/release/rating-display\";\nimport { RatingInput } from \"@/components/release/rating-input\";\nimport { CommentBlock } from \"@/components/comments/comment-block\";\nimport { NicknameModal } from \"@/components/modals/nickname-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Music, ExternalLink, ArrowLeft, Star } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useState } from \"react\";\nimport type { Release, Artist, Rating } from \"@shared/schema\";\n\nexport default function Release() {\n  const { id } = useParams<{ id: string }>();\n  const [, setLocation] = useLocation();\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showNicknameModal, setShowNicknameModal] = useState(false);\n  const releaseId = parseInt(id || '0');\n\n  const { data: release, isLoading } = useQuery<Release & { artist: Artist; averageRating: number; commentCount: number }>({\n    queryKey: [`/api/releases/${releaseId}`],\n    enabled: !!releaseId,\n  });\n\n  useEffect(() => {\n    if (isAuthenticated && !authLoading && user && !user.nickname) {\n      setShowNicknameModal(true);\n    }\n  }, [isAuthenticated, authLoading, user]);\n\n\n  if (authLoading || isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navbar />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 flex items-center justify-center\">\n          <div className=\"animate-pulse text-muted-foreground\">Загружаем релиз...</div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!release) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navbar />\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 flex items-center justify-center\">\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <h1 className=\"text-2xl font-bold text-foreground mb-2\">Релиз не найден</h1>\n              <p className=\"text-muted-foreground\">Релиз, который вы ищете, не существует.</p>\n            </CardContent>\n          </Card>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  const streamingLinks = release.streamingLinks as { spotify?: string; appleMusic?: string } || {};\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Release Header Info */}\n        <Card className=\"p-6 md:p-8 mb-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 items-start\">\n            {/* Cover */}\n            <div className=\"md:col-span-1\">\n              <div className=\"aspect-square overflow-hidden rounded-xl max-w-[200px] mx-auto md:mx-0\">\n                {release.coverUrl ? (\n                  <img \n                    src={release.coverUrl} \n                    alt={`${release.title} cover`}\n                    className=\"w-full h-full object-cover shadow-lg\"\n                    data-testid=\"img-release-cover\"\n                  />\n                ) : (\n                  <div className=\"w-full h-full bg-muted flex items-center justify-center rounded-xl\">\n                    <Music className=\"w-16 h-16 text-muted-foreground\" />\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Release Info */}\n            <div className=\"md:col-span-2 space-y-4\">\n              <div>\n                <div className=\"flex items-center gap-2 mb-2 flex-wrap\">\n                  <h1 className=\"text-3xl md:text-4xl font-bold text-foreground\" data-testid=\"text-release-title\">\n                    {release.title}\n                  </h1>\n                  <span className=\"px-3 py-1 text-sm font-medium bg-primary/10 text-primary rounded-full\" data-testid=\"badge-type\">\n                    {(release as any).type === 'single' ? 'Сингл' : 'Альбом'}\n                  </span>\n                </div>\n                <button\n                  onClick={() => setLocation(`/artist/${release.artist.id}`)}\n                  className=\"text-xl text-primary hover:text-primary/80 transition-colors block mb-1\"\n                  data-testid=\"link-artist\"\n                >\n                  {release.artist.name}\n                </button>\n                <p className=\"text-muted-foreground\">\n                  Выпущен {release.releaseDate ? new Date(release.releaseDate).toLocaleDateString('ru-RU') : 'Неизвестно'}\n                </p>\n              </div>\n\n              {/* Streaming Links */}\n              {(streamingLinks.spotify || streamingLinks.appleMusic) && (\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-sm font-semibold text-foreground\">Слушать на</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {streamingLinks.spotify && (\n                      <Button\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        asChild\n                        data-testid=\"link-spotify\"\n                      >\n                        <a href={streamingLinks.spotify} target=\"_blank\" rel=\"noopener noreferrer\">\n                          <ExternalLink className=\"w-4 h-4 mr-2\" />\n                          Spotify\n                        </a>\n                      </Button>\n                    )}\n                    {streamingLinks.appleMusic && (\n                      <Button\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        asChild\n                        data-testid=\"link-apple-music\"\n                      >\n                        <a href={streamingLinks.appleMusic} target=\"_blank\" rel=\"noopener noreferrer\">\n                          <ExternalLink className=\"w-4 h-4 mr-2\" />\n                          Apple Music\n                        </a>\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Rating */}\n            <div className=\"md:col-span-1\">\n              <div className=\"text-center md:text-left\">\n                <h3 className=\"text-sm font-semibold text-foreground mb-2\">Рейтинг сообщества</h3>\n                <div className=\"space-y-1\">\n                  <span className=\"text-4xl font-bold text-primary block\" data-testid=\"text-average-rating\">\n                    {release.averageRating && Number(release.averageRating) > 0 ? Number(release.averageRating).toFixed(1) : '—'}\n                  </span>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {release.commentCount > 0 ? `На основе ${release.commentCount} оценок` : 'Пока нет оценок'}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        {/* Comments Section */}\n        <Card className=\"p-6 md:p-8\">\n          <CommentBlock\n            releaseId={releaseId}\n            isAuthenticated={isAuthenticated}\n            currentUserId={user?.id}\n          />\n        </Card>\n      </main>\n\n      <Footer />\n      \n      {/* Nickname Modal */}\n      <NicknameModal\n        open={showNicknameModal}\n        onClose={() => setShowNicknameModal(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":7984},"client/src/pages/search.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\nimport { ReleaseCard } from \"@/components/release/release-card\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Music, Search as SearchIcon, ArrowUpDown } from \"lucide-react\";\n\nexport default function Search() {\n  const [location, setLocation] = useLocation();\n  const [query, setQuery] = useState(\"\");\n  const [sortBy, setSortBy] = useState<string>(\"\");\n  \n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const q = urlParams.get('q');\n    const sort = urlParams.get('sortBy');\n    if (q) {\n      setQuery(q);\n    }\n    if (sort) {\n      setSortBy(sort);\n    }\n  }, [location]);\n\n  const { data: releaseResults = [], isLoading: isLoadingReleases } = useQuery({\n    queryKey: [\"/api/search\", { q: query, sortBy }],\n    enabled: query.length > 2,\n    queryFn: async ({ queryKey }) => {\n      const [, params] = queryKey as [string, { q: string; sortBy: string }];\n      const url = new URL('/api/search', window.location.origin);\n      url.searchParams.set('q', params.q);\n      if (params.sortBy) {\n        url.searchParams.set('sortBy', params.sortBy);\n      }\n      const response = await fetch(url.toString());\n      if (!response.ok) throw new Error('Search failed');\n      return response.json();\n    },\n  });\n\n  const { data: artistResults = [], isLoading: isLoadingArtists } = useQuery({\n    queryKey: [\"/api/search/artists\", { q: query }],\n    enabled: query.length > 2,\n    queryFn: async ({ queryKey }) => {\n      const [, params] = queryKey as [string, { q: string }];\n      const response = await fetch(`/api/search/artists?q=${encodeURIComponent(params.q)}`);\n      if (!response.ok) throw new Error('Artist search failed');\n      return response.json();\n    },\n  });\n\n  const isLoading = isLoadingReleases || isLoadingArtists;\n\n  const handleReleaseClick = (releaseId: number) => {\n    setLocation(`/release/${releaseId}`);\n  };\n\n  const handleArtistClick = (artistId: number) => {\n    setLocation(`/artist/${artistId}`);\n  };\n\n  const handleSearch = (searchQuery: string) => {\n    setQuery(searchQuery);\n    setLocation(`/search?q=${encodeURIComponent(searchQuery)}`);\n  };\n\n  const handleSortChange = (newSortBy: string) => {\n    setSortBy(newSortBy);\n    const url = new URL(window.location.href);\n    if (newSortBy) {\n      url.searchParams.set('sortBy', newSortBy);\n    } else {\n      url.searchParams.delete('sortBy');\n    }\n    setLocation(url.pathname + url.search);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n\n        {/* Search Results */}\n        {query.length > 2 ? (\n          <div className=\"space-y-8\">\n            <h2 className=\"text-xl font-semibold text-white mb-6\">\n              {isLoading ? 'Ищем...' : `Результаты поиска для \"${query}\"`}\n              {!isLoading && (artistResults.length + releaseResults.length) > 0 && (\n                <span className=\"text-white/70 ml-2\">({artistResults.length + releaseResults.length} найдено)</span>\n              )}\n            </h2>\n\n            {isLoading ? (\n              <div className=\"space-y-8\">\n                {/* Artists Loading */}\n                <section>\n                  <h3 className=\"text-lg font-semibold text-white mb-4\">Артисты</h3>\n                  <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-6\">\n                    {Array.from({ length: 6 }).map((_, i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"bg-muted rounded-lg aspect-square mb-3\"></div>\n                        <div className=\"bg-muted h-4 rounded mb-2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                </section>\n\n                {/* Releases Loading */}\n                <section>\n                  <h3 className=\"text-lg font-semibold text-white mb-4\">Релизы</h3>\n                  <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-6\">\n                    {Array.from({ length: 6 }).map((_, i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"bg-muted rounded-lg aspect-square mb-3\"></div>\n                        <div className=\"bg-muted h-4 rounded mb-2\"></div>\n                        <div className=\"bg-muted h-3 rounded w-3/4\"></div>\n                      </div>\n                    ))}\n                  </div>\n                </section>\n              </div>\n            ) : (artistResults.length > 0 || releaseResults.length > 0) ? (\n              <div className=\"space-y-8\">\n                {/* Artists Section */}\n                {artistResults.length > 0 && (\n                  <section>\n                    <h3 className=\"text-lg font-semibold text-white mb-4 flex items-center gap-2\">\n                      <Music className=\"w-5 h-5\" />\n                      Артисты ({artistResults.length})\n                    </h3>\n                    <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-6\">\n                      {artistResults.map((artist: any) => (\n                        <div\n                          key={artist.id}\n                          onClick={() => handleArtistClick(artist.id)}\n                          className=\"group cursor-pointer transition-all duration-300 hover:scale-105\"\n                          data-testid={`card-artist-${artist.id}`}\n                        >\n                          <div className=\"relative aspect-square rounded-lg overflow-hidden mb-3 bg-muted\">\n                            {artist.latestReleaseCover ? (\n                              <img\n                                src={artist.latestReleaseCover}\n                                alt={artist.name}\n                                className=\"w-full h-full object-cover transition-transform duration-300 group-hover:scale-110\"\n                              />\n                            ) : (\n                              <div className=\"w-full h-full flex items-center justify-center bg-gradient-to-br from-primary/20 to-accent/20\">\n                                <Music className=\"w-8 h-8 text-white/50\" />\n                              </div>\n                            )}\n                          </div>\n                          <h4 className=\"font-medium text-white truncate group-hover:text-primary transition-colors\" data-testid={`text-artist-name-${artist.id}`}>\n                            {artist.name}\n                          </h4>\n                        </div>\n                      ))}\n                    </div>\n                  </section>\n                )}\n\n                {/* Releases Section */}\n                {releaseResults.length > 0 && (\n                  <section>\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"text-lg font-semibold text-white flex items-center gap-2\">\n                        <SearchIcon className=\"w-5 h-5\" />\n                        Релизы ({releaseResults.length})\n                      </h3>\n                      <div className=\"flex items-center gap-2\">\n                        <ArrowUpDown className=\"w-4 h-4 text-muted-foreground\" />\n                        <Select value={sortBy} onValueChange={handleSortChange}>\n                          <SelectTrigger className=\"w-40 bg-muted border-border\" data-testid=\"select-sort\">\n                            <SelectValue placeholder=\"Сортировка\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"\" data-testid=\"sort-default\">\n                              По умолчанию\n                            </SelectItem>\n                            <SelectItem value=\"date_desc\" data-testid=\"sort-date-desc\">\n                              Новые релизы\n                            </SelectItem>\n                            <SelectItem value=\"date_asc\" data-testid=\"sort-date-asc\">\n                              Старые релизы\n                            </SelectItem>\n                            <SelectItem value=\"rating_desc\" data-testid=\"sort-rating-desc\">\n                              Высокий рейтинг\n                            </SelectItem>\n                            <SelectItem value=\"rating_asc\" data-testid=\"sort-rating-asc\">\n                              Низкий рейтинг\n                            </SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-6\">\n                      {releaseResults.map((release: any) => (\n                        <ReleaseCard\n                          key={release.id}\n                          release={release}\n                          onClick={() => handleReleaseClick(release.id)}\n                        />\n                      ))}\n                    </div>\n                  </section>\n                )}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"p-12 text-center\">\n                  <SearchIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-white mb-2\">Ничего не найдено</h3>\n                  <p className=\"text-white/70\">\n                    Мы не смогли найти артистов или релизы, соответствующие \"{query}\". Попробуйте другие ключевые слова или проверьте правописание.\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <SearchIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-white mb-2\">Начните поиск</h3>\n              <p className=\"text-white/70\">\n                Введите минимум 3 символа для поиска альбомов, артистов или песен.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":10952},"client/src/components/comments/comment-block.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { CommentItem } from \"./comment-item\";\nimport { CommentForm } from \"./comment-form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\nimport { Edit } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface CommentBlockProps {\n  releaseId: number;\n  isAuthenticated: boolean;\n  currentUserId?: string;\n}\n\nexport function CommentBlock({ releaseId, isAuthenticated, currentUserId }: CommentBlockProps) {\n  const [sortBy, setSortBy] = useState<'date' | 'rating' | 'likes'>('date');\n  const [isEditing, setIsEditing] = useState(false);\n  const { user } = useAuth();\n\n  const { data: comments = [], isLoading } = useQuery({\n    queryKey: [\"/api/releases\", releaseId, \"comments\", { sortBy }],\n    queryFn: async ({ queryKey }) => {\n      const [, releaseId, , params] = queryKey as [string, number, string, { sortBy: string }];\n      const response = await fetch(`/api/releases/${releaseId}/comments?sortBy=${params.sortBy}`);\n      if (!response.ok) throw new Error('Failed to fetch comments');\n      return response.json();\n    },\n  });\n\n  // Find current user's comment with rating\n  const userComment = comments.find((comment: any) => \n    comment.userId === user?.id && comment.rating !== null\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        {Array.from({ length: 3 }).map((_, i) => (\n          <div key={i} className=\"animate-pulse\">\n            <div className=\"bg-muted rounded-lg p-4 h-24\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Comments Filter */}\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-foreground\">\n          Отзывы и комментарии ({comments.length})\n        </h3>\n        <Select value={sortBy} onValueChange={(value: any) => setSortBy(value)}>\n          <SelectTrigger className=\"w-40\" data-testid=\"select-sort\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"date\">По дате</SelectItem>\n            <SelectItem value=\"rating\">По рейтингу</SelectItem>\n            <SelectItem value=\"likes\">По лайкам</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Rating Section */}\n      {isAuthenticated && (\n        <Card>\n          <CardContent className=\"p-6\">\n            {userComment && !isEditing ? (\n              // Show existing rating\n              <div>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold text-foreground\">Ваша оценка</h3>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setIsEditing(true)}\n                    data-testid=\"button-edit-rating\"\n                  >\n                    <Edit className=\"w-4 h-4 mr-2\" />\n                    Редактировать\n                  </Button>\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-xl font-bold text-primary\">{userComment.rating}/10</span>\n                    {userComment.updatedAt !== userComment.createdAt && (\n                      <span className=\"text-xs text-muted-foreground bg-muted px-2 py-1 rounded\">\n                        отредактировано\n                      </span>\n                    )}\n                  </div>\n                  {userComment.text && (\n                    <div className=\"p-3 bg-muted rounded-lg\">\n                      <p className=\"text-sm\">{userComment.text}</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ) : (\n              // Show rating form\n              <div>\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n                  {userComment ? \"Редактировать оценку\" : \"Оценить релиз\"}\n                </h3>\n                <CommentForm \n                  releaseId={releaseId}\n                  initialData={userComment ? {\n                    id: userComment.id,\n                    text: userComment.text,\n                    rating: userComment.rating,\n                    isAnonymous: userComment.isAnonymous\n                  } : undefined}\n                  mode={userComment ? 'edit' : 'create'}\n                  onSuccess={() => {\n                    setIsEditing(false);\n                  }}\n                />\n                {isEditing && (\n                  <Button\n                    variant=\"outline\"\n                    className=\"mt-3\"\n                    onClick={() => setIsEditing(false)}\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    Отмена\n                  </Button>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Comments List */}\n      <div className=\"space-y-4\">\n        {comments.map((comment: any) => (\n          <CommentItem\n            key={comment.id}\n            comment={comment}\n            currentUserId={currentUserId}\n          />\n        ))}\n\n        {comments.length === 0 && (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <p className=\"text-muted-foreground\">\n                Пока нет комментариев. {isAuthenticated ? \"Будьте первым, кто поделится впечатлениями!\" : \"Войдите, чтобы оставить комментарий.\"}\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6033},"client/src/components/comments/comment-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { RatingInput } from \"../release/rating-input\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface CommentFormProps {\n  releaseId: number;\n  initialData?: {\n    id?: number;\n    text?: string;\n    rating?: number;\n    isAnonymous?: boolean;\n  };\n  mode?: 'create' | 'edit';\n  onSuccess?: () => void;\n}\n\nexport function CommentForm({ \n  releaseId,\n  initialData,\n  mode = 'create',\n  onSuccess\n}: CommentFormProps) {\n  const [text, setText] = useState(initialData?.text || \"\");\n  const [rating, setRating] = useState(initialData?.rating || 0);\n  const [isAnonymous, setIsAnonymous] = useState(initialData?.isAnonymous || false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n\n  // Check if user already has a comment for this release\n  const { data: existingComments = [] } = useQuery({\n    queryKey: [\"/api/releases\", releaseId, \"comments\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/releases/${releaseId}/comments`);\n      if (!response.ok) throw new Error('Failed to fetch comments');\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  const existingUserComment = existingComments.find((comment: any) => \n    comment.userId === user?.id && comment.rating !== null\n  );\n\n  useEffect(() => {\n    if (existingUserComment && mode === 'create') {\n      setRating(existingUserComment.rating || 0);\n    }\n  }, [existingUserComment, mode]);\n\n  const commentMutation = useMutation({\n    mutationFn: async (data: { text?: string; rating?: number; isAnonymous: boolean }) => {\n      if (mode === 'edit' && initialData?.id) {\n        await apiRequest('PUT', `/api/comments/${initialData.id}`, data);\n      } else {\n        await apiRequest('POST', `/api/releases/${releaseId}/comments`, data);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/releases\", releaseId, \"comments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/releases\", releaseId] });\n      \n      if (mode === 'create') {\n        setText(\"\");\n        setRating(0);\n        setIsAnonymous(false);\n      }\n      \n      onSuccess?.();\n      toast({ title: \"Комментарий отправлен!\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Не авторизован\",\n          description: \"Вы не авторизованы. Выполняется вход...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      if (error.message.includes(\"already rated\")) {\n        toast({ \n          title: \"Вы уже оценили этот релиз\", \n          description: \"Каждый пользователь может поставить только одну оценку\",\n          variant: \"destructive\" \n        });\n      } else {\n        toast({ \n          title: \"Ошибка при отправке комментария\", \n          description: error.message,\n          variant: \"destructive\" \n        });\n      }\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!text.trim() && rating === 0) {\n      toast({\n        title: \"Добавьте оценку или комментарий\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    commentMutation.mutate({\n      text: text.trim() || undefined,\n      rating: rating > 0 ? rating : undefined,\n      isAnonymous,\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      {existingUserComment && (\n        <div className=\"p-3 bg-muted rounded-lg\">\n          <p className=\"text-sm text-muted-foreground\">\n            Ваша текущая оценка: <strong>{existingUserComment.rating}/10</strong>\n            {existingUserComment.text && (\n              <>\n                <br />\n                Ваш отзыв: \"{existingUserComment.text}\"\n              </>\n            )}\n          </p>\n        </div>\n      )}\n      \n      <RatingInput\n        rating={rating}\n        onRatingChange={setRating}\n        maxRating={10}\n        size=\"lg\"\n        label={existingUserComment ? \"Изменить оценку\" : \"Ваша оценка\"}\n      />\n\n      <div>\n        <Label htmlFor=\"comment-text\" className=\"text-sm font-medium text-foreground mb-2 block\">\n          Добавить отзыв (необязательно)\n        </Label>\n        <Textarea\n          id=\"comment-text\"\n          placeholder=\"Поделитесь своими мыслями об этом релизе...\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          className=\"resize-none min-h-20\"\n          maxLength={1000}\n          data-testid=\"textarea-comment\"\n        />\n        <div className=\"flex justify-between items-center mt-2\">\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"anonymous\"\n              checked={isAnonymous}\n              onCheckedChange={(checked) => setIsAnonymous(!!checked)}\n              data-testid=\"checkbox-anonymous\"\n            />\n            <Label htmlFor=\"anonymous\" className=\"text-sm text-muted-foreground\">\n              Опубликовать анонимно\n            </Label>\n          </div>\n          <span className=\"text-xs text-muted-foreground\" data-testid=\"text-char-count\">\n            {text.length}/1000\n          </span>\n        </div>\n      </div>\n\n      <Button\n        type=\"submit\"\n        disabled={commentMutation.isPending || (!text.trim() && rating === 0)}\n        className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n        data-testid=\"button-submit\"\n      >\n        {commentMutation.isPending ? \"Отправляем...\" : mode === 'edit' ? \"Обновить\" : \"Отправить\"}\n      </Button>\n    </form>\n  );\n}\n","size_bytes":6418},"client/src/components/comments/comment-item.tsx":{"content":"import { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { ThumbsUp, ThumbsDown, Flag, Edit, Trash2, User } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface CommentItemProps {\n  comment: {\n    id: number;\n    text?: string;\n    rating?: number;\n    isAnonymous: boolean;\n    createdAt: string;\n    user: {\n      id: string;\n      nickname: string;\n    } | null;\n    likeCount: number;\n    dislikeCount: number;\n    userReaction?: 'like' | 'dislike';\n  };\n  currentUserId?: string;\n  className?: string;\n}\n\nexport function CommentItem({\n  comment,\n  currentUserId,\n  className,\n}: CommentItemProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const isOwner = currentUserId && comment.user?.id === currentUserId;\n  const displayName = comment.isAnonymous ? \"Аноним\" : comment.user?.nickname || \"Неизвестный\";\n\n  const reactionMutation = useMutation({\n    mutationFn: async ({ reactionType }: { reactionType: 'like' | 'dislike' }) => {\n      if (comment.userReaction === reactionType) {\n        await apiRequest('DELETE', `/api/comments/${comment.id}/react`);\n      } else {\n        await apiRequest('POST', `/api/comments/${comment.id}/react`, { reactionType });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/releases\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ \n        title: \"Failed to react to comment\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const reportMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest('POST', `/api/comments/${comment.id}/report`, { \n        reason: 'Inappropriate content' \n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"Жалоба отправлена\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Не авторизован\",\n          description: \"Вы не авторизованы. Выполняется вход...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ \n        title: \"Ошибка отправки жалобы\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest('DELETE', `/api/comments/${comment.id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/releases\"] });\n      toast({ title: \"Comment deleted successfully\" });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ \n        title: \"Failed to delete comment\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  return (\n    <div className={cn(\"bg-secondary rounded-lg p-4\", className)} data-testid={`comment-${comment.id}`}>\n      <div className=\"flex items-start space-x-4\">\n        <div className=\"w-10 h-10 flex-shrink-0 bg-primary/10 rounded-full flex items-center justify-center\">\n          <User className=\"w-5 h-5 text-primary\" />\n        </div>\n        \n        <div className=\"flex-1\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <span className=\"font-medium text-foreground text-sm\" data-testid=\"text-author\">\n              {displayName}\n            </span>\n            {comment.rating && (\n              <span className=\"text-sm font-medium text-primary\" data-testid=\"comment-rating\">\n                {comment.rating}/10\n              </span>\n            )}\n            <span className=\"text-xs text-muted-foreground\" data-testid=\"text-date\">\n              {formatDistanceToNow(new Date(comment.createdAt), { addSuffix: true })}\n            </span>\n          </div>\n          \n          {comment.text && (\n            <p className=\"text-foreground text-sm leading-relaxed mb-3\" data-testid=\"text-content\">\n              {comment.text}\n            </p>\n          )}\n          \n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"flex items-center space-x-1 text-xs h-auto p-1\",\n                comment.userReaction === 'like' && \"text-primary\"\n              )}\n              onClick={() => reactionMutation.mutate({ reactionType: 'like' })}\n              disabled={reactionMutation.isPending}\n              data-testid=\"button-like\"\n            >\n              <ThumbsUp className=\"w-3 h-3\" />\n              <span data-testid=\"text-like-count\">{comment.likeCount}</span>\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"flex items-center space-x-1 text-xs h-auto p-1\",\n                comment.userReaction === 'dislike' && \"text-destructive\"\n              )}\n              onClick={() => reactionMutation.mutate({ reactionType: 'dislike' })}\n              disabled={reactionMutation.isPending}\n              data-testid=\"button-dislike\"\n            >\n              <ThumbsDown className=\"w-3 h-3\" />\n              <span data-testid=\"text-dislike-count\">{comment.dislikeCount}</span>\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-xs text-muted-foreground hover:text-red-600 h-auto p-1\"\n              onClick={() => reportMutation.mutate()}\n              disabled={reportMutation.isPending}\n              data-testid=\"button-report\"\n              title=\"Пожаловаться\"\n            >\n              <Flag className=\"w-3 h-3\" />\n            </Button>\n            \n            {isOwner && (\n              <div className=\"ml-auto flex items-center space-x-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-xs text-destructive hover:text-destructive/80 h-auto p-1\"\n                  onClick={() => deleteMutation.mutate()}\n                  disabled={deleteMutation.isPending}\n                  data-testid=\"button-delete\"\n                >\n                  <Trash2 className=\"w-3 h-3 mr-1\" />\n                  Delete\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7314},"client/src/components/layout/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Music } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-card border-t border-border mt-12\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <div className=\"md:col-span-1\">\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-accent rounded-lg flex items-center justify-center\">\n                <Music className=\"w-4 h-4 text-primary-foreground\" />\n              </div>\n              <span className=\"text-xl font-bold text-foreground\">RevYou</span>\n            </div>\n            <p className=\"text-muted-foreground text-sm\">\n              Современная платформа для оценки и обсуждения музыкальных релизов.\n            </p>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold text-foreground mb-3 text-sm\">Explore</h3>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li>\n                <Link href=\"/\" className=\"hover:text-foreground transition-colors\">\n                  New Releases\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/search\" className=\"hover:text-foreground transition-colors\">\n                  Search\n                </Link>\n              </li>\n              <li>\n                <span className=\"hover:text-foreground transition-colors cursor-pointer\">Top Rated</span>\n              </li>\n              <li>\n                <span className=\"hover:text-foreground transition-colors cursor-pointer\">Genres</span>\n              </li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold text-foreground mb-3 text-sm\">Community</h3>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li><span className=\"hover:text-foreground transition-colors cursor-pointer\">Guidelines</span></li>\n              <li><span className=\"hover:text-foreground transition-colors cursor-pointer\">Support</span></li>\n              <li><span className=\"hover:text-foreground transition-colors cursor-pointer\">Contact</span></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"font-semibold text-foreground mb-3 text-sm\">Connect</h3>\n            <div className=\"flex space-x-3\">\n              <i className=\"fab fa-twitter text-muted-foreground hover:text-primary transition-colors cursor-pointer\" />\n              <i className=\"fab fa-instagram text-muted-foreground hover:text-primary transition-colors cursor-pointer\" />\n              <i className=\"fab fa-discord text-muted-foreground hover:text-primary transition-colors cursor-pointer\" />\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"mt-8 pt-6 border-t border-border text-center\">\n          <p className=\"text-muted-foreground text-xs\">\n            © 2024 MusicReview. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3185},"client/src/components/layout/navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Music, Search, User, Settings, Shield, LogOut } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\nexport default function Navbar() {\n  const { user, isAuthenticated } = useAuth();\n  const [location, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  \n  // Hide search on homepage since it has its own search block\n  const isHomePage = location === \"/\";\n\n  // Sync search query with URL parameters\n  useEffect(() => {\n    if (location.startsWith('/search')) {\n      const urlParams = new URLSearchParams(window.location.search);\n      const q = urlParams.get('q');\n      if (q) {\n        setSearchQuery(q);\n      } else {\n        setSearchQuery(\"\");\n      }\n    } else {\n      setSearchQuery(\"\");\n    }\n  }, [location]);\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      setLocation(`/search?q=${encodeURIComponent(searchQuery.trim())}`);\n    }\n  };\n\n  const handleSignOut = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const userInitials = user?.nickname?.substring(0, 2).toUpperCase() || \n                      user?.firstName?.substring(0, 2).toUpperCase() || \"U\";\n\n  return (\n    <nav className=\"sticky top-0 z-50 bg-background/90 backdrop-blur-md border-b border-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-accent rounded-lg flex items-center justify-center\">\n              <Music className=\"w-4 h-4 text-primary-foreground\" />\n            </div>\n            <span className=\"text-xl font-bold text-foreground\">RevYou</span>\n          </Link>\n\n          {/* Search Bar - Hidden on homepage */}\n          {!isHomePage && (\n            <div className=\"hidden md:flex flex-1 max-w-md mx-8\">\n              <form onSubmit={handleSearch} className=\"relative w-full\">\n                <Input\n                  type=\"text\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Поиск релизов, исполнителей...\"\n                  className=\"pl-10 bg-input border-border focus:ring-2 focus:ring-ring text-white\"\n                  data-testid=\"input-search\"\n                />\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n              </form>\n            </div>\n          )}\n\n          {/* User Menu */}\n          <div className=\"flex items-center space-x-4\">\n            {isAuthenticated ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"flex items-center space-x-2\" data-testid=\"button-user-menu\">\n                    <Avatar className=\"w-8 h-8\">\n                      {user?.profileImageUrl && (\n                        <AvatarImage src={user.profileImageUrl} alt={user.nickname || 'User'} />\n                      )}\n                      <AvatarFallback className=\"bg-primary text-primary-foreground text-sm\">\n                        {userInitials}\n                      </AvatarFallback>\n                    </Avatar>\n                    <span className=\"hidden sm:inline text-sm font-medium text-white\" data-testid=\"text-username\">\n                      {user?.nickname || user?.firstName || 'User'}\n                    </span>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem onClick={() => setLocation(`/profile/${user?.id}`)} data-testid=\"button-profile\">\n                      <User className=\"w-4 h-4 mr-2\" />\n                      Профиль\n                  </DropdownMenuItem>\n                  {user?.isAdmin && (\n                    <DropdownMenuItem onClick={() => setLocation(\"/admin\")} data-testid=\"button-admin\">\n                        <Shield className=\"w-4 h-4 mr-2\" />\n                        Админ панель\n                    </DropdownMenuItem>\n                  )}\n                  <DropdownMenuItem onClick={handleSignOut} data-testid=\"button-signout\">\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Выйти\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <Button \n                onClick={() => window.location.href = \"/api/login\"}\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                data-testid=\"button-signin\"\n              >\n                Войти\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Search - Hidden on homepage */}\n      {!isHomePage && (\n        <div className=\"md:hidden px-4 py-3 border-b border-border\">\n          <form onSubmit={handleSearch} className=\"relative\">\n            <Input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"Поиск музыки...\"\n              className=\"pl-10 bg-input border-border text-white\"\n              data-testid=\"input-search-mobile\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          </form>\n        </div>\n      )}\n    </nav>\n  );\n}\n","size_bytes":6012},"client/src/components/modals/nickname-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Music } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface NicknameModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport function NicknameModal({ open, onClose }: NicknameModalProps) {\n  const [nickname, setNickname] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const nicknameMutation = useMutation({\n    mutationFn: async (nickname: string) => {\n      await apiRequest('POST', '/api/auth/nickname', { nickname });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      onClose();\n      toast({ title: \"Welcome to MusicReview!\" });\n    },\n    onError: (error) => {\n      toast({ \n        title: \"Failed to set nickname\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (nickname.length < 3 || nickname.length > 20) {\n      toast({\n        title: \"Invalid nickname\",\n        description: \"Nickname must be 3-20 characters\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    nicknameMutation.mutate(nickname);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={() => {}}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-accent rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Music className=\"w-8 h-8 text-primary-foreground\" />\n          </div>\n          <DialogTitle className=\"text-center text-2xl font-bold\">Choose Your Nickname</DialogTitle>\n          <p className=\"text-center text-muted-foreground text-sm\">\n            This will be your display name in the community\n          </p>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"nickname\">Nickname</Label>\n            <Input\n              id=\"nickname\"\n              value={nickname}\n              onChange={(e) => setNickname(e.target.value)}\n              placeholder=\"Enter unique nickname\"\n              maxLength={20}\n              required\n              data-testid=\"input-nickname\"\n            />\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Must be unique and 3-20 characters\n            </p>\n          </div>\n\n          <Button\n            type=\"submit\"\n            disabled={nicknameMutation.isPending || nickname.length < 3}\n            className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n            data-testid=\"button-complete\"\n          >\n            {nicknameMutation.isPending ? \"Setting up...\" : \"Complete Registration\"}\n          </Button>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3213},"client/src/components/release/rating-display.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface StarRatingProps {\n  rating: number;\n  maxRating?: number;\n  size?: \"sm\" | \"md\" | \"lg\";\n  showValue?: boolean;\n  className?: string;\n}\n\nexport function StarRating({\n  rating,\n  maxRating = 10,\n  size = \"md\",\n  showValue = false,\n  className,\n}: StarRatingProps) {\n  const sizeClasses = {\n    sm: \"w-3 h-3\",\n    md: \"w-4 h-4\",\n    lg: \"w-5 h-5\",\n  };\n\n  // Always show 10 stars for 10-point scale\n  const displayStars = maxRating;\n  const numericRating = Number(rating || 0);\n  \n  return (\n    <div className={cn(\"flex items-center\", className)} data-testid=\"rating-display\">\n      <span className=\"text-sm font-medium text-primary\" data-testid=\"rating-value\">\n        {rating && Number(rating) > 0 ? Number(rating).toFixed(1) : '—'}\n      </span>\n    </div>\n  );\n}\n","size_bytes":811},"client/src/components/release/rating-input.tsx":{"content":"import { Star } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface RatingInputProps {\n  rating: number;\n  onRatingChange: (rating: number) => void;\n  maxRating?: number;\n  size?: \"sm\" | \"md\" | \"lg\";\n  label?: string;\n  className?: string;\n}\n\nexport function RatingInput({\n  rating,\n  onRatingChange,\n  maxRating = 10,\n  size = \"lg\",\n  label = \"Ваша оценка\",\n  className,\n}: RatingInputProps) {\n  return (\n    <div className={cn(\"space-y-2\", className)}>\n      {label && (\n        <Label className=\"text-sm font-medium text-foreground\">{label}</Label>\n      )}\n      <div className=\"flex items-center gap-2\" data-testid=\"rating-input\">\n        {Array.from({ length: maxRating }, (_, index) => {\n          const ratingNumber = index + 1;\n          const isSelected = ratingNumber === rating;\n          \n          return (\n            <button\n              key={index}\n              type=\"button\"\n              className={cn(\n                \"w-8 h-8 rounded-md text-sm font-medium transition-colors border\",\n                isSelected \n                  ? \"bg-primary text-primary-foreground border-primary\" \n                  : \"bg-background text-foreground border-border hover:bg-secondary hover:border-secondary-foreground/20\"\n              )}\n              onClick={() => onRatingChange(ratingNumber)}\n              data-testid={`rating-input-${ratingNumber}`}\n            >\n              {ratingNumber}\n            </button>\n          );\n        })}\n        <span className=\"text-sm text-muted-foreground ml-2\" data-testid=\"rating-value\">\n          {rating > 0 ? `${rating}/10` : \"Оценить релиз\"}\n        </span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1732},"client/src/components/release/release-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { StarRating } from \"./rating-display\";\nimport { MessageCircle, Music } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ReleaseCardProps {\n  release: {\n    id: number;\n    title: string;\n    coverUrl?: string;\n    artist: {\n      name: string;\n    };\n    averageRating: number;\n    commentCount: number;\n  };\n  onClick?: () => void;\n  className?: string;\n}\n\nexport function ReleaseCard({ release, onClick, className }: ReleaseCardProps) {\n  return (\n    <Card \n      className={cn(\n        \"group cursor-pointer transition-all duration-300 hover:border-primary/50 hover:shadow-lg hover:shadow-primary/10\",\n        className\n      )}\n      onClick={onClick}\n      data-testid={`release-card-${release.id}`}\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"aspect-square mb-3 overflow-hidden rounded-md\">\n          {release.coverUrl ? (\n            <img \n              src={release.coverUrl} \n              alt={`${release.title} cover`}\n              className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n              data-testid=\"img-cover\"\n            />\n          ) : (\n            <div className=\"w-full h-full bg-muted flex items-center justify-center rounded-md\">\n              <Music className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n          )}\n        </div>\n        \n        <h3 className=\"font-semibold text-foreground text-sm mb-1 truncate\" data-testid=\"text-title\">\n          {release.title}\n        </h3>\n        <p className=\"text-muted-foreground text-xs mb-2 truncate\" data-testid=\"text-artist\">\n          {release.artist.name}\n        </p>\n        \n        <div className=\"flex items-center justify-between\">\n          <StarRating \n            rating={release.averageRating} \n            maxRating={5} \n            size=\"sm\"\n            showValue\n            data-testid=\"rating-display\"\n          />\n          <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n            <MessageCircle className=\"w-3 h-3\" />\n            <span data-testid=\"text-comment-count\">{release.commentCount}</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2260},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/music-import.ts":{"content":"import { storage } from \"./storage\";\nimport type { InsertArtist, InsertRelease } from \"@shared/schema\";\n\n// Music Import System для RevYou\n// Легальный импорт метаданных из открытых источников\n\ninterface ImportedRelease {\n  artist: string;\n  album: string;\n  releaseDate: string;\n  coverUrl?: string;\n  spotifyUrl?: string;\n  genres?: string[];\n  trackCount?: number;\n}\n\ninterface MusicBrainzArtist {\n  id: string;\n  name: string;\n  country?: string;\n  'life-span'?: {\n    begin?: string;\n    end?: string;\n  };\n}\n\ninterface MusicBrainzRelease {\n  id: string;\n  title: string;\n  date?: string;\n  country?: string;\n  'cover-art-archive'?: {\n    artwork: boolean;\n    front: boolean;\n  };\n  'media'?: Array<{\n    'track-count': number;\n  }>;\n}\n\n/**\n * MusicBrainz API Client\n * Полностью бесплатный источник музыкальных метаданных\n */\nexport class MusicBrainzImporter {\n  private readonly baseUrl = 'https://musicbrainz.org/ws/2';\n  private readonly userAgent = 'RevYou/1.0 (music@revyou.app)';\n  \n  private async makeRequest(endpoint: string): Promise<any> {\n    // Соблюдаем rate limit - 1 запрос в секунду\n    await new Promise(resolve => setTimeout(resolve, 1100));\n    \n    const response = await fetch(`${this.baseUrl}${endpoint}`, {\n      headers: {\n        'User-Agent': this.userAgent,\n        'Accept': 'application/json'\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`MusicBrainz API error: ${response.status}`);\n    }\n    \n    return response.json();\n  }\n  \n  /**\n   * Поиск исполнителя по имени\n   */\n  async searchArtist(artistName: string): Promise<MusicBrainzArtist | null> {\n    try {\n      const query = encodeURIComponent(`artist:\"${artistName}\"`);\n      const data = await this.makeRequest(`/artist/?query=${query}&fmt=json&limit=1`);\n      \n      if (data.artists && data.artists.length > 0) {\n        return data.artists[0];\n      }\n      return null;\n    } catch (error) {\n      console.error('Error searching artist:', error);\n      return null;\n    }\n  }\n  \n  /**\n   * Получение всех релизов исполнителя\n   */\n  async getArtistReleases(artistMbid: string): Promise<MusicBrainzRelease[]> {\n    try {\n      const data = await this.makeRequest(`/release-group/?artist=${artistMbid}&type=album&fmt=json&limit=100`);\n      \n      if (data['release-groups']) {\n        // Получаем детали каждого релиза\n        const releases: MusicBrainzRelease[] = [];\n        \n        for (const group of data['release-groups']) {\n          const releaseData = await this.makeRequest(`/release?release-group=${group.id}&fmt=json&limit=1&inc=media`);\n          if (releaseData.releases && releaseData.releases.length > 0) {\n            releases.push(releaseData.releases[0]);\n          }\n        }\n        \n        return releases;\n      }\n      return [];\n    } catch (error) {\n      console.error('Error getting artist releases:', error);\n      return [];\n    }\n  }\n  \n  /**\n   * Получение URL обложки альбома\n   */\n  async getCoverArtUrl(releaseMbid: string): Promise<string | null> {\n    try {\n      // Cover Art Archive API - также бесплатный\n      const response = await fetch(`https://coverartarchive.org/release/${releaseMbid}/front-500`);\n      if (response.ok) {\n        return response.url;\n      }\n      return null;\n    } catch (error) {\n      return null;\n    }\n  }\n  \n  /**\n   * Импорт релизов исполнителя в нашу БД\n   */\n  async importArtistReleases(artistName: string): Promise<ImportedRelease[]> {\n    console.log(`🎵 Импорт релизов: ${artistName}`);\n    \n    // 1. Найти исполнителя\n    const artist = await this.searchArtist(artistName);\n    if (!artist) {\n      console.log(`❌ Исполнитель не найден: ${artistName}`);\n      return [];\n    }\n    \n    console.log(`✅ Найден исполнитель: ${artist.name} (${artist.id})`);\n    \n    // 2. Получить все релизы\n    const releases = await this.getArtistReleases(artist.id);\n    console.log(`📀 Найдено релизов: ${releases.length}`);\n    \n    // 3. Обработать каждый релиз\n    const importedReleases: ImportedRelease[] = [];\n    \n    for (const release of releases) {\n      try {\n        // Получить обложку\n        const coverUrl = await this.getCoverArtUrl(release.id);\n        \n        const importedRelease: ImportedRelease = {\n          artist: artist.name,\n          album: release.title,\n          releaseDate: release.date || new Date().toISOString(),\n          coverUrl: coverUrl || undefined,\n          trackCount: release.media?.[0]?.['track-count']\n        };\n        \n        importedReleases.push(importedRelease);\n        console.log(`💽 Импортирован: ${release.title}`);\n        \n      } catch (error) {\n        console.error(`❌ Ошибка импорта релиза ${release.title}:`, error);\n      }\n    }\n    \n    return importedReleases;\n  }\n\n  /**\n   * Поиск релизов по году выпуска\n   */\n  async getReleasesByYear(year: number): Promise<MusicBrainzRelease[]> {\n    try {\n      console.log(`🔍 Поиск релизов за ${year} год...`);\n      \n      // Поиск популярных релизов за определенный год\n      const query = `date:${year} AND type:album`;\n      const data = await this.makeRequest(`/release/?query=${encodeURIComponent(query)}&fmt=json&limit=50`);\n      \n      if (data.releases && data.releases.length > 0) {\n        console.log(`📀 Найдено ${data.releases.length} релизов за ${year} год`);\n        return data.releases.filter((release: any) => \n          release.date && release.date.includes(year.toString())\n        );\n      }\n      \n      return [];\n    } catch (error) {\n      console.error(`Error getting releases by year ${year}:`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Получить информацию об исполнителе по ID релиза\n   */\n  async getArtistFromRelease(releaseMbid: string): Promise<MusicBrainzArtist | null> {\n    try {\n      const data = await this.makeRequest(`/release/${releaseMbid}?fmt=json&inc=artists`);\n      \n      if (data['artist-credit'] && data['artist-credit'].length > 0) {\n        return data['artist-credit'][0].artist;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Error getting artist from release:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Импорт релизов по году выпуска\n   */\n  async importReleasesByYear(year: number): Promise<ImportedRelease[]> {\n    console.log(`📅 Импорт релизов ${year} года...`);\n    \n    // 1. Получить релизы за указанный год\n    const releases = await this.getReleasesByYear(year);\n    console.log(`📀 Найдено релизов: ${releases.length}`);\n    \n    if (releases.length === 0) {\n      return [];\n    }\n    \n    // 2. Обработать каждый релиз\n    const importedReleases: ImportedRelease[] = [];\n    \n    for (const release of releases) {\n      try {\n        // Получить информацию об исполнителе\n        const artist = await this.getArtistFromRelease(release.id);\n        if (!artist) {\n          console.log(`⚠️ Не найден исполнитель для релиза: ${release.title}`);\n          continue;\n        }\n        \n        // Получить обложку\n        const coverUrl = await this.getCoverArtUrl(release.id);\n        \n        const importedRelease: ImportedRelease = {\n          artist: artist.name,\n          album: release.title,\n          releaseDate: release.date || `${year}-01-01`,\n          coverUrl: coverUrl || undefined,\n          trackCount: release.media?.[0]?.['track-count']\n        };\n        \n        importedReleases.push(importedRelease);\n        console.log(`💽 Импортирован: ${artist.name} - ${release.title}`);\n        \n      } catch (error) {\n        console.error(`❌ Ошибка импорта релиза ${release.title}:`, error);\n      }\n    }\n    \n    return importedReleases;\n  }\n}\n\n/**\n * Сервис массового импорта\n */\nexport class MassImportService {\n  private musicBrainz = new MusicBrainzImporter();\n  \n  /**\n   * Импорт нескольких исполнителей\n   */\n  async importArtists(artistNames: string[]): Promise<{ success: number; errors: string[] }> {\n    let successCount = 0;\n    const errors: string[] = [];\n    \n    for (const artistName of artistNames) {\n      try {\n        // 1. Импортировать релизы из MusicBrainz\n        const releases = await this.musicBrainz.importArtistReleases(artistName);\n        \n        // 2. Сохранить в нашу БД\n        for (const release of releases) {\n          await this.saveReleaseToDatabase(release);\n        }\n        \n        successCount += releases.length;\n        console.log(`✅ Успешно импортировано ${releases.length} релизов для ${artistName}`);\n        \n      } catch (error) {\n        const errorMsg = `Ошибка импорта ${artistName}: ${error}`;\n        errors.push(errorMsg);\n        console.error(errorMsg);\n      }\n    }\n    \n    return { success: successCount, errors };\n  }\n\n  /**\n   * Импорт релизов по годам выпуска\n   */\n  async importByYears(years: number[]): Promise<{ success: number; errors: string[] }> {\n    let successCount = 0;\n    const errors: string[] = [];\n    \n    for (const year of years) {\n      try {\n        console.log(`🗓️ Импорт релизов ${year} года...`);\n        \n        // 1. Получить релизы из MusicBrainz по году\n        const releases = await this.musicBrainz.importReleasesByYear(year);\n        \n        // 2. Сохранить в нашу БД\n        for (const release of releases) {\n          await this.saveReleaseToDatabase(release);\n        }\n        \n        successCount += releases.length;\n        console.log(`✅ Успешно импортировано ${releases.length} релизов за ${year} год`);\n        \n      } catch (error) {\n        const errorMsg = `Ошибка импорта за ${year} год: ${error}`;\n        errors.push(errorMsg);\n        console.error(errorMsg);\n      }\n    }\n    \n    return { success: successCount, errors };\n  }\n  \n  /**\n   * Сохранение релиза в БД\n   */\n  private async saveReleaseToDatabase(release: ImportedRelease): Promise<void> {\n    try {\n      // Создать или найти исполнителя\n      let artist = await storage.getArtistByName(release.artist);\n      if (!artist) {\n        const artistData: InsertArtist = {\n          name: release.artist,\n        };\n        artist = await storage.createArtist(artistData);\n      }\n      \n      // Проверить, есть ли уже такой релиз\n      const existingRelease = await storage.getReleaseByTitleAndArtist(release.album, artist.id);\n      if (existingRelease) {\n        console.log(`⚠️ Релиз уже существует: ${release.album}`);\n        return;\n      }\n      \n      // Создать новый релиз\n      const releaseData: InsertRelease = {\n        artistId: artist.id,\n        title: release.album,\n        releaseDate: new Date(release.releaseDate),\n        coverUrl: release.coverUrl || null,\n        streamingLinks: release.spotifyUrl ? {\n          spotify: release.spotifyUrl,\n          appleMusic: null\n        } : null,\n        type: 'album'\n      };\n      \n      await storage.createRelease(releaseData);\n      console.log(`💾 Сохранен релиз: ${release.album}`);\n      \n    } catch (error) {\n      console.error(`❌ Ошибка сохранения ${release.album}:`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Получить статистику импорта\n   */\n  async getImportStats(): Promise<{ totalReleases: number; realReleases: number; testReleases: number; totalArtists: number }> {\n    const allReleases = await storage.getReleases({ includeTestData: true });\n    const realReleases = await storage.getReleases({ includeTestData: false });\n    const artists = await storage.getArtists();\n    \n    return {\n      totalReleases: allReleases.length,\n      realReleases: realReleases.length,\n      testReleases: allReleases.length - realReleases.length,\n      totalArtists: artists.length\n    };\n  }\n}\n\n// Экспорт для использования в роутах\nexport const massImportService = new MassImportService();","size_bytes":12870},"server/music-importer.ts":{"content":"import { parsePlaylist, parseMultiplePlaylists } from './russian-music-parsers';\nimport { musicAPI } from './combined-music-api';\nimport { db } from './db';\nimport { artists, releases, discographyCache } from '../shared/schema';\nimport { eq, and, sql } from 'drizzle-orm';\n\nexport interface ImportStats {\n  newArtists: number;\n  updatedArtists: number;\n  newReleases: number;\n  skippedReleases: number;\n  errors: string[];\n}\n\n// Find or create artist in database\nasync function findOrCreateArtist(artistName: string, yandexMusicUrl?: string, yandexMusicId?: string) {\n  // First try to find existing artist by name\n  const existing = await db.select().from(artists).where(eq(artists.name, artistName)).limit(1);\n  \n  if (existing.length > 0) {\n    const artist = existing[0];\n    \n    // Update with Yandex Music info if we have it and it's missing\n    if ((yandexMusicUrl || yandexMusicId) && (!artist.yandexMusicUrl || !artist.yandexMusicId)) {\n      await db.update(artists)\n        .set({\n          yandexMusicUrl: yandexMusicUrl || artist.yandexMusicUrl,\n          yandexMusicId: yandexMusicId || artist.yandexMusicId,\n          lastUpdated: new Date()\n        })\n        .where(eq(artists.id, artist.id));\n    }\n    \n    return artist.id;\n  }\n  \n  // Create new artist\n  const newArtist = await db.insert(artists)\n    .values({\n      name: artistName,\n      yandexMusicUrl,\n      yandexMusicId,\n      lastUpdated: new Date()\n    })\n    .returning({ id: artists.id });\n    \n  return newArtist[0].id;\n}\n\n// Update artist with external music service information\nasync function updateArtistWithMusicInfo(artistId: number, artistInfo: any, source: 'deezer' | 'itunes') {\n  const updateData: any = {\n    lastUpdated: new Date()\n  };\n  \n  if (source === 'deezer') {\n    updateData.deezerId = artistInfo.id;\n    updateData.genres = artistInfo.genres;\n    updateData.popularity = artistInfo.popularity;\n    updateData.imageUrl = artistInfo.imageUrl;\n  } else if (source === 'itunes') {\n    updateData.itunesId = artistInfo.id;\n    updateData.genres = artistInfo.genres;\n  }\n  \n  await db.update(artists)\n    .set(updateData)\n    .where(eq(artists.id, artistId));\n}\n\n// Check if release already exists\nasync function releaseExists(externalId: string, artistId: number, title: string, source: 'deezer' | 'itunes'): Promise<boolean> {\n  const existing = await db.select()\n    .from(releases)\n    .where(\n      and(\n        eq(releases.artistId, artistId),\n        externalId ? \n          (source === 'deezer' ? eq(releases.deezerId, externalId) : eq(releases.itunesId, externalId))\n          : eq(releases.title, title)\n      )\n    )\n    .limit(1);\n    \n  return existing.length > 0;\n}\n\n// Create release from external album data\nasync function createReleaseFromAlbum(album: any, artistId: number, source: 'deezer' | 'itunes') {\n  const releaseData: any = {\n    artistId,\n    title: album.title,\n    type: album.albumType,\n    coverUrl: album.imageUrl,\n    totalTracks: album.trackCount\n  };\n  \n  if (album.releaseDate) {\n    releaseData.releaseDate = new Date(album.releaseDate);\n  }\n  \n  if (source === 'deezer') {\n    releaseData.deezerId = album.id;\n    releaseData.streamingLinks = {\n      deezer: `https://www.deezer.com/album/${album.id}`\n    };\n  } else if (source === 'itunes') {\n    releaseData.itunesId = album.id;\n    releaseData.streamingLinks = {\n      itunes: `https://music.apple.com/album/${album.id}`\n    };\n  }\n  \n  await db.insert(releases).values(releaseData);\n}\n\n// Get cached discography for artist\nasync function getCachedDiscography(artistId: number, source: 'deezer' | 'itunes'): Promise<string[] | null> {\n  const cached = await db.select()\n    .from(discographyCache)\n    .where(and(\n      eq(discographyCache.artistId, artistId),\n      eq(discographyCache.source, source)\n    ))\n    .limit(1);\n    \n  return cached.length > 0 ? cached[0].albumIds : null;\n}\n\n// Update discography cache for artist\nasync function updateDiscographyCache(artistId: number, source: 'deezer' | 'itunes', albumIds: string[]) {\n  // Delete existing cache\n  await db.delete(discographyCache)\n    .where(and(\n      eq(discographyCache.artistId, artistId),\n      eq(discographyCache.source, source)\n    ));\n    \n  // Insert new cache\n  await db.insert(discographyCache).values({\n    artistId,\n    source,\n    albumIds,\n    lastUpdated: new Date()\n  });\n}\n\n// Process a single artist: find in combined music APIs and import discography\nasync function processArtist(artistName: string): Promise<{\n  newReleases: number;\n  skippedReleases: number;\n  error?: string;\n}> {\n  try {\n    console.log(`🎵 Processing artist: ${artistName}`);\n    \n    // Search for artist using combined API (Deezer + iTunes fallback)\n    const musicResult = await musicAPI.findArtist(artistName);\n    \n    if (!musicResult) {\n      console.log(`❌ Artist \"${artistName}\" not found in any music service`);\n      return { newReleases: 0, skippedReleases: 0, error: `Not found in music services` };\n    }\n    \n    const { artist, albums } = musicResult;\n    \n    console.log(`✅ Found artist: ${artist.name} (${artist.source}, ID: ${artist.id})`);\n    \n    // Find or create artist in our database\n    const artistId = await findOrCreateArtist(artist.name, artist.source, artist.id);\n    \n    // Update artist with external music service information\n    await updateArtistWithMusicInfo(artistId, artist, artist.source);\n    \n    console.log(`📀 Found ${albums.length} releases for ${artist.name}`);\n    \n    // Check if we have existing artist to optimize with caching\n    const isExistingArtist = await db.select().from(artists).where(eq(artists.id, artistId)).limit(1);\n    const isUpdate = isExistingArtist.length > 0 && isExistingArtist[0].lastUpdated;\n    \n    let newReleases = 0;\n    let skippedReleases = 0;\n    let albumsToProcess = albums;\n    \n    if (isUpdate) {\n      console.log(`🔄 Updating artist: ${artist.name}`);\n      \n      // Get cached discography\n      const cachedAlbumIds = await getCachedDiscography(artistId, artist.source);\n      \n      if (cachedAlbumIds && cachedAlbumIds.length > 0) {\n        // Filter only new albums that weren't in the cache\n        const currentAlbumIds = albums.map(album => album.id);\n        const newAlbumIds = currentAlbumIds.filter(id => !cachedAlbumIds.includes(id));\n        \n        albumsToProcess = albums.filter(album => newAlbumIds.includes(album.id));\n        skippedReleases = albums.length - albumsToProcess.length;\n        \n        console.log(`💾 Cache optimization: ${albumsToProcess.length} new albums, ${skippedReleases} cached`);\n      }\n    }\n    \n    // Process albums (either all for new artists, or only new ones for existing)\n    for (const album of albumsToProcess) {\n      // Double-check if release already exists (safety net)\n      if (await releaseExists(album.id, artistId, album.title, album.source)) {\n        skippedReleases++;\n        continue;\n      }\n      \n      // Create new release\n      await createReleaseFromAlbum(album, artistId, album.source);\n      newReleases++;\n      \n      console.log(`  ✅ Added: \"${album.title}\" (${album.albumType})`);\n    }\n    \n    // Update discography cache with all current album IDs\n    const allAlbumIds = albums.map(album => album.id);\n    await updateDiscographyCache(artistId, artist.source, allAlbumIds);\n    \n    console.log(`📊 ${artist.name}: +${newReleases} новых, ~${skippedReleases} пропущено`);\n    \n    return { newReleases, skippedReleases };\n    \n  } catch (error) {\n    console.error(`❌ Error processing artist \"${artistName}\":`, error);\n    return { \n      newReleases: 0, \n      skippedReleases: 0, \n      error: error instanceof Error ? error.message : 'Unknown error' \n    };\n  }\n}\n\n// Import music from a single Russian music playlist (MTS Music, etc.)\nexport async function importFromRussianPlaylist(playlistUrl: string): Promise<ImportStats> {\n  const stats: ImportStats = {\n    newArtists: 0,\n    updatedArtists: 0,\n    newReleases: 0,\n    skippedReleases: 0,\n    errors: []\n  };\n  \n  try {\n    console.log(`🎵 Starting import from playlist: ${playlistUrl}`);\n    \n    // Parse Russian music playlist (MTS Music, etc.)\n    const playlistResult = await parsePlaylist(playlistUrl);\n    \n    if (!playlistResult) {\n      stats.errors.push(`Failed to parse playlist: ${playlistUrl}`);\n      return stats;\n    }\n    \n    console.log(`📋 Parsed playlist \"${playlistResult.name}\" with ${playlistResult.tracks.length} tracks`);\n    console.log(`👨‍🎤 Found ${playlistResult.uniqueArtists.length} unique artists`);\n    \n    // Process each unique artist\n    for (const artistName of playlistResult.uniqueArtists) {\n      const result = await processArtist(artistName);\n      \n      stats.newReleases += result.newReleases;\n      stats.skippedReleases += result.skippedReleases;\n      \n      if (result.error) {\n        stats.errors.push(`${artistName}: ${result.error}`);\n      } else {\n        if (result.newReleases > 0) {\n          stats.newArtists++;\n        }\n      }\n      \n      // Rate limiting between artists\n      await new Promise(resolve => setTimeout(resolve, 2000));\n    }\n    \n    console.log(`✅ Import completed. New releases: ${stats.newReleases}, Skipped: ${stats.skippedReleases}, Errors: ${stats.errors.length}`);\n    \n    return stats;\n    \n  } catch (error) {\n    console.error('❌ Error during playlist import:', error);\n    stats.errors.push(`Import failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    return stats;\n  }\n}\n\n// Обратная совместимость\nexport async function importFromYandexPlaylist(playlistUrl: string): Promise<ImportStats> {\n  console.log(`⚠️ importFromYandexPlaylist is deprecated, use importFromRussianPlaylist instead`);\n  return importFromRussianPlaylist(playlistUrl);\n}\n\n// Update all existing artists with new releases using combined API\nexport async function updateAllArtists(): Promise<ImportStats> {\n  const stats: ImportStats = {\n    newArtists: 0,\n    updatedArtists: 0,\n    newReleases: 0,\n    skippedReleases: 0,\n    errors: []\n  };\n\n  try {\n    console.log('🔄 Starting update of all existing artists...');\n\n    // Get all artists with external music service IDs\n    const artistsWithExternalIds = await db\n      .select()\n      .from(artists)\n      .where(sql`(deezer_id IS NOT NULL AND deezer_id != '') OR (itunes_id IS NOT NULL AND itunes_id != '')`);\n\n    console.log(`Found ${artistsWithExternalIds.length} artists with external music service IDs`);\n\n    for (const artist of artistsWithExternalIds) {\n      try {\n        console.log(`🔄 Updating artist: ${artist.name}`);\n\n        // Re-search for artist to get latest discography\n        const musicResult = await musicAPI.findArtist(artist.name);\n        \n        if (!musicResult) {\n          console.log(`⚠️ Artist \"${artist.name}\" no longer found in music services`);\n          continue;\n        }\n\n        const { artist: updatedArtist, albums: discography } = musicResult;\n        \n        let newReleases = 0;\n        let skippedReleases = 0;\n\n        for (const album of discography) {\n          // Check if release already exists\n          if (await releaseExists(album.id, artist.id, album.title, album.source)) {\n            skippedReleases++;\n            continue;\n          }\n\n          // Create new release\n          await createReleaseFromAlbum(album, artist.id, album.source);\n          newReleases++;\n\n          console.log(`  ✅ Added: \"${album.title}\" (${album.albumType})`);\n        }\n\n        if (newReleases > 0) {\n          stats.updatedArtists++;\n        }\n\n        stats.newReleases += newReleases;\n        stats.skippedReleases += skippedReleases;\n\n        console.log(`  📊 ${artist.name}: +${newReleases} новых, ~${skippedReleases} пропущено`);\n\n        // Rate limiting between artists\n        await new Promise(resolve => setTimeout(resolve, 2000));\n\n      } catch (error) {\n        console.error(`❌ Error updating artist \"${artist.name}\":`, error);\n        stats.errors.push(`${artist.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    }\n\n    console.log(`✅ Artist update completed. Updated: ${stats.updatedArtists}, New releases: ${stats.newReleases}`);\n    return stats;\n\n  } catch (error) {\n    console.error('Error during artist update:', error);\n    stats.errors.push(`Update failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    return stats;\n  }\n}\n\n// Import music from multiple Russian music playlists\nexport async function importFromMultipleRussianPlaylists(playlistUrls: string[]): Promise<ImportStats> {\n  const totalStats: ImportStats = {\n    newArtists: 0,\n    updatedArtists: 0,\n    newReleases: 0,\n    skippedReleases: 0,\n    errors: []\n  };\n  \n  console.log(`🎵 Starting batch import from ${playlistUrls.length} playlists...`);\n  \n  // Use the batch parser for efficiency\n  const parseResult = await parseMultiplePlaylists(playlistUrls);\n  \n  console.log(`📊 Batch parsing completed:`);\n  console.log(`   ✅ Успешно: ${parseResult.successful.length} плейлистов`);\n  console.log(`   ❌ Неудачно: ${parseResult.failed.length} плейлистов`);\n  \n  // Collect all unique artists from all successful playlists\n  const allUniqueArtists = new Set<string>();\n  parseResult.successful.forEach(playlist => {\n    playlist.uniqueArtists.forEach(artist => allUniqueArtists.add(artist));\n  });\n  \n  console.log(`👨‍🎤 Total unique artists found: ${allUniqueArtists.size}`);\n  \n  // Process each unique artist\n  for (const artistName of Array.from(allUniqueArtists)) {\n    try {\n      const stats = await processArtist(artistName);\n      \n      totalStats.newReleases += stats.newReleases;\n      totalStats.skippedReleases += stats.skippedReleases;\n      \n      if (stats.error) {\n        totalStats.errors.push(`${artistName}: ${stats.error}`);\n      } else {\n        if (stats.newReleases > 0) {\n          totalStats.newArtists++;\n        }\n      }\n      \n      // Rate limiting between artists\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n    } catch (error) {\n      console.error(`❌ Error processing artist ${artistName}:`, error);\n      totalStats.errors.push(`${artistName}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  \n  // Add failed playlists to errors\n  parseResult.failed.forEach(url => {\n    totalStats.errors.push(`Failed to parse playlist: ${url}`);\n  });\n  \n  console.log(`✅ Batch import completed. New releases: ${totalStats.newReleases}, Artists: ${totalStats.newArtists}, Errors: ${totalStats.errors.length}`);\n  \n  return totalStats;\n}\n\n// Обратная совместимость\nexport async function importFromMultipleYandexPlaylists(playlistUrls: string[]): Promise<ImportStats> {\n  console.log(`⚠️ importFromMultipleYandexPlaylists is deprecated, use importFromMultipleRussianPlaylists instead`);\n  return importFromMultipleRussianPlaylists(playlistUrls);\n}\n\n// Update existing artists (check for new releases) - using combined API\nexport async function updateExistingArtists(): Promise<ImportStats> {\n  const stats: ImportStats = {\n    newArtists: 0,\n    updatedArtists: 0,\n    newReleases: 0,\n    skippedReleases: 0,\n    errors: []\n  };\n  \n  try {\n    // Get all artists with external music service IDs that haven't been updated in the last 24 hours\n    const existingArtists = await db.select()\n      .from(artists)\n      .where(\n        and(\n          sql`((deezer_id IS NOT NULL AND deezer_id != '') OR (itunes_id IS NOT NULL AND itunes_id != ''))`,\n          sql`${artists.lastUpdated} < NOW() - INTERVAL '1 day'`\n        )\n      );\n    \n    console.log(`🔄 Updating ${existingArtists.length} existing artists...`);\n    \n    for (const artist of existingArtists) {\n      try {\n        console.log(`🔄 Updating artist: ${artist.name}`);\n        \n        // Re-search for artist to get latest discography\n        const musicResult = await musicAPI.findArtist(artist.name);\n        \n        if (!musicResult) {\n          console.log(`⚠️ Artist \"${artist.name}\" no longer found in music services`);\n          continue;\n        }\n\n        const { albums: discography } = musicResult;\n        \n        let newReleases = 0;\n        let skippedReleases = 0;\n        \n        for (const album of discography) {\n          // Check if release already exists\n          if (await releaseExists(album.id, artist.id, album.title, album.source)) {\n            skippedReleases++;\n            continue;\n          }\n          \n          // Create new release\n          await createReleaseFromAlbum(album, artist.id, album.source);\n          newReleases++;\n          \n          console.log(`  ✅ Added new release: \"${album.title}\" by ${artist.name}`);\n        }\n        \n        // Update last updated timestamp\n        await db.update(artists)\n          .set({ lastUpdated: new Date() })\n          .where(eq(artists.id, artist.id));\n        \n        stats.newReleases += newReleases;\n        stats.skippedReleases += skippedReleases;\n        \n        if (newReleases > 0) {\n          stats.updatedArtists++;\n        }\n        \n        console.log(`  📊 ${artist.name}: +${newReleases} новых, ~${skippedReleases} пропущено`);\n        \n        // Rate limiting\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        \n      } catch (error) {\n        console.error(`❌ Error updating artist ${artist.name}:`, error);\n        stats.errors.push(`${artist.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    }\n    \n    console.log(`✅ Artist update completed. New releases: ${stats.newReleases}, Updated artists: ${stats.updatedArtists}`);\n    \n    return stats;\n    \n  } catch (error) {\n    console.error('Error during artist update:', error);\n    stats.errors.push(`Update failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    return stats;\n  }\n}","size_bytes":17991},"server/spotify-client.ts":{"content":"import { SpotifyApi } from \"@spotify/web-api-ts-sdk\";\n\nlet connectionSettings: any;\n\nasync function getAccessToken() {\n  if (connectionSettings && connectionSettings.settings.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {\n    return {\n      accessToken: connectionSettings.settings.access_token,\n      clientId: connectionSettings.settings.oauth?.credentials?.client_id,\n      refreshToken: connectionSettings.settings.oauth?.credentials?.refresh_token,\n      expiresIn: connectionSettings.settings.oauth?.credentials?.expires_in\n    };\n  }\n  \n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=spotify',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n   const refreshToken =\n    connectionSettings?.settings?.oauth?.credentials?.refresh_token;\n  const accessToken = connectionSettings?.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;\nconst clientId = connectionSettings?.settings?.oauth?.credentials?.client_id;\n  const expiresIn = connectionSettings.settings?.oauth?.credentials?.expires_in;\n  if (!connectionSettings || (!accessToken || !clientId || !refreshToken)) {\n    throw new Error('Spotify not connected');\n  }\n  return {accessToken, clientId, refreshToken, expiresIn};\n}\n\n// WARNING: Never cache this client.\n// Access tokens expire, so a new client must be created each time.\n// Always call this function again to get a fresh client.\nexport async function getUncachableSpotifyClient() {\n  const {accessToken, clientId, refreshToken, expiresIn} = await getAccessToken();\n\n  const spotify = SpotifyApi.withAccessToken(clientId, {\n    access_token: accessToken,\n    token_type: \"Bearer\",\n    expires_in: expiresIn || 3600,\n    refresh_token: refreshToken,\n  });\n\n  return spotify;\n}\n\n// Helper functions for our music import system\nexport interface SpotifyArtistInfo {\n  id: string;\n  name: string;\n  genres: string[];\n  popularity: number;\n  followers: number;\n}\n\nexport interface SpotifyAlbum {\n  id: string;\n  name: string;\n  release_date: string;\n  album_type: 'album' | 'single' | 'compilation';\n  total_tracks: number;\n  images: Array<{url: string, height: number, width: number}>;\n  artists: Array<{id: string, name: string}>;\n}\n\nexport async function searchSpotifyArtist(artistName: string): Promise<SpotifyArtistInfo | null> {\n  try {\n    const spotify = await getUncachableSpotifyClient();\n    const searchResults = await spotify.search(artistName, ['artist'], undefined, 1);\n    \n    if (searchResults.artists.items.length === 0) {\n      return null;\n    }\n\n    const artist = searchResults.artists.items[0];\n    return {\n      id: artist.id,\n      name: artist.name,\n      genres: artist.genres,\n      popularity: artist.popularity,\n      followers: artist.followers.total\n    };\n  } catch (error) {\n    console.error(`Error searching for artist ${artistName}:`, error);\n    return null;\n  }\n}\n\nexport async function getArtistDiscography(artistId: string): Promise<SpotifyAlbum[]> {\n  try {\n    const spotify = await getUncachableSpotifyClient();\n    const albums: SpotifyAlbum[] = [];\n    \n    // Get all albums, singles, and compilations\n    const albumTypes: ('album' | 'single' | 'compilation')[] = ['album', 'single', 'compilation'];\n    \n    for (const albumType of albumTypes) {\n      let offset = 0;\n      const limit = 50;\n      \n      while (true) {\n        const response = await spotify.artists.albums(artistId, albumType, undefined, limit, offset);\n        \n        if (response.items.length === 0) {\n          break;\n        }\n        \n        for (const album of response.items) {\n          albums.push({\n            id: album.id,\n            name: album.name,\n            release_date: album.release_date,\n            album_type: album.album_type as 'album' | 'single' | 'compilation',\n            total_tracks: album.total_tracks,\n            images: album.images,\n            artists: album.artists.map(artist => ({ id: artist.id, name: artist.name }))\n          });\n        }\n        \n        offset += limit;\n        if (response.items.length < limit) {\n          break;\n        }\n        \n        // Rate limiting: small delay between requests\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n    }\n    \n    return albums;\n  } catch (error) {\n    console.error(`Error fetching discography for artist ${artistId}:`, error);\n    return [];\n  }\n}","size_bytes":4924},"server/yandex-music-parser.ts":{"content":"import axios from 'axios';\nimport * as cheerio from 'cheerio';\n\nexport interface YandexMusicTrack {\n  title: string;\n  artist: string;\n  artistId?: string; // Yandex Music artist ID if available\n  artistUrl?: string; // Link to artist page in Yandex Music\n}\n\nexport interface YandexMusicPlaylist {\n  title: string;\n  url: string;\n  tracks: YandexMusicTrack[];\n}\n\n// Extract artist ID from Yandex Music artist URL\nfunction extractArtistId(url: string): string | undefined {\n  const match = url.match(/\\/artist\\/(\\d+)/);\n  return match ? match[1] : undefined;\n}\n\n// Parse a single Yandex Music playlist\nexport async function parseYandexPlaylist(playlistUrl: string): Promise<YandexMusicPlaylist | null> {\n  try {\n    console.log(`Parsing Yandex Music playlist: ${playlistUrl}`);\n    \n    const response = await axios.get(playlistUrl, {\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',\n        'Accept-Encoding': 'gzip, deflate, br',\n        'Cache-Control': 'no-cache',\n        'Pragma': 'no-cache'\n      },\n      timeout: 30000\n    });\n\n    const $ = cheerio.load(response.data);\n    const tracks: YandexMusicTrack[] = [];\n    \n    // Try different selectors for track information\n    const trackSelectors = [\n      '.d-track',\n      '.track',\n      '[data-testid=\"track\"]',\n      '.playlist-track',\n      '.track-item'\n    ];\n    \n    let playlistTitle = '';\n    \n    // Extract playlist title\n    const titleSelectors = [\n      '.page-playlist__title',\n      '.playlist__title',\n      'h1',\n      '.d-generic-page-head__title',\n      '[data-testid=\"playlist-title\"]'\n    ];\n    \n    for (const selector of titleSelectors) {\n      const titleElement = $(selector).first();\n      if (titleElement.length && titleElement.text().trim()) {\n        playlistTitle = titleElement.text().trim();\n        break;\n      }\n    }\n    \n    // If no specific playlist title found, try to get it from page title\n    if (!playlistTitle) {\n      const pageTitle = $('title').text().trim();\n      if (pageTitle && !pageTitle.includes('Яндекс.Музыка')) {\n        playlistTitle = pageTitle.replace(' — Яндекс.Музыка', '').replace(' - Яндекс.Музыка', '');\n      }\n    }\n    \n    console.log(`Found playlist title: \"${playlistTitle}\"`);\n    \n    // Try each selector to find tracks\n    for (const selector of trackSelectors) {\n      const trackElements = $(selector);\n      console.log(`Trying selector \"${selector}\": found ${trackElements.length} elements`);\n      \n      if (trackElements.length > 0) {\n        trackElements.each((index, element) => {\n          const $track = $(element);\n          \n          // Try different methods to extract track info\n          let title = '';\n          let artist = '';\n          let artistUrl = '';\n          \n          // Method 1: Look for specific classes\n          title = $track.find('.d-track__title, .track__title, .track-title, [data-testid=\"track-title\"]').first().text().trim();\n          artist = $track.find('.d-track__artists, .track__artists, .track-artist, [data-testid=\"track-artist\"]').first().text().trim();\n          \n          // Method 2: Look for links to artists\n          const artistLink = $track.find('a[href*=\"/artist/\"]').first();\n          if (artistLink.length) {\n            if (!artist) {\n              artist = artistLink.text().trim();\n            }\n            artistUrl = artistLink.attr('href') || '';\n            if (artistUrl && !artistUrl.startsWith('http')) {\n              artistUrl = 'https://music.yandex.ru' + artistUrl;\n            }\n          }\n          \n          // Method 3: Try to extract from text content\n          if (!title || !artist) {\n            const textContent = $track.text().trim();\n            const lines = textContent.split('\\n').map(line => line.trim()).filter(line => line);\n            \n            if (lines.length >= 2) {\n              if (!title) title = lines[0];\n              if (!artist) artist = lines[1];\n            }\n          }\n          \n          // Clean up extracted data\n          title = title.replace(/^\\d+\\.\\s*/, ''); // Remove track numbers\n          artist = artist.split(',')[0].trim(); // Take first artist if multiple\n          \n          if (title && artist && title !== artist) {\n            const track: YandexMusicTrack = {\n              title,\n              artist,\n              artistUrl: artistUrl || undefined,\n              artistId: artistUrl ? extractArtistId(artistUrl) : undefined\n            };\n            tracks.push(track);\n          }\n        });\n        \n        if (tracks.length > 0) {\n          break; // Found tracks with this selector, no need to try others\n        }\n      }\n    }\n    \n    console.log(`Extracted ${tracks.length} tracks from playlist`);\n    \n    // Log first few tracks for debugging\n    tracks.slice(0, 3).forEach((track, index) => {\n      console.log(`Track ${index + 1}: \"${track.title}\" by \"${track.artist}\" ${track.artistUrl ? `(${track.artistUrl})` : ''}`);\n    });\n    \n    if (tracks.length === 0) {\n      console.warn('No tracks found in playlist. The page structure might have changed.');\n      return null;\n    }\n    \n    return {\n      title: playlistTitle || 'Unknown Playlist',\n      url: playlistUrl,\n      tracks\n    };\n    \n  } catch (error) {\n    console.error(`Error parsing Yandex Music playlist ${playlistUrl}:`, error);\n    return null;\n  }\n}\n\n// Get unique artists from multiple playlists\nexport function extractUniqueArtists(playlists: YandexMusicPlaylist[]): YandexMusicTrack[] {\n  const artistMap = new Map<string, YandexMusicTrack>();\n  \n  for (const playlist of playlists) {\n    for (const track of playlist.tracks) {\n      const artistKey = track.artist.toLowerCase().trim();\n      \n      if (!artistMap.has(artistKey)) {\n        // Store the first occurrence of each artist\n        artistMap.set(artistKey, {\n          title: '', // Not needed for artist info\n          artist: track.artist,\n          artistId: track.artistId,\n          artistUrl: track.artistUrl\n        });\n      } else {\n        // Update with more complete info if available\n        const existing = artistMap.get(artistKey)!;\n        if (!existing.artistId && track.artistId) {\n          existing.artistId = track.artistId;\n        }\n        if (!existing.artistUrl && track.artistUrl) {\n          existing.artistUrl = track.artistUrl;\n        }\n      }\n    }\n  }\n  \n  return Array.from(artistMap.values());\n}\n\n// Parse multiple playlists\nexport async function parseMultipleYandexPlaylists(playlistUrls: string[]): Promise<YandexMusicPlaylist[]> {\n  const results: YandexMusicPlaylist[] = [];\n  \n  for (const url of playlistUrls) {\n    try {\n      const playlist = await parseYandexPlaylist(url);\n      if (playlist) {\n        results.push(playlist);\n        console.log(`Successfully parsed playlist: \"${playlist.title}\" with ${playlist.tracks.length} tracks`);\n      } else {\n        console.warn(`Failed to parse playlist: ${url}`);\n      }\n      \n      // Rate limiting: wait between requests\n      await new Promise(resolve => setTimeout(resolve, 2000));\n    } catch (error) {\n      console.error(`Error parsing playlist ${url}:`, error);\n    }\n  }\n  \n  return results;\n}","size_bytes":7447},"server/background-jobs.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { db } from './db';\nimport { importJobs, InsertImportJob, releases, artists } from '@shared/schema';\nimport { importFromRussianPlaylist } from './music-importer';\nimport { musicAPI } from './combined-music-api';\n\n// In-memory job processing queue\nconst activeJobs = new Map<number, { cancel: boolean }>();\n\nexport async function createImportJob(data: InsertImportJob): Promise<number> {\n  const [job] = await db.insert(importJobs).values(data).returning();\n  \n  // Start processing in background (don't await)\n  processImportJob(job.id).catch(error => {\n    console.error(`❌ Background job ${job.id} failed:`, error);\n    updateJobStatus(job.id, 'failed', error.message).catch(console.error);\n  });\n  \n  return job.id;\n}\n\nexport async function getImportJob(jobId: number) {\n  const job = await db.select().from(importJobs).where(sql`id = ${jobId}`).limit(1);\n  return job[0] || null;\n}\n\nexport async function getAllImportJobs(userId: string) {\n  return await db.select().from(importJobs)\n    .where(sql`created_by = ${userId}`)\n    .orderBy(sql`created_at DESC`)\n    .limit(20);\n}\n\nexport async function cancelImportJob(jobId: number): Promise<boolean> {\n  const jobControl = activeJobs.get(jobId);\n  if (jobControl) {\n    jobControl.cancel = true;\n    return true;\n  }\n  return false;\n}\n\nasync function updateJobStatus(\n  jobId: number, \n  status: string, \n  errorMessage?: string,\n  updates?: Partial<{\n    progress: number;\n    totalArtists: number;\n    processedArtists: number;\n    newReleases: number;\n    skippedReleases: number;\n    errors: number;\n  }>\n) {\n  const updateData: any = { status };\n  \n  if (errorMessage) updateData.errorMessage = errorMessage;\n  if (status === 'processing' && !updates?.progress) updateData.startedAt = new Date();\n  if (status === 'completed' || status === 'failed') updateData.completedAt = new Date();\n  \n  if (updates) {\n    Object.assign(updateData, updates);\n  }\n  \n  await db.update(importJobs)\n    .set(updateData)\n    .where(sql`id = ${jobId}`);\n}\n\nasync function processImportJob(jobId: number) {\n  console.log(`🎵 Starting background import job ${jobId}`);\n  \n  // Register job for cancellation\n  const jobControl = { cancel: false };\n  activeJobs.set(jobId, jobControl);\n  \n  try {\n    // Update status to processing\n    await updateJobStatus(jobId, 'processing');\n    \n    // Get job details\n    const job = await getImportJob(jobId);\n    if (!job) {\n      throw new Error('Job not found');\n    }\n    \n    // Check for cancellation\n    if (jobControl.cancel) {\n      await updateJobStatus(jobId, 'failed', 'Job was cancelled');\n      return;\n    }\n    \n    // Create progress callback\n    const onProgress = async (stats: {\n      totalArtists: number;\n      processedArtists: number;\n      newReleases: number;\n      skippedReleases: number;\n      errors: number;\n    }) => {\n      // Check for cancellation\n      if (jobControl.cancel) {\n        throw new Error('Job was cancelled');\n      }\n      \n      const progress = Math.round((stats.processedArtists / stats.totalArtists) * 100);\n      \n      await updateJobStatus(jobId, 'processing', undefined, {\n        progress,\n        totalArtists: stats.totalArtists,\n        processedArtists: stats.processedArtists,\n        newReleases: stats.newReleases,\n        skippedReleases: stats.skippedReleases,\n        errors: stats.errors,\n      });\n      \n      console.log(`📊 Job ${jobId} progress: ${progress}% (${stats.processedArtists}/${stats.totalArtists} artists)`);\n    };\n    \n    // Run the import with progress tracking\n    console.log(`🎵 Processing playlist: ${job.playlistUrl}`);\n    const result = await importFromRussianPlaylist(job.playlistUrl);\n    \n    // Final update\n    await updateJobStatus(jobId, 'completed', undefined, {\n      progress: 100,\n      totalArtists: 0, // TODO: get this from playlist parsing\n      processedArtists: 0, // TODO: get this from playlist parsing \n      newReleases: result.newReleases,\n      skippedReleases: result.skippedReleases,\n      errors: result.errors.length,\n    });\n    \n    console.log(`✅ Background job ${jobId} completed: ${result.newReleases} new releases`);\n    \n  } catch (error) {\n    console.error(`❌ Background job ${jobId} failed:`, error);\n    await updateJobStatus(jobId, 'failed', error instanceof Error ? error.message : String(error));\n  } finally {\n    // Clean up\n    activeJobs.delete(jobId);\n  }\n}\n\n// For now, we use the original import function without progress callbacks\n// TODO: Modify importFromRussianPlaylist to support progress callbacks\n\n// Background job для заполнения пропущенных дат релизов через iTunes API\nexport async function fillMissingReleaseDates(): Promise<{\n  processed: number;\n  updated: number;\n  errors: number;\n}> {\n  console.log('📅 Starting background job to fill missing release dates...');\n  \n  let processed = 0;\n  let updated = 0;\n  let errors = 0;\n  \n  try {\n    // Получаем релизы без дат (лимит для обработки)\n    const releasesWithoutDates = await db\n      .select({\n        releaseId: releases.id,\n        releaseTitle: releases.title,\n        artistName: artists.name,\n      })\n      .from(releases)\n      .innerJoin(artists, sql`${releases.artistId} = ${artists.id}`)\n      .where(sql`${releases.releaseDate} IS NULL`)\n      .limit(50); // Ограничиваем, чтобы не перегружать iTunes API\n    \n    console.log(`📅 Найдено ${releasesWithoutDates.length} релизов без дат`);\n    \n    for (const release of releasesWithoutDates) {\n      try {\n        processed++;\n        \n        // Ищем дату через iTunes API\n        const releaseDate = await musicAPI.findReleaseDate(\n          release.artistName, \n          release.releaseTitle\n        );\n        \n        if (releaseDate) {\n          // Обновляем релиз с найденной датой\n          await db\n            .update(releases)\n            .set({ releaseDate: new Date(releaseDate) })\n            .where(sql`id = ${release.releaseId}`);\n          \n          updated++;\n          console.log(`✅ Обновлен \"${release.releaseTitle}\" (${release.artistName}): ${releaseDate}`);\n        } else {\n          console.log(`❌ Дата не найдена для \"${release.releaseTitle}\" (${release.artistName})`);\n        }\n        \n        // Пауза между запросами к iTunes API\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n      } catch (error) {\n        errors++;\n        console.error(`❌ Ошибка при обработке \"${release.releaseTitle}\":`, error);\n      }\n    }\n    \n    console.log(`📅 Завершено: обработано ${processed}, обновлено ${updated}, ошибок ${errors}`);\n    return { processed, updated, errors };\n    \n  } catch (error) {\n    console.error('❌ Ошибка в background job fillMissingReleaseDates:', error);\n    throw error;\n  }\n}","size_bytes":7040},"server/combined-music-api.ts":{"content":"// Комбинированный музыкальный API клиент\n// Deezer API (основной) + iTunes API (fallback)\n// Максимальное покрытие российских и международных артистов\n\n// Интерфейсы для унифицированных данных\nexport interface UnifiedArtist {\n  id: string;\n  name: string;\n  imageUrl?: string;\n  genres?: string[];\n  popularity?: number;\n  source: 'deezer' | 'itunes';\n}\n\nexport interface UnifiedAlbum {\n  id: string;\n  title: string;\n  releaseDate?: string;\n  albumType: 'album' | 'single' | 'compilation';\n  trackCount?: number;\n  imageUrl?: string;\n  source: 'deezer' | 'itunes';\n}\n\n// Deezer API клиент\nclass DeezerAPIClient {\n  private readonly baseUrl = 'https://api.deezer.com';\n  \n  async searchArtist(artistName: string): Promise<UnifiedArtist | null> {\n    try {\n      console.log(`🟡 Deezer: Ищем артиста \"${artistName}\"`);\n      \n      const response = await fetch(`${this.baseUrl}/search/artist?q=${encodeURIComponent(artistName)}&limit=1`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (!data.data || data.data.length === 0) {\n        console.log(`🟡 Deezer: Артист \"${artistName}\" не найден`);\n        return null;\n      }\n      \n      const artist = data.data[0];\n      \n      console.log(`🟡 Deezer: Найден \"${artist.name}\" (ID: ${artist.id})`);\n      \n      return {\n        id: artist.id.toString(),\n        name: artist.name,\n        imageUrl: artist.picture_medium || artist.picture,\n        popularity: artist.nb_fan || 0,\n        source: 'deezer'\n      };\n      \n    } catch (error) {\n      console.error(`🟡 Deezer error для \"${artistName}\":`, error instanceof Error ? error.message : String(error));\n      return null;\n    }\n  }\n  \n  async getArtistAlbums(artistId: string): Promise<UnifiedAlbum[]> {\n    try {\n      console.log(`🟡 Deezer: Получаем альбомы для артиста ${artistId}`);\n      \n      // Основной запрос альбомов с максимальным лимитом\n      const response = await fetch(`${this.baseUrl}/artist/${artistId}/albums?limit=500`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      const albums: UnifiedAlbum[] = [];\n      \n      if (data.data) {\n        albums.push(...data.data.map((album: any) => ({\n          id: album.id.toString(),\n          title: album.title,\n          releaseDate: album.release_date,\n          albumType: this.mapDeezerAlbumType(album.record_type),\n          trackCount: album.nb_tracks,\n          imageUrl: album.cover_medium || album.cover,\n          source: 'deezer' as const\n        })));\n      }\n      \n      // Дополнительный поиск последних релизов через search API\n      try {\n        const artistResponse = await fetch(`${this.baseUrl}/artist/${artistId}`);\n        if (artistResponse.ok) {\n          const artistData = await artistResponse.json();\n          const artistName = artistData.name;\n          \n          // Поиск последних релизов через search API\n          const searchResponse = await fetch(`${this.baseUrl}/search/album?q=artist:\"${encodeURIComponent(artistName)}\"&limit=50`);\n          if (searchResponse.ok) {\n            const searchData = await searchResponse.json();\n            if (searchData.data) {\n              const existingIds = new Set(albums.map(a => a.id));\n              \n              // Добавляем найденные альбомы, которых еще нет\n              searchData.data\n                .filter((album: any) => album.artist && album.artist.id.toString() === artistId && !existingIds.has(album.id.toString()))\n                .forEach((album: any) => {\n                  albums.push({\n                    id: album.id.toString(),\n                    title: album.title,\n                    releaseDate: album.release_date,\n                    albumType: this.mapDeezerAlbumType(album.record_type),\n                    trackCount: album.nb_tracks,\n                    imageUrl: album.cover_medium || album.cover,\n                    source: 'deezer' as const\n                  });\n                });\n            }\n          }\n        }\n      } catch (searchError) {\n        console.log(`🟡 Deezer: Дополнительный поиск не удался для артиста ${artistId}`);\n      }\n      \n      // Удаляем дубликаты и сортируем по дате выхода\n      const uniqueAlbums = albums.filter((album, index, self) => \n        index === self.findIndex(a => a.id === album.id)\n      ).sort((a, b) => new Date(b.releaseDate || '1900-01-01').getTime() - new Date(a.releaseDate || '1900-01-01').getTime());\n      \n      console.log(`🟡 Deezer: Найдено ${uniqueAlbums.length} уникальных альбомов`);\n      return uniqueAlbums;\n      \n    } catch (error) {\n      console.error(`🟡 Deezer error при получении альбомов для ${artistId}:`, error instanceof Error ? error.message : String(error));\n      return [];\n    }\n  }\n  \n  private mapDeezerAlbumType(recordType?: string): 'album' | 'single' | 'compilation' {\n    if (!recordType) return 'album';\n    \n    const type = recordType.toLowerCase();\n    if (type.includes('single') || type.includes('ep')) return 'single';\n    if (type.includes('compilation') || type.includes('best')) return 'compilation';\n    return 'album';\n  }\n}\n\n// iTunes API клиент\nclass ITunesAPIClient {\n  private readonly baseUrl = 'https://itunes.apple.com';\n  \n  async searchArtist(artistName: string): Promise<UnifiedArtist | null> {\n    try {\n      console.log(`🍎 iTunes: Ищем артиста \"${artistName}\"`);\n      \n      const response = await fetch(\n        `${this.baseUrl}/search?term=${encodeURIComponent(artistName)}&entity=allArtist&attribute=allArtistTerm&limit=1`\n      );\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (!data.results || data.results.length === 0) {\n        console.log(`🍎 iTunes: Артист \"${artistName}\" не найден`);\n        return null;\n      }\n      \n      const artist = data.results[0];\n      \n      console.log(`🍎 iTunes: Найден \"${artist.artistName}\" (ID: ${artist.artistId})`);\n      \n      return {\n        id: artist.artistId.toString(),\n        name: artist.artistName,\n        genres: artist.primaryGenreName ? [artist.primaryGenreName] : undefined,\n        source: 'itunes'\n      };\n      \n    } catch (error) {\n      console.error(`🍎 iTunes error для \"${artistName}\":`, error instanceof Error ? error.message : String(error));\n      return null;\n    }\n  }\n  \n  async getArtistAlbums(artistId: string): Promise<UnifiedAlbum[]> {\n    try {\n      console.log(`🍎 iTunes: Получаем альбомы для артиста ${artistId}`);\n      \n      const response = await fetch(\n        `${this.baseUrl}/lookup?id=${artistId}&entity=album&limit=200`\n      );\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (!data.results || data.results.length <= 1) {\n        return [];\n      }\n      \n      // Первый результат - это информация об артисте, остальные - альбомы\n      const albums: UnifiedAlbum[] = data.results.slice(1).map((album: any) => ({\n        id: album.collectionId.toString(),\n        title: album.collectionName,\n        releaseDate: album.releaseDate ? album.releaseDate.split('T')[0] : undefined,\n        albumType: this.mapItunesAlbumType(album.collectionType),\n        trackCount: album.trackCount,\n        imageUrl: album.artworkUrl100 || album.artworkUrl60,\n        source: 'itunes' as const\n      }));\n      \n      console.log(`🍎 iTunes: Найдено ${albums.length} альбомов`);\n      return albums;\n      \n    } catch (error) {\n      console.error(`🍎 iTunes error при получении альбомов для ${artistId}:`, error instanceof Error ? error.message : String(error));\n      return [];\n    }\n  }\n  \n  // Поиск конкретного релиза для получения даты выхода\n  async searchReleaseDate(artistName: string, releaseTitle: string): Promise<string | null> {\n    try {\n      console.log(`🍎 iTunes: Ищем дату для \"${releaseTitle}\" от \"${artistName}\"`);\n      \n      const query = `${artistName} ${releaseTitle}`;\n      const response = await fetch(\n        `${this.baseUrl}/search?term=${encodeURIComponent(query)}&entity=album&limit=10`\n      );\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      if (!data.results || data.results.length === 0) {\n        console.log(`🍎 iTunes: Релиз \"${releaseTitle}\" не найден`);\n        return null;\n      }\n      \n      // Ищем наиболее подходящий результат\n      const bestMatch = data.results.find((album: any) => {\n        const titleMatch = album.collectionName?.toLowerCase().includes(releaseTitle.toLowerCase()) ||\n                          releaseTitle.toLowerCase().includes(album.collectionName?.toLowerCase());\n        const artistMatch = album.artistName?.toLowerCase().includes(artistName.toLowerCase()) ||\n                           artistName.toLowerCase().includes(album.artistName?.toLowerCase());\n        return titleMatch && artistMatch;\n      });\n      \n      if (bestMatch && bestMatch.releaseDate) {\n        const releaseDate = bestMatch.releaseDate.split('T')[0];\n        console.log(`🍎 iTunes: Найдена дата \"${releaseDate}\" для \"${releaseTitle}\"`);\n        return releaseDate;\n      }\n      \n      console.log(`🍎 iTunes: Подходящий релиз не найден`);\n      return null;\n      \n    } catch (error) {\n      console.error(`🍎 iTunes error при поиске даты для \"${releaseTitle}\":`, error instanceof Error ? error.message : String(error));\n      return null;\n    }\n  }\n\n  private mapItunesAlbumType(collectionType?: string): 'album' | 'single' | 'compilation' {\n    if (!collectionType) return 'album';\n    \n    const type = collectionType.toLowerCase();\n    if (type.includes('single') || type.includes('ep')) return 'single';\n    if (type.includes('compilation')) return 'compilation';\n    return 'album';\n  }\n}\n\n// Основной комбинированный клиент\nexport class CombinedMusicAPI {\n  private deezer = new DeezerAPIClient();\n  private itunes = new ITunesAPIClient();\n  \n  // Поиск артиста с fallback логикой\n  async findArtist(artistName: string): Promise<{\n    artist: UnifiedArtist;\n    albums: UnifiedAlbum[];\n  } | null> {\n    console.log(`🎵 Комбинированный поиск: \"${artistName}\"`);\n    \n    // Сначала пробуем Deezer (лучше для российских артистов)\n    let artist = await this.deezer.searchArtist(artistName);\n    let albums: UnifiedAlbum[] = [];\n    \n    if (artist) {\n      albums = await this.deezer.getArtistAlbums(artist.id);\n      \n      if (albums.length > 0) {\n        console.log(`✅ Deezer успешно: ${albums.length} альбомов для \"${artist.name}\"`);\n        return { artist, albums };\n      } else {\n        console.log(`⚠️ Deezer: найден артист, но нет альбомов. Пробуем iTunes...`);\n      }\n    }\n    \n    // Fallback к iTunes API\n    artist = await this.itunes.searchArtist(artistName);\n    \n    if (artist) {\n      albums = await this.itunes.getArtistAlbums(artist.id);\n      \n      if (albums.length > 0) {\n        console.log(`✅ iTunes успешно: ${albums.length} альбомов для \"${artist.name}\"`);\n        return { artist, albums };\n      } else {\n        console.log(`⚠️ iTunes: найден артист, но нет альбомов`);\n        // Возвращаем артиста без альбомов\n        return { artist, albums: [] };\n      }\n    }\n    \n    console.log(`❌ Артист \"${artistName}\" не найден ни в одном API`);\n    return null;\n  }\n  \n  // Пакетный поиск артистов\n  async findMultipleArtists(artistNames: string[]): Promise<{\n    successful: Array<{ artist: UnifiedArtist; albums: UnifiedAlbum[] }>;\n    failed: string[];\n  }> {\n    console.log(`🎵 Пакетный поиск ${artistNames.length} артистов...`);\n    \n    const successful: Array<{ artist: UnifiedArtist; albums: UnifiedAlbum[] }> = [];\n    const failed: string[] = [];\n    \n    for (const artistName of artistNames) {\n      try {\n        const result = await this.findArtist(artistName);\n        \n        if (result) {\n          successful.push(result);\n        } else {\n          failed.push(artistName);\n        }\n        \n        // Пауза между запросами для уважения к API\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n      } catch (error) {\n        console.error(`❌ Ошибка при поиске \"${artistName}\":`, error);\n        failed.push(artistName);\n      }\n    }\n    \n    console.log(`📊 Пакетный поиск завершен: ${successful.length} успешно, ${failed.length} неудачно`);\n    \n    return { successful, failed };\n  }\n  \n  // Поиск даты релиза через iTunes (fallback для пропущенных дат)\n  async findReleaseDate(artistName: string, releaseTitle: string): Promise<string | null> {\n    return await this.itunes.searchReleaseDate(artistName, releaseTitle);\n  }\n\n  // Тест доступности API\n  async testAPIs(): Promise<{ deezer: boolean; itunes: boolean }> {\n    console.log('🧪 Тестируем доступность музыкальных API...');\n    \n    const testArtist = 'The Beatles';\n    \n    // Тест Deezer\n    let deezerWorks = false;\n    try {\n      const deezerResult = await this.deezer.searchArtist(testArtist);\n      deezerWorks = deezerResult !== null;\n    } catch (error) {\n      console.error('🟡 Deezer недоступен:', error instanceof Error ? error.message : String(error));\n    }\n    \n    // Тест iTunes\n    let itunesWorks = false;\n    try {\n      const itunesResult = await this.itunes.searchArtist(testArtist);\n      itunesWorks = itunesResult !== null;\n    } catch (error) {\n      console.error('🍎 iTunes недоступен:', error instanceof Error ? error.message : String(error));\n    }\n    \n    console.log(`🧪 Результаты тестов: Deezer: ${deezerWorks ? '✅' : '❌'}, iTunes: ${itunesWorks ? '✅' : '❌'}`);\n    \n    return { deezer: deezerWorks, itunes: itunesWorks };\n  }\n}\n\n// Экспорт единственного экземпляра\nexport const musicAPI = new CombinedMusicAPI();\n\n// Статистика для мониторинга\nexport interface APIStats {\n  totalSearches: number;\n  deezerSuccess: number;\n  itunesSuccess: number;\n  totalFailed: number;\n  averageAlbumsPerArtist: number;\n}\n\nclass APIStatsTracker {\n  private stats: APIStats = {\n    totalSearches: 0,\n    deezerSuccess: 0,\n    itunesSuccess: 0,\n    totalFailed: 0,\n    averageAlbumsPerArtist: 0\n  };\n  \n  recordSearch(source: 'deezer' | 'itunes' | 'failed', albumCount: number = 0) {\n    this.stats.totalSearches++;\n    \n    if (source === 'deezer') {\n      this.stats.deezerSuccess++;\n    } else if (source === 'itunes') {\n      this.stats.itunesSuccess++;\n    } else {\n      this.stats.totalFailed++;\n    }\n    \n    // Обновляем среднее количество альбомов\n    const totalSuccessful = this.stats.deezerSuccess + this.stats.itunesSuccess;\n    if (totalSuccessful > 0) {\n      this.stats.averageAlbumsPerArtist = \n        (this.stats.averageAlbumsPerArtist * (totalSuccessful - 1) + albumCount) / totalSuccessful;\n    }\n  }\n  \n  getStats(): APIStats {\n    return { ...this.stats };\n  }\n  \n  reset() {\n    this.stats = {\n      totalSearches: 0,\n      deezerSuccess: 0,\n      itunesSuccess: 0,\n      totalFailed: 0,\n      averageAlbumsPerArtist: 0\n    };\n  }\n}\n\nexport const apiStatsTracker = new APIStatsTracker();","size_bytes":16736},"server/musicbrainz-client.ts":{"content":"// MusicBrainz API Client - Free music metadata API\n// No API key required, just rate limiting compliance\n// Docs: https://musicbrainz.org/doc/Development/XML_Web_Service/Version_2\n\nconst MUSICBRAINZ_API_URL = 'https://musicbrainz.org/ws/2';\nconst USER_AGENT = 'MusicReviewPlatform/1.0.0 (https://music-review-platform.replit.app)';\n\n// Rate limiting: 1 request per second per IP\nlet lastRequestTime = 0;\nconst RATE_LIMIT_DELAY = 1000; // 1 second\n\nasync function rateLimit() {\n  const now = Date.now();\n  const timeSinceLastRequest = now - lastRequestTime;\n  \n  if (timeSinceLastRequest < RATE_LIMIT_DELAY) {\n    const delay = RATE_LIMIT_DELAY - timeSinceLastRequest;\n    await new Promise(resolve => setTimeout(resolve, delay));\n  }\n  \n  lastRequestTime = Date.now();\n}\n\nasync function musicBrainzRequest(endpoint: string, params: Record<string, string>) {\n  await rateLimit();\n  \n  const url = new URL(`${MUSICBRAINZ_API_URL}/${endpoint}`);\n  url.searchParams.set('fmt', 'json');\n  \n  for (const [key, value] of Object.entries(params)) {\n    url.searchParams.set(key, value);\n  }\n  \n  const response = await fetch(url.toString(), {\n    headers: {\n      'User-Agent': USER_AGENT,\n      'Accept': 'application/json'\n    }\n  });\n  \n  if (!response.ok) {\n    throw new Error(`MusicBrainz API error: ${response.status} ${response.statusText}`);\n  }\n  \n  return response.json();\n}\n\nexport interface MusicBrainzArtist {\n  id: string;\n  name: string;\n  'sort-name': string;\n  disambiguation?: string;\n  'type-id'?: string;\n  type?: string;\n  'life-span'?: {\n    begin?: string;\n    end?: string;\n  };\n  area?: {\n    id: string;\n    name: string;\n  };\n  tags?: Array<{\n    count: number;\n    name: string;\n  }>;\n  score: number;\n}\n\nexport interface MusicBrainzRelease {\n  id: string;\n  title: string;\n  date?: string;\n  'release-date'?: string;\n  'primary-type'?: string;\n  'secondary-types'?: string[];\n  'track-count'?: number;\n  'cover-art-archive'?: {\n    artwork: boolean;\n    count: number;\n    front: boolean;\n    back: boolean;\n  };\n  'text-representation'?: {\n    language: string;\n    script: string;\n  };\n  packaging?: string;\n  status?: string;\n  'status-id'?: string;\n  score?: number;\n}\n\nexport interface MusicBrainzReleaseGroup {\n  id: string;\n  title: string;\n  'first-release-date'?: string;\n  'primary-type'?: string;\n  'secondary-types'?: string[];\n  disambiguation?: string;\n  tags?: Array<{\n    count: number;\n    name: string;\n  }>;\n  score: number;\n}\n\nexport async function searchArtists(artistName: string, limit: number = 10): Promise<MusicBrainzArtist[]> {\n  try {\n    console.log(`🔍 Searching MusicBrainz for artist: ${artistName}`);\n    \n    const data = await musicBrainzRequest('artist', {\n      'query': artistName,\n      'limit': limit.toString()\n    });\n    \n    return data.artists || [];\n  } catch (error) {\n    console.error(`Error searching for artist ${artistName}:`, error);\n    return [];\n  }\n}\n\nexport async function getArtistReleaseGroups(artistId: string, limit: number = 100): Promise<MusicBrainzReleaseGroup[]> {\n  try {\n    console.log(`📀 Getting release groups for artist: ${artistId}`);\n    \n    const data = await musicBrainzRequest('release-group', {\n      'artist': artistId,\n      'limit': limit.toString(),\n      'inc': 'tags'\n    });\n    \n    return data['release-groups'] || [];\n  } catch (error) {\n    console.error(`Error getting release groups for artist ${artistId}:`, error);\n    return [];\n  }\n}\n\nexport async function getReleaseGroupReleases(releaseGroupId: string): Promise<MusicBrainzRelease[]> {\n  try {\n    console.log(`💿 Getting releases for release group: ${releaseGroupId}`);\n    \n    const data = await musicBrainzRequest('release', {\n      'release-group': releaseGroupId,\n      'inc': 'release-events+labels+discids+recordings',\n      'limit': '25'\n    });\n    \n    return data.releases || [];\n  } catch (error) {\n    console.error(`Error getting releases for release group ${releaseGroupId}:`, error);\n    return [];\n  }\n}\n\nexport async function getArtistById(artistId: string): Promise<MusicBrainzArtist | null> {\n  try {\n    console.log(`👤 Getting artist details: ${artistId}`);\n    \n    const data = await musicBrainzRequest(`artist/${artistId}`, {\n      'inc': 'tags+genres+area+life-span'\n    });\n    \n    return data;\n  } catch (error) {\n    console.error(`Error getting artist ${artistId}:`, error);\n    return null;\n  }\n}\n\n// Helper function to find the best match artist by name\nexport async function findBestArtistMatch(artistName: string): Promise<MusicBrainzArtist | null> {\n  const artists = await searchArtists(artistName, 5);\n  \n  if (artists.length === 0) {\n    return null;\n  }\n  \n  // Sort by score (MusicBrainz provides relevance score)\n  artists.sort((a, b) => b.score - a.score);\n  \n  // Prefer exact name matches\n  const exactMatch = artists.find(artist => \n    artist.name.toLowerCase().trim() === artistName.toLowerCase().trim()\n  );\n  \n  if (exactMatch) {\n    return exactMatch;\n  }\n  \n  // Return highest scored result\n  return artists[0];\n}\n\n// Get artist's complete discography with release groups\nexport async function getArtistDiscography(artistId: string): Promise<{\n  releaseGroups: MusicBrainzReleaseGroup[];\n  releases: MusicBrainzRelease[];\n}> {\n  try {\n    console.log(`📚 Getting complete discography for artist: ${artistId}`);\n    \n    const releaseGroups = await getArtistReleaseGroups(artistId);\n    const releases: MusicBrainzRelease[] = [];\n    \n    // For each release group, get the actual releases\n    for (const releaseGroup of releaseGroups) {\n      const groupReleases = await getReleaseGroupReleases(releaseGroup.id);\n      releases.push(...groupReleases);\n      \n      // Small delay to be nice to the API\n      await new Promise(resolve => setTimeout(resolve, 200));\n    }\n    \n    console.log(`📊 Found ${releaseGroups.length} release groups and ${releases.length} releases`);\n    \n    return {\n      releaseGroups,\n      releases\n    };\n  } catch (error) {\n    console.error(`Error getting discography for artist ${artistId}:`, error);\n    return {\n      releaseGroups: [],\n      releases: []\n    };\n  }\n}\n\n// Extract genres from MusicBrainz tags\nexport function extractGenresFromTags(tags?: Array<{ count: number; name: string }>): string[] {\n  if (!tags || tags.length === 0) {\n    return [];\n  }\n  \n  // Sort by count (popularity) and take most popular tags\n  return tags\n    .sort((a, b) => b.count - a.count)\n    .slice(0, 5) // Top 5 tags\n    .map(tag => tag.name);\n}\n\n// Format release date consistently\nexport function formatReleaseDate(date?: string): string {\n  if (!date) {\n    return new Date().toISOString().split('T')[0]; // Default to today\n  }\n  \n  // MusicBrainz dates can be YYYY, YYYY-MM, or YYYY-MM-DD\n  const parts = date.split('-');\n  \n  if (parts.length === 1) {\n    // Only year\n    return `${parts[0]}-01-01`;\n  } else if (parts.length === 2) {\n    // Year and month\n    return `${parts[0]}-${parts[1]}-01`;\n  } else {\n    // Full date\n    return date;\n  }\n}\n\n// Test function to verify MusicBrainz connection\nexport async function testMusicBrainzConnection(): Promise<boolean> {\n  try {\n    console.log('🔐 Testing MusicBrainz API connection...');\n    \n    const artists = await searchArtists('The Beatles', 1);\n    \n    if (artists.length > 0) {\n      console.log(`✅ MusicBrainz connected! Found: ${artists[0].name}`);\n      return true;\n    } else {\n      console.log('❌ No results from MusicBrainz');\n      return false;\n    }\n  } catch (error) {\n    console.error('❌ MusicBrainz connection failed:', error);\n    return false;\n  }\n}","size_bytes":7605},"server/russian-music-parsers.ts":{"content":"// Универсальный парсер российских музыкальных сервисов\n// Поддерживает MTS Music плейлисты и чарты\n// Извлекает артистов для дальнейшего поиска через Deezer/iTunes API\n\nimport * as cheerio from 'cheerio';\n\n// Интерфейс для результата парсинга\nexport interface ParsedTrack {\n  artist: string;\n  title: string;\n  position?: number;\n}\n\nexport interface PlaylistParseResult {\n  name: string;\n  description?: string;\n  tracks: ParsedTrack[];\n  uniqueArtists: string[];\n}\n\n// Старый интерфейс для обратной совместимости\nexport interface RussianTrack {\n  artist: string;\n  title: string;\n  duration?: string;\n  album?: string;\n  year?: string;\n}\n\n// Базовый парсер для российских сервисов\nabstract class RussianMusicParser {\n  abstract serviceName: string;\n  abstract baseUrl: string;\n  \n  // Очистка имени артиста от лишних символов\n  protected cleanArtistName(artist: string): string {\n    return artist\n      .trim()\n      .replace(/^feat\\.?\\s*/i, '') // Убираем \"feat\" в начале\n      .replace(/\\s*feat\\.?\\s*.+$/i, '') // Убираем всё после \"feat\"\n      .replace(/\\s*\\(.*\\)$/, '') // Убираем скобки в конце\n      .replace(/\\s+/g, ' ') // Нормализуем пробелы\n      .trim();\n  }\n  \n  // Получение уникальных артистов из треков\n  protected extractUniqueArtists(tracks: ParsedTrack[]): string[] {\n    const artistSet = new Set<string>();\n    \n    for (const track of tracks) {\n      const cleanedArtist = this.cleanArtistName(track.artist);\n      \n      if (cleanedArtist && cleanedArtist.length > 1) {\n        artistSet.add(cleanedArtist);\n        \n        // Обрабатываем коллаборации (feat, &, ,)\n        const collaborators = this.extractCollaborators(cleanedArtist);\n        collaborators.forEach(collaborator => {\n          if (collaborator.length > 1) {\n            artistSet.add(collaborator);\n          }\n        });\n      }\n    }\n    \n    return Array.from(artistSet).sort();\n  }\n  \n  // Извлечение коллабораторов из имени артиста\n  private extractCollaborators(artistName: string): string[] {\n    const separators = [' feat. ', ' feat ', ' ft. ', ' ft ', ' & ', ', ', ' x ', ' X '];\n    let artists = [artistName];\n    \n    for (const separator of separators) {\n      artists = artists.flatMap(artist => \n        artist.split(separator).map(a => this.cleanArtistName(a))\n      );\n    }\n    \n    return artists.filter(artist => artist && artist.length > 1);\n  }\n  \n  abstract parsePlaylist(url: string): Promise<PlaylistParseResult>;\n}\n\n// Парсер MTS Music\nexport class MTSMusicParser extends RussianMusicParser {\n  serviceName = 'MTS Music';\n  baseUrl = 'https://music.mts.ru';\n  \n  async parsePlaylist(url: string): Promise<PlaylistParseResult> {\n    console.log(`🎵 MTS Music: Парсим плейлист ${url}`);\n    \n    try {\n      const response = await fetch(url, {\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n          'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',\n          'Accept-Encoding': 'gzip, deflate, br',\n          'DNT': '1',\n          'Connection': 'keep-alive',\n          'Upgrade-Insecure-Requests': '1',\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const html = await response.text();\n      const $ = cheerio.load(html);\n      \n      // Пытаемся определить тип страницы и извлечь данные\n      let result: PlaylistParseResult;\n      \n      if (this.isChartPage(url)) {\n        result = this.parseChart($, url);\n      } else {\n        result = this.parsePlaylistPage($, url);\n      }\n      \n      console.log(`🎵 MTS Music: Найдено ${result.tracks.length} треков, ${result.uniqueArtists.length} уникальных артистов`);\n      \n      return result;\n      \n    } catch (error) {\n      console.error(`❌ MTS Music парсинг error для ${url}:`, error instanceof Error ? error.message : String(error));\n      \n      return {\n        name: 'Ошибка парсинга',\n        tracks: [],\n        uniqueArtists: []\n      };\n    }\n  }\n  \n  // Проверка, является ли URL чартом\n  private isChartPage(url: string): boolean {\n    return url.includes('/chart') || url.includes('/top') || url.includes('/hit');\n  }\n  \n  // Парсинг страницы чарта\n  private parseChart($: cheerio.CheerioAPI, url: string): PlaylistParseResult {\n    console.log('📊 Парсим как чарт...');\n    \n    const tracks: ParsedTrack[] = [];\n    \n    // Возможные селекторы для треков в чарте\n    const trackSelectors = [\n      '.track-item', '.chart-item', '.song-item', '.music-item',\n      '[class*=\"track\"]', '[class*=\"song\"]', '[class*=\"chart\"]'\n    ];\n    \n    let tracksFound = false;\n    \n    for (const selector of trackSelectors) {\n      const trackElements = $(selector);\n      \n      if (trackElements.length > 0) {\n        console.log(`📊 Найдены треки с селектором: ${selector} (${trackElements.length} элементов)`);\n        \n        trackElements.each((index, element) => {\n          const track = this.extractTrackFromElement($, $(element), index + 1);\n          if (track) {\n            tracks.push(track);\n          }\n        });\n        \n        tracksFound = true;\n        break;\n      }\n    }\n    \n    // Если не нашли треки стандартными селекторами, пробуем JSON-LD\n    if (!tracksFound) {\n      const jsonLdTracks = this.extractTracksFromJsonLd($);\n      tracks.push(...jsonLdTracks);\n    }\n    \n    const playlistName = this.extractChartName($) || 'Чарт MTS Music';\n    \n    return {\n      name: playlistName,\n      description: `Чарт с ${tracks.length} треками`,\n      tracks,\n      uniqueArtists: this.extractUniqueArtists(tracks)\n    };\n  }\n  \n  // Парсинг обычного плейлиста\n  private parsePlaylistPage($: cheerio.CheerioAPI, url: string): PlaylistParseResult {\n    console.log('🎵 Парсим как плейлист...');\n    \n    const tracks: ParsedTrack[] = [];\n    \n    // Селекторы для плейлистов\n    const playlistSelectors = [\n      '.playlist-track', '.track', '.song', '.music-track',\n      '[class*=\"playlist\"] [class*=\"track\"]',\n      '[class*=\"playlist\"] [class*=\"song\"]'\n    ];\n    \n    let tracksFound = false;\n    \n    for (const selector of playlistSelectors) {\n      const trackElements = $(selector);\n      \n      if (trackElements.length > 0) {\n        console.log(`🎵 Найдены треки с селектором: ${selector} (${trackElements.length} элементов)`);\n        \n        trackElements.each((index, element) => {\n          const track = this.extractTrackFromElement($, $(element), index + 1);\n          if (track) {\n            tracks.push(track);\n          }\n        });\n        \n        tracksFound = true;\n        break;\n      }\n    }\n    \n    // Попытка через JSON-LD\n    if (!tracksFound) {\n      const jsonLdTracks = this.extractTracksFromJsonLd($);\n      tracks.push(...jsonLdTracks);\n    }\n    \n    const playlistName = this.extractPlaylistName($) || 'Плейлист MTS Music';\n    const description = this.extractPlaylistDescription($);\n    \n    return {\n      name: playlistName,\n      description,\n      tracks,\n      uniqueArtists: this.extractUniqueArtists(tracks)\n    };\n  }\n  \n  // Извлечение информации о треке из DOM элемента\n  private extractTrackFromElement($: cheerio.CheerioAPI, element: cheerio.Cheerio<any>, position: number): ParsedTrack | null {\n    try {\n      // Возможные селекторы для артиста\n      const artistSelectors = [\n        '.artist', '.track-artist', '.song-artist', '.performer',\n        '[class*=\"artist\"]', '[class*=\"performer\"]',\n        '.track-info .artist', '.song-info .artist'\n      ];\n      \n      // Возможные селекторы для названия\n      const titleSelectors = [\n        '.title', '.track-title', '.song-title', '.track-name', '.song-name',\n        '[class*=\"title\"]', '[class*=\"name\"]',\n        '.track-info .title', '.song-info .title'\n      ];\n      \n      let artist = '';\n      let title = '';\n      \n      // Ищем артиста\n      for (const selector of artistSelectors) {\n        const artistElement = element.find(selector).first();\n        if (artistElement.length > 0) {\n          artist = artistElement.text().trim();\n          break;\n        }\n      }\n      \n      // Ищем название\n      for (const selector of titleSelectors) {\n        const titleElement = element.find(selector).first();\n        if (titleElement.length > 0) {\n          title = titleElement.text().trim();\n          break;\n        }\n      }\n      \n      // Альтернативный способ - ищем в атрибутах data-*\n      if (!artist || !title) {\n        const dataArtist = element.attr('data-artist') || element.find('[data-artist]').first().attr('data-artist');\n        const dataTitle = element.attr('data-title') || element.find('[data-title]').first().attr('data-title');\n        \n        if (dataArtist) artist = dataArtist;\n        if (dataTitle) title = dataTitle;\n      }\n      \n      // Если все еще не нашли, пробуем распарсить из общего текста\n      if (!artist || !title) {\n        const fullText = element.text().trim();\n        const match = fullText.match(/^(.+?)\\s*[-–—]\\s*(.+)$/);\n        \n        if (match) {\n          artist = match[1].trim();\n          title = match[2].trim();\n        }\n      }\n      \n      if (artist && title) {\n        return {\n          artist: this.cleanArtistName(artist),\n          title: title.trim(),\n          position\n        };\n      }\n      \n      return null;\n      \n    } catch (error) {\n      console.error('Ошибка при извлечении трека:', error);\n      return null;\n    }\n  }\n  \n  // Извлечение треков из JSON-LD разметки\n  private extractTracksFromJsonLd($: cheerio.CheerioAPI): ParsedTrack[] {\n    const tracks: ParsedTrack[] = [];\n    \n    try {\n      $('script[type=\"application/ld+json\"]').each((_, element) => {\n        try {\n          const jsonData = JSON.parse($(element).html() || '');\n          \n          // Ищем структуры, которые могут содержать треки\n          if (jsonData['@type'] === 'MusicPlaylist' && jsonData.track) {\n            jsonData.track.forEach((track: any, index: number) => {\n              if (track.byArtist && track.name) {\n                tracks.push({\n                  artist: this.cleanArtistName(track.byArtist.name || track.byArtist),\n                  title: track.name,\n                  position: index + 1\n                });\n              }\n            });\n          }\n          \n        } catch (jsonError) {\n          // Игнорируем невалидный JSON\n        }\n      });\n      \n    } catch (error) {\n      console.error('Ошибка при парсинге JSON-LD:', error);\n    }\n    \n    return tracks;\n  }\n  \n  // Извлечение названия чарта\n  private extractChartName($: cheerio.CheerioAPI): string {\n    const titleSelectors = [\n      'h1', '.chart-title', '.page-title', '.title',\n      '[class*=\"chart\"] [class*=\"title\"]',\n      'title'\n    ];\n    \n    for (const selector of titleSelectors) {\n      const element = $(selector).first();\n      if (element.length > 0) {\n        const text = element.text().trim();\n        if (text && !text.toLowerCase().includes('mts music')) {\n          return text;\n        }\n      }\n    }\n    \n    return 'Чарт MTS Music';\n  }\n  \n  // Извлечение названия плейлиста\n  private extractPlaylistName($: cheerio.CheerioAPI): string {\n    const titleSelectors = [\n      '.playlist-title', '.playlist-name', 'h1', '.page-title', '.title',\n      '[class*=\"playlist\"] [class*=\"title\"]',\n      'title'\n    ];\n    \n    for (const selector of titleSelectors) {\n      const element = $(selector).first();\n      if (element.length > 0) {\n        const text = element.text().trim();\n        if (text && !text.toLowerCase().includes('mts music')) {\n          return text;\n        }\n      }\n    }\n    \n    return 'Плейлист MTS Music';\n  }\n  \n  // Извлечение описания плейлиста\n  private extractPlaylistDescription($: cheerio.CheerioAPI): string | undefined {\n    const descSelectors = [\n      '.playlist-description', '.description', '.about',\n      '[class*=\"playlist\"] [class*=\"description\"]',\n      'meta[name=\"description\"]'\n    ];\n    \n    for (const selector of descSelectors) {\n      const element = $(selector).first();\n      if (element.length > 0) {\n        const text = selector === 'meta[name=\"description\"]' \n          ? element.attr('content') \n          : element.text().trim();\n          \n        if (text && text.length > 10) {\n          return text;\n        }\n      }\n    }\n    \n    return undefined;\n  }\n}\n\n// Фабрика парсеров\nexport class RussianMusicParserFactory {\n  static createParser(url: string): RussianMusicParser | null {\n    if (url.includes('music.mts.ru')) {\n      return new MTSMusicParser();\n    }\n    \n    // Можно добавить другие парсеры:\n    // if (url.includes('zvuk.com')) return new ZvukParser();\n    // if (url.includes('yandex.ru/music')) return new YandexMusicParser();\n    \n    return null;\n  }\n  \n  static async parseAnyPlaylist(url: string): Promise<PlaylistParseResult | null> {\n    const parser = RussianMusicParserFactory.createParser(url);\n    \n    if (!parser) {\n      console.error(`❌ Неподдерживаемый сервис для URL: ${url}`);\n      return null;\n    }\n    \n    console.log(`🎵 Используем парсер: ${parser.serviceName}`);\n    return await parser.parsePlaylist(url);\n  }\n  \n  // Пакетный парсинг нескольких плейлистов\n  static async parseMultiplePlaylists(urls: string[]): Promise<{\n    successful: PlaylistParseResult[];\n    failed: string[];\n  }> {\n    console.log(`🎵 Пакетный парсинг ${urls.length} плейлистов...`);\n    \n    const successful: PlaylistParseResult[] = [];\n    const failed: string[] = [];\n    \n    for (const url of urls) {\n      try {\n        const result = await RussianMusicParserFactory.parseAnyPlaylist(url);\n        \n        if (result && result.tracks.length > 0) {\n          successful.push(result);\n          console.log(`✅ Успешно: ${result.name} (${result.tracks.length} треков)`);\n        } else {\n          failed.push(url);\n          console.log(`❌ Неудачно: ${url}`);\n        }\n        \n        // Пауза между запросами\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        \n      } catch (error) {\n        console.error(`❌ Ошибка парсинга ${url}:`, error);\n        failed.push(url);\n      }\n    }\n    \n    const totalTracks = successful.reduce((sum, playlist) => sum + playlist.tracks.length, 0);\n    const totalArtists = new Set(successful.flatMap(playlist => playlist.uniqueArtists)).size;\n    \n    console.log(`📊 Пакетный парсинг завершен:`);\n    console.log(`   ✅ Успешно: ${successful.length} плейлистов`);\n    console.log(`   ❌ Неудачно: ${failed.length} плейлистов`);\n    console.log(`   🎵 Всего треков: ${totalTracks}`);\n    console.log(`   👨‍🎤 Уникальных артистов: ${totalArtists}`);\n    \n    return { successful, failed };\n  }\n}\n\n// Экспорт основных функций\nexport const mtsParser = new MTSMusicParser();\nexport const parsePlaylist = RussianMusicParserFactory.parseAnyPlaylist;\nexport const parseMultiplePlaylists = RussianMusicParserFactory.parseMultiplePlaylists;\n\n// Старые функции для обратной совместимости\nexport async function parseMtsChart(url: string): Promise<RussianTrack[]> {\n  const result = await mtsParser.parsePlaylist(url);\n  \n  // Конвертируем в старый формат\n  return result.tracks.map(track => ({\n    artist: track.artist,\n    title: track.title\n  }));\n}\n\nexport function extractUniqueArtists(tracks: RussianTrack[]): string[] {\n  const artists = new Set<string>();\n  \n  tracks.forEach(track => {\n    // Добавляем основного артиста\n    artists.add(track.artist);\n    \n    // Если есть фичеринг (feat., ft., при участии)\n    const featMatch = track.artist.match(/^(.+?)\\s*(?:feat\\.|ft\\.|при участии|featuring)\\s*(.+)$/i);\n    if (featMatch) {\n      artists.add(featMatch[1].trim()); // Основной артист\n      artists.add(featMatch[2].trim()); // Приглашенный артист\n    }\n    \n    // Если есть коллаборация через &, и, x\n    const collabMatch = track.artist.match(/^(.+?)\\s*(?:&|и|x|×)\\s*(.+)$/i);\n    if (collabMatch) {\n      artists.add(collabMatch[1].trim());\n      artists.add(collabMatch[2].trim());\n    }\n  });\n  \n  return Array.from(artists)\n    .filter(artist => artist.length > 1)\n    .sort();\n}\n\n// Тестовая функция для проверки парсеров\nexport async function testRussianParsers(): Promise<void> {\n  console.log('🧪 ТЕСТИРОВАНИЕ РОССИЙСКИХ ПАРСЕРОВ\\n');\n  \n  // Тест MTS Music\n  console.log('📋 Тестируем MTS Music...');\n  const mtsTracks = await parseMtsChart('https://music.mts.ru/chart');\n  const mtsArtists = extractUniqueArtists(mtsTracks);\n  console.log(`🎤 MTS Music: ${mtsTracks.length} треков, ${mtsArtists.length} уникальных артистов\\n`);\n  \n  // Тест нового универсального парсера\n  console.log('📋 Тестируем универсальный парсер...');\n  const newResult = await parsePlaylist('https://music.mts.ru/chart');\n  console.log(`🎤 Универсальный: ${newResult?.tracks.length || 0} треков, ${newResult?.uniqueArtists.length || 0} уникальных артистов\\n`);\n  \n  if (mtsArtists.length > 0) {\n    console.log('\\n🎉 Российские парсеры работают!');\n    console.log('Примеры артистов:', mtsArtists.slice(0, 10).join(', '));\n  } else {\n    console.log('\\n😞 Парсеры не смогли извлечь артистов');\n  }\n}","size_bytes":19224},"server/scheduler.ts":{"content":"import { importFromYandexPlaylist, updateAllArtists } from './music-importer';\nimport { createImportJob, fillMissingReleaseDates } from './background-jobs';\nimport { storage } from './storage';\nimport * as cron from 'node-cron';\n\nexport async function runDailyMusicImport() {\n  console.log('🎵 Запуск ежедневного импорта музыки...');\n  \n  const startTime = new Date();\n  let totalStats = {\n    updatedArtists: 0,\n    newReleases: 0,\n    skippedReleases: 0,\n    errors: [] as string[]\n  };\n\n  // Создаем лог импорта\n  console.log('📝 Создаем лог автоматического импорта...');\n  const importLog = await storage.createImportLog({\n    startedAt: startTime,\n    status: 'running',\n    type: 'scheduled',\n    totalPlaylists: 0,\n    processedPlaylists: 0,\n    totalArtists: 0,\n    newReleases: 0,\n    skippedReleases: 0,\n    errors: 0,\n    playlistResults: []\n  });\n\n  // 1. Получаем активные плейлисты из БД\n  console.log('📋 Получаем активные плейлисты для автоимпорта...');\n  \n  const activePlayLists = await storage.getAutoImportPlaylists();\n  const enabledPlaylists = activePlayLists.filter(playlist => playlist.enabled);\n  \n  console.log(`📊 Найдено ${enabledPlaylists.length} активных плейлистов из ${activePlayLists.length} общих`);\n  \n  // Обновляем лог с количеством плейлистов\n  await storage.updateImportLog(importLog.id, {\n    totalPlaylists: enabledPlaylists.length\n  });\n  \n  if (enabledPlaylists.length === 0) {\n    console.log('⚠️ Нет активных плейлистов для импорта. Пропускаем этап импорта из плейлистов.');\n  } else {\n    console.log('🚀 Запускаем фоновые задания для активных плейлистов...');\n  }\n  \n  const backgroundJobIds: number[] = [];\n  \n  for (const playlist of enabledPlaylists) {\n    try {\n      console.log(`🔄 Запускаем фоновое задание для плейлиста: ${playlist.name} (${playlist.url})`);\n      \n      // Используем ID известного администратора для автоматического планировщика  \n      const systemUserId = '47235098'; // ID администратора системы\n      \n      const jobId = await createImportJob({\n        playlistUrl: playlist.url,\n        status: 'pending',\n        createdBy: systemUserId, // ID администратора\n      });\n      backgroundJobIds.push(jobId);\n      \n      console.log(`✅ Фоновое задание #${jobId} запущено для плейлиста \"${playlist.name}\"`);\n      \n      // Небольшая пауза между запусками заданий\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n    } catch (error) {\n      console.error(`❌ Ошибка при запуске фонового задания для плейлиста ${playlist.name}:`, error);\n      totalStats.errors.push(`Background job for ${playlist.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  \n  console.log(`🚀 Запущено ${backgroundJobIds.length} фоновых заданий для импорта плейлистов`);\n  console.log('⏳ Фоновые задания будут выполняться асинхронно без таймаутов');\n\n  // 2. Обновление существующих артистов\n  console.log('🔄 Обновляем существующих артистов...');\n  \n  try {\n    const updateResult = await updateAllArtists();\n    \n    totalStats.updatedArtists += updateResult.updatedArtists;\n    totalStats.newReleases += updateResult.newReleases;\n    totalStats.skippedReleases += updateResult.skippedReleases;\n    totalStats.errors.push(...updateResult.errors);\n    \n    console.log(`✅ Обновление завершено: +${updateResult.newReleases} релизов для ${updateResult.updatedArtists} артистов`);\n    \n  } catch (error) {\n    console.error('❌ Ошибка при обновлении артистов:', error);\n    totalStats.errors.push(`Artist update: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n\n  const endTime = new Date();\n  const duration = Math.round((endTime.getTime() - startTime.getTime()) / 1000);\n\n  // Обновляем лог импорта с финальными результатами\n  console.log('📝 Обновляем лог импорта с результатами...');\n  await storage.updateImportLog(importLog.id, {\n    completedAt: endTime,\n    status: totalStats.errors.length > 0 ? 'completed' : 'completed', // Всегда completed, даже с ошибками\n    processedPlaylists: backgroundJobIds.length,\n    newReleases: totalStats.newReleases,\n    skippedReleases: totalStats.skippedReleases,\n    errors: totalStats.errors.length,\n    errorMessage: totalStats.errors.length > 0 ? totalStats.errors.join('; ') : null,\n    playlistResults: enabledPlaylists.map((playlist, index) => ({\n      playlistName: playlist.name,\n      playlistUrl: playlist.url,\n      jobId: backgroundJobIds[index] || null,\n      status: backgroundJobIds[index] ? 'started' : 'skipped'\n    }))\n  });\n\n  // Финальный отчет\n  console.log('\\n📊 ИТОГИ ЕЖЕДНЕВНОГО ИМПОРТА:');\n  console.log(`📝 Лог импорта #${importLog.id} создан и обновлен`);\n  console.log(`⏱️  Время выполнения: ${duration} секунд`);\n  console.log(`🚀 Запущено фоновых заданий для плейлистов: ${backgroundJobIds.length}`);\n  console.log(`🔄 Обновлено артистов: ${totalStats.updatedArtists}`);\n  console.log(`💿 Новых релизов (только от обновления артистов): ${totalStats.newReleases}`);\n  console.log(`⏭️  Пропущено релизов: ${totalStats.skippedReleases}`);\n  console.log(`❌ Ошибок: ${totalStats.errors.length}`);\n  \n  if (backgroundJobIds.length > 0) {\n    console.log('\\n🎯 ID фоновых заданий для мониторинга:');\n    backgroundJobIds.forEach(jobId => console.log(`  - Задание #${jobId}`));\n    console.log('💡 Следите за прогрессом фоновых заданий в админ-панели');\n  }\n  \n  if (totalStats.errors.length > 0) {\n    console.log('\\n🔍 Детали ошибок:');\n    totalStats.errors.forEach(error => console.log(`  - ${error}`));\n  }\n\n  return {\n    ...totalStats,\n    backgroundJobIds,\n    importLogId: importLog.id\n  };\n}\n\n// Переменные для хранения активных задач cron\nlet scheduledTask: cron.ScheduledTask | null = null;\nlet weeklyReleaseDateTask: cron.ScheduledTask | null = null;\n\n// Запуск в 00:30 каждый день\nexport function scheduleDaily() {\n  console.log('⏰ Настройка автоматического планировщика для ежедневного импорта в 00:30');\n  \n  // Если уже есть запланированная задача, остановим её\n  if (scheduledTask) {\n    scheduledTask.stop();\n    console.log('🛑 Предыдущая задача остановлена');\n  }\n  \n  // Запланируем новую задачу на каждый день в 00:30\n  scheduledTask = cron.schedule('30 0 * * *', async () => {\n    console.log('🌅 Автоматический запуск ежедневного импорта музыки...');\n    \n    try {\n      const stats = await runDailyMusicImport();\n      console.log('✅ Автоматический импорт завершен успешно');\n      console.log(`📊 Итого: +${stats.newReleases} релизов, ${stats.updatedArtists} обновленных артистов, ${stats.errors.length} ошибок`);\n    } catch (error) {\n      console.error('❌ Ошибка автоматического импорта:', error);\n    }\n  }, {\n    timezone: \"Europe/Moscow\" // Московское время\n  });\n  \n  const now = new Date();\n  const nextRun = new Date();\n  \n  // Если сейчас уже после 00:30, то следующий запуск завтра\n  if (now.getHours() > 0 || (now.getHours() === 0 && now.getMinutes() >= 30)) {\n    nextRun.setDate(nextRun.getDate() + 1);\n  }\n  nextRun.setHours(0, 30, 0, 0);\n  \n  const msUntilNextRun = nextRun.getTime() - now.getTime();\n  const hoursUntilNextRun = Math.round(msUntilNextRun / (1000 * 60 * 60));\n  \n  console.log(`⏳ Следующий автоматический импорт через ${hoursUntilNextRun} часов (${nextRun.toLocaleString('ru')})`);\n  console.log('🚀 Автоматический планировщик активен!');\n  \n  return {\n    nextRun,\n    hoursUntilNextRun,\n    isActive: true\n  };\n}\n\n// Еженедельное заполнение пропущенных дат релизов (каждое воскресенье в 02:00)\nexport function scheduleWeeklyReleaseDateUpdate() {\n  console.log('📅 Настройка еженедельного обновления дат релизов (воскресенье 02:00)');\n  \n  // Если уже есть запланированная задача, остановим её\n  if (weeklyReleaseDateTask) {\n    weeklyReleaseDateTask.stop();\n    console.log('🛑 Предыдущая задача обновления дат остановлена');\n  }\n  \n  // Запланируем еженедельную задачу на воскресенье в 02:00\n  weeklyReleaseDateTask = cron.schedule('0 2 * * 0', async () => {\n    console.log('📅 Автоматический запуск обновления дат релизов...');\n    \n    try {\n      const result = await fillMissingReleaseDates();\n      console.log('✅ Обновление дат релизов завершено успешно');\n      console.log(`📊 Результат: обработано ${result.processed}, обновлено ${result.updated}, ошибок ${result.errors}`);\n    } catch (error) {\n      console.error('❌ Ошибка при обновлении дат релизов:', error);\n    }\n  }, {\n    timezone: \"Europe/Moscow\" // Московское время\n  });\n  \n  console.log('🚀 Еженедельное обновление дат релизов активировано!');\n}\n\n// Остановка автоматического планировщика\nexport function stopScheduler() {\n  let stopped = false;\n  \n  if (scheduledTask) {\n    scheduledTask.stop();\n    scheduledTask = null;\n    console.log('🛑 Автоматический планировщик остановлен');\n    stopped = true;\n  }\n  \n  if (weeklyReleaseDateTask) {\n    weeklyReleaseDateTask.stop();\n    weeklyReleaseDateTask = null;\n    console.log('🛑 Еженедельное обновление дат остановлено');\n    stopped = true;\n  }\n  \n  return stopped;\n}\n\n// Получение статуса планировщика\nexport function getSchedulerStatus() {\n  const isActive = scheduledTask ? scheduledTask.getStatus() === 'scheduled' : false;\n  \n  if (isActive) {\n    const now = new Date();\n    const nextRun = new Date();\n    \n    if (now.getHours() > 0 || (now.getHours() === 0 && now.getMinutes() >= 30)) {\n      nextRun.setDate(nextRun.getDate() + 1);\n    }\n    nextRun.setHours(0, 30, 0, 0);\n    \n    const msUntilNextRun = nextRun.getTime() - now.getTime();\n    const hoursUntilNextRun = Math.round(msUntilNextRun / (1000 * 60 * 60));\n    \n    return {\n      isActive: true,\n      nextRun,\n      hoursUntilNextRun\n    };\n  }\n  \n  return {\n    isActive: false,\n    nextRun: null,\n    hoursUntilNextRun: null\n  };\n}\n\n// Функция для ручного запуска импорта через админку\nexport async function manualImportTrigger(playlistUrl?: string) {\n  if (playlistUrl) {\n    console.log(`🎯 Ручной импорт плейлиста: ${playlistUrl}`);\n    // Для ручного запуска используем старый метод для совместимости\n    return await importFromYandexPlaylist(playlistUrl);\n  } else {\n    console.log('🎯 Ручной запуск полного импорта');\n    return await runDailyMusicImport();\n  }\n}","size_bytes":12581}},"version":1}