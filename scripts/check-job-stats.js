#!/usr/bin/env node

import 'dotenv/config';
import { db } from '../server/db.ts';
import { importJobs } from '../shared/schema.ts';
import { sql, eq } from 'drizzle-orm';

async function checkJobStats() {
  try {
    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–î–ê–ß –ò–ú–ü–û–†–¢–ê:');
    console.log('==================================================');

    const completed = await db.execute(sql`
      SELECT COUNT(*) as count FROM import_jobs WHERE status = 'completed'
    `);
    
    const processing = await db.execute(sql`
      SELECT COUNT(*) as count FROM import_jobs WHERE status = 'processing'
    `);
    
    const failed = await db.execute(sql`
      SELECT COUNT(*) as count FROM import_jobs WHERE status = 'failed'
    `);
    
    const pending = await db.execute(sql`
      SELECT COUNT(*) as count FROM import_jobs WHERE status = 'pending'
    `);
    
    const completedCount = parseInt(completed.rows[0].count);
    const processingCount = parseInt(processing.rows[0].count);
    const failedCount = parseInt(failed.rows[0].count);
    const pendingCount = parseInt(pending.rows[0].count);
    const totalCount = completedCount + processingCount + failedCount + pendingCount;
    
    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${completedCount}`);
    console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: ${processingCount}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${failedCount}`);
    console.log(`‚è≥ –û–∂–∏–¥–∞–µ—Ç: ${pendingCount}`);
    console.log(`üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${totalCount}`);
    
    const totalPlaylists = 24;
    const progress = Math.round((completedCount / totalPlaylists) * 100);
    console.log(`\nüéØ –ü–†–û–ì–†–ï–°–°: ${completedCount}/${totalPlaylists} –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ (${progress}%)`);
    
    if (completedCount > 0) {
      console.log(`\n‚è±Ô∏è –í–†–ï–ú–Ø –†–ê–ë–û–¢–´:`);
      const firstJob = await db.execute(sql`
        SELECT created_at FROM import_jobs 
        WHERE status = 'completed' 
        ORDER BY created_at ASC 
        LIMIT 1
      `);
      
      const lastJob = await db.execute(sql`
        SELECT completed_at FROM import_jobs 
        WHERE status = 'completed' 
        ORDER BY completed_at DESC 
        LIMIT 1
      `);
      
      if (firstJob.rows[0] && lastJob.rows[0]) {
        const startTime = new Date(firstJob.rows[0].created_at);
        const endTime = new Date(lastJob.rows[0].completed_at);
        const totalTime = Math.round((endTime - startTime) / (1000 * 60)); // –º–∏–Ω—É—Ç—ã
        const avgTime = Math.round(totalTime / completedCount);
        
        console.log(`   –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞: ${startTime.toLocaleTimeString()}`);
        console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è: ${endTime.toLocaleTimeString()}`);
        console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime} –º–∏–Ω—É—Ç`);
        console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç: ${avgTime} –º–∏–Ω—É—Ç`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    process.exit(0);
  }
}

checkJobStats();
