#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ö–µ–º—ã Drizzle –∏ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ü–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∏–º–µ–Ω–∞—Ö –ø–æ–ª–µ–π –∏ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö
 */

import pkg from 'pg';
const { Pool } = pkg;
import { config } from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

const DATABASE_URL = process.env.DATABASE_URL;

if (!DATABASE_URL) {
  console.error('‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const pool = new Pool({
  connectionString: DATABASE_URL,
});

// –°—Ö–µ–º–∞ Drizzle (–≤—Ä—É—á–Ω—É—é, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TypeScript)
const DRIZZLE_SCHEMA = {
  users: {
    id: 'varchar',
    email: 'varchar',
    first_name: 'varchar',
    last_name: 'varchar',
    profile_image_url: 'varchar',
    nickname: 'varchar',
    is_admin: 'boolean',
    created_at: 'timestamp',
    updated_at: 'timestamp'
  },
  artists: {
    id: 'serial',
    name: 'varchar',
    deezer_id: 'varchar',
    itunes_id: 'varchar',
    yandex_music_id: 'varchar',
    yandex_music_url: 'text',
    image_url: 'text',
    genres: 'text',
    popularity: 'integer',
    followers: 'integer',
    last_updated: 'timestamp',
    total_tracks: 'integer',
    created_at: 'timestamp',
    updated_at: 'timestamp'
  },
  releases: {
    id: 'serial',
    title: 'varchar',
    artist_id: 'integer',
    release_date: 'timestamp',
    type: 'varchar',
    cover_url: 'text',
    streaming_links: 'jsonb',
    deezer_id: 'varchar',
    itunes_id: 'varchar',
    yandex_music_id: 'varchar',
    yandex_music_url: 'text',
    total_tracks: 'integer',
    is_test_data: 'boolean',
    created_at: 'timestamp',
    updated_at: 'timestamp'
  },
  auto_import_playlists: {
    id: 'serial',
    user_id: 'varchar',
    url: 'text',
    name: 'varchar',
    description: 'text',
    enabled: 'boolean',
    platform: 'varchar',
    is_active: 'boolean',
    last_imported_at: 'timestamp',
    sort_order: 'integer',
    created_at: 'timestamp',
    updated_at: 'timestamp'
  },
  import_logs: {
    id: 'serial',
    type: 'varchar',
    status: 'varchar',
    message: 'text',
    details: 'jsonb',
    created_at: 'timestamp'
  }
};

async function getTableSchema(tableName) {
  const query = `
    SELECT 
      column_name,
      data_type,
      is_nullable,
      column_default,
      character_maximum_length
    FROM information_schema.columns 
    WHERE table_name = $1 
    ORDER BY ordinal_position;
  `;
  
  const result = await pool.query(query, [tableName]);
  return result.rows;
}

function normalizeType(drizzleType, dbType, maxLength) {
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–ø—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const typeMap = {
    'character varying': 'varchar',
    'timestamp without time zone': 'timestamp',
    'timestamp with time zone': 'timestamp',
    'integer': 'integer',
    'serial': 'serial',
    'boolean': 'boolean',
    'text': 'text',
    'date': 'date',
    'jsonb': 'jsonb'
  };
  
  const normalizedDbType = typeMap[dbType] || dbType;
  
  // –î–ª—è varchar —É—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω—É
  if (drizzleType === 'varchar' && normalizedDbType === 'varchar') {
    return 'varchar';
  }
  
  return normalizedDbType;
}

async function checkTable(tableName, expectedSchema) {
  console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É: ${tableName}`);
  
  try {
    const actualSchema = await getTableSchema(tableName);
    
    if (actualSchema.length === 0) {
      console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      return false;
    }
    
    const actualFields = {};
    actualSchema.forEach(field => {
      actualFields[field.column_name] = {
        type: normalizeType(null, field.data_type, field.character_maximum_length),
        nullable: field.is_nullable === 'YES',
        default: field.column_default
      };
    });
    
    let hasErrors = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–ª–µ
    for (const [fieldName, expectedField] of Object.entries(expectedSchema)) {
      if (!actualFields[fieldName]) {
        console.log(`‚ùå –ü–æ–ª–µ ${fieldName} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ ${tableName}`);
        hasErrors = true;
      } else {
        const actualField = actualFields[fieldName];
        if (actualField.type !== expectedField) {
          console.log(`‚ö†Ô∏è  –ü–æ–ª–µ ${fieldName}: –æ–∂–∏–¥–∞–µ—Ç—Å—è ${expectedField}, –Ω–∞–π–¥–µ–Ω–æ ${actualField.type}`);
        } else {
          console.log(`‚úÖ –ü–æ–ª–µ ${fieldName}: ${actualField.type}`);
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—à–Ω–∏–µ –ø–æ–ª—è –≤ –ë–î
    for (const [fieldName, actualField] of Object.entries(actualFields)) {
      if (!expectedSchema[fieldName]) {
        console.log(`‚ÑπÔ∏è  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ ${fieldName}: ${actualField.type} (–Ω–µ –≤ —Å—Ö–µ–º–µ Drizzle)`);
      }
    }
    
    return !hasErrors;
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, error.message);
    return false;
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
  
  let allTablesValid = true;
  
  for (const [tableName, expectedSchema] of Object.entries(DRIZZLE_SCHEMA)) {
    const isValid = await checkTable(tableName, expectedSchema);
    if (!isValid) {
      allTablesValid = false;
    }
  }
  
  console.log('\n' + '='.repeat(50));
  
  if (allTablesValid) {
    console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ö–µ–º–µ Drizzle!');
  } else {
    console.log('‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ —Å—Ö–µ–º–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('   1. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ö–µ–º—É –≤ shared/schema.ts');
    console.log('   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    console.log('   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä');
  }
  
  await pool.end();
}

main().catch(console.error);
