#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

import 'dotenv/config';
import { db } from '../server/db.ts';
import { artists, releases } from '../shared/schema.ts';
import { sql } from 'drizzle-orm';

async function checkImportQuality() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n');
  
  try {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞—Ä—Ç–∏—Å—Ç–∞–º
    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–†–¢–ò–°–¢–û–í:');
    console.log('='.repeat(50));
    
    const artistStats = await db.execute(sql`
      SELECT 
        COUNT(*) as total_artists,
        COUNT(deezer_id) as with_deezer_id,
        COUNT(itunes_id) as with_itunes_id,
        COUNT(mts_music_id) as with_mts_id,
        COUNT(yandex_music_id) as with_yandex_id,
        COUNT(image_url) as with_image,
        COUNT(genres) as with_genres,
        COUNT(popularity) as with_popularity,
        COUNT(followers) as with_followers
      FROM artists
    `);
    
    const artistData = artistStats.rows[0];
    console.log(`–í—Å–µ–≥–æ –∞—Ä—Ç–∏—Å—Ç–æ–≤: ${artistData.total_artists}`);
    console.log(`–° Deezer ID: ${artistData.with_deezer_id} (${Math.round(artistData.with_deezer_id / artistData.total_artists * 100)}%)`);
    console.log(`–° iTunes ID: ${artistData.with_itunes_id} (${Math.round(artistData.with_itunes_id / artistData.total_artists * 100)}%)`);
    console.log(`–° MTS ID: ${artistData.with_mts_id} (${Math.round(artistData.with_mts_id / artistData.total_artists * 100)}%)`);
    console.log(`–° –Ø–Ω–¥–µ–∫—Å ID: ${artistData.with_yandex_id} (${Math.round(artistData.with_yandex_id / artistData.total_artists * 100)}%)`);
    console.log(`–° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: ${artistData.with_image} (${Math.round(artistData.with_image / artistData.total_artists * 100)}%)`);
    console.log(`–° –∂–∞–Ω—Ä–∞–º–∏: ${artistData.with_genres} (${Math.round(artistData.with_genres / artistData.total_artists * 100)}%)`);
    console.log(`–° –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å—é: ${artistData.with_popularity} (${Math.round(artistData.with_popularity / artistData.total_artists * 100)}%)`);
    console.log(`–° –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏: ${artistData.with_followers} (${Math.round(artistData.with_followers / artistData.total_artists * 100)}%)`);
    
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–õ–ò–ó–û–í:');
    console.log('='.repeat(50));
    
    const releaseStats = await db.execute(sql`
      SELECT 
        COUNT(*) as total_releases,
        COUNT(deezer_id) as with_deezer_id,
        COUNT(itunes_id) as with_itunes_id,
        COUNT(yandex_music_id) as with_yandex_id,
        COUNT(cover_url) as with_cover,
        COUNT(cover_small) as with_cover_small,
        COUNT(cover_medium) as with_cover_medium,
        COUNT(cover_big) as with_cover_big,
        COUNT(cover_xl) as with_cover_xl,
        COUNT(duration) as with_duration,
        COUNT(genres) as with_genres,
        COUNT(upc) as with_upc,
        COUNT(label) as with_label,
        COUNT(contributors) as with_contributors,
        COUNT(explicit_lyrics) as with_explicit_info,
        COUNT(streaming_links) as with_streaming_links
      FROM releases
    `);
    
    const releaseData = releaseStats.rows[0];
    console.log(`–í—Å–µ–≥–æ —Ä–µ–ª–∏–∑–æ–≤: ${releaseData.total_releases}`);
    console.log(`–° Deezer ID: ${releaseData.with_deezer_id} (${Math.round(releaseData.with_deezer_id / releaseData.total_releases * 100)}%)`);
    console.log(`–° iTunes ID: ${releaseData.with_itunes_id} (${Math.round(releaseData.with_itunes_id / releaseData.total_releases * 100)}%)`);
    console.log(`–° –Ø–Ω–¥–µ–∫—Å ID: ${releaseData.with_yandex_id} (${Math.round(releaseData.with_yandex_id / releaseData.total_releases * 100)}%)`);
    console.log(`–° –æ–±–ª–æ–∂–∫–æ–π: ${releaseData.with_cover} (${Math.round(releaseData.with_cover / releaseData.total_releases * 100)}%)`);
    console.log(`–° –º–∞–ª–µ–Ω—å–∫–æ–π –æ–±–ª–æ–∂–∫–æ–π: ${releaseData.with_cover_small} (${Math.round(releaseData.with_cover_small / releaseData.total_releases * 100)}%)`);
    console.log(`–° —Å—Ä–µ–¥–Ω–µ–π –æ–±–ª–æ–∂–∫–æ–π: ${releaseData.with_cover_medium} (${Math.round(releaseData.with_cover_medium / releaseData.total_releases * 100)}%)`);
    console.log(`–° –±–æ–ª—å—à–æ–π –æ–±–ª–æ–∂–∫–æ–π: ${releaseData.with_cover_big} (${Math.round(releaseData.with_cover_big / releaseData.total_releases * 100)}%)`);
    console.log(`–° XL –æ–±–ª–æ–∂–∫–æ–π: ${releaseData.with_cover_xl} (${Math.round(releaseData.with_cover_xl / releaseData.total_releases * 100)}%)`);
    console.log(`–° –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é: ${releaseData.with_duration} (${Math.round(releaseData.with_duration / releaseData.total_releases * 100)}%)`);
    console.log(`–° –∂–∞–Ω—Ä–∞–º–∏: ${releaseData.with_genres} (${Math.round(releaseData.with_genres / releaseData.total_releases * 100)}%)`);
    console.log(`–° UPC: ${releaseData.with_upc} (${Math.round(releaseData.with_upc / releaseData.total_releases * 100)}%)`);
    console.log(`–° –ª–µ–π–±–ª–æ–º: ${releaseData.with_label} (${Math.round(releaseData.with_label / releaseData.total_releases * 100)}%)`);
    console.log(`–° —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: ${releaseData.with_contributors} (${Math.round(releaseData.with_contributors / releaseData.total_releases * 100)}%)`);
    console.log(`–° explicit info: ${releaseData.with_explicit_info} (${Math.round(releaseData.with_explicit_info / releaseData.total_releases * 100)}%)`);
    console.log(`–°–æ streaming links: ${releaseData.with_streaming_links} (${Math.round(releaseData.with_streaming_links / releaseData.total_releases * 100)}%)`);
    
    console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('='.repeat(50));
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    const issues = [];
    
    if (artistData.with_deezer_id / artistData.total_artists < 0.8) {
      issues.push('‚ùå –ú–∞–ª–æ –∞—Ä—Ç–∏—Å—Ç–æ–≤ —Å Deezer ID - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∏—Å–∫ –≤ Deezer API');
    }
    
    if (releaseData.with_cover / releaseData.total_releases < 0.9) {
      issues.push('‚ùå –ú–∞–ª–æ —Ä–µ–ª–∏–∑–æ–≤ —Å –æ–±–ª–æ–∂–∫–∞–º–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ cover URLs');
    }
    
    if (releaseData.with_duration / releaseData.total_releases < 0.5) {
      issues.push('‚ùå –ú–∞–ª–æ —Ä–µ–ª–∏–∑–æ–≤ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ duration –æ—Ç API');
    }
    
    if (releaseData.with_genres / releaseData.total_releases < 0.7) {
      issues.push('‚ùå –ú–∞–ª–æ —Ä–µ–ª–∏–∑–æ–≤ —Å –∂–∞–Ω—Ä–∞–º–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É genres');
    }
    
    if (releaseData.with_streaming_links / releaseData.total_releases < 0.8) {
      issues.push('‚ùå –ú–∞–ª–æ —Ä–µ–ª–∏–∑–æ–≤ —Å–æ streaming links - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫');
    }
    
    if (issues.length === 0) {
      console.log('‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Ä–æ—à–µ–µ! –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.');
    } else {
      issues.forEach(issue => console.log(issue));
    }
    
    console.log('\nüìà –¢–û–ü –ê–†–¢–ò–°–¢–û–í –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ –†–ï–õ–ò–ó–û–í:');
    console.log('='.repeat(50));
    
    const topArtists = await db.execute(sql`
      SELECT 
        a.name,
        COUNT(r.id) as release_count,
        a.deezer_id,
        a.itunes_id,
        a.image_url
      FROM artists a
      LEFT JOIN releases r ON a.id = r.artist_id
      GROUP BY a.id, a.name, a.deezer_id, a.itunes_id, a.image_url
      ORDER BY release_count DESC
      LIMIT 10
    `);
    
    topArtists.rows.forEach((artist, index) => {
      console.log(`${index + 1}. ${artist.name} - ${artist.release_count} —Ä–µ–ª–∏–∑–æ–≤ (Deezer: ${artist.deezer_id ? '‚úÖ' : '‚ùå'}, iTunes: ${artist.itunes_id ? '‚úÖ' : '‚ùå'}, Image: ${artist.image_url ? '‚úÖ' : '‚ùå'})`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    process.exit(0);
  }
}

checkImportQuality();
