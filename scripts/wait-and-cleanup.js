#!/usr/bin/env node

import 'dotenv/config';
import { db } from '../server/db.ts';
import { importJobs } from '../shared/schema.ts';
import { sql, eq } from 'drizzle-orm';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.join(__dirname, '..');

console.log('üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–º–ø–æ—Ä—Ç–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–º–ø–æ—Ä—Ç–∞
async function checkImportStatus() {
  try {
    const processing = await db.execute(sql`
      SELECT COUNT(*) as count FROM import_jobs WHERE status = 'processing'
    `);
    
    const completed = await db.execute(sql`
      SELECT COUNT(*) as count FROM import_jobs WHERE status = 'completed'
    `);
    
    const failed = await db.execute(sql`
      SELECT COUNT(*) as count FROM import_jobs WHERE status = 'failed'
    `);
    
    const processingCount = parseInt(processing.rows[0].count);
    const completedCount = parseInt(completed.rows[0].count);
    const failedCount = parseInt(failed.rows[0].count);
    const totalCount = processingCount + completedCount + failedCount;
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${completedCount} –∑–∞–≤–µ—Ä—à–µ–Ω–æ, ${processingCount} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, ${failedCount} –Ω–µ—É–¥–∞—á–Ω–æ`);
    
    return {
      processing: processingCount,
      completed: completedCount,
      failed: failedCount,
      total: totalCount,
      isComplete: processingCount === 0
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏
function safeRemove(filePath) {
  try {
    const fullPath = path.join(projectRoot, filePath);
    if (fs.existsSync(fullPath)) {
      const stats = fs.statSync(fullPath);
      if (stats.isDirectory()) {
        fs.rmSync(fullPath, { recursive: true, force: true });
        console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: ${filePath}`);
      } else {
        fs.unlinkSync(fullPath);
        console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
      }
      return true;
    } else {
      console.log(`   ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return false;
    }
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${filePath}:`, error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–¥–∞
function cleanupCode() {
  console.log('\nüßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–æ–¥–∞...\n');
  
  console.log('üìÅ –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ:');
  console.log('==================================================');

  // 1. –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
  const testFiles = [
    'test-artist-search.js',
    'test-artist-with-releases.js', 
    'test-create-playlist.js',
    'test-deezer.js',
    'test-find-artist.mjs',
    'test-full-import.js',
    'test-import-chart.js',
    'test-import-detailed.js',
    'test-mass-import.js',
    'test-parser.js',
    'test-second-artist.js',
    'test-single-artist-full.js',
    'test-single-artist-vanya.js',
    'test-single-playlist-import.js',
    'test-vanya-full-discography.js',
    'test-vanya-only.js'
  ];

  testFiles.forEach(file => safeRemove(file));

  // 2. –£–¥–∞–ª—è–µ–º check-vanya —Ñ–∞–π–ª—ã
  const checkFiles = [
    'check-vanya-final.js',
    'check-vanya-results.js', 
    'check-vanya-simple.js'
  ];

  checkFiles.forEach(file => safeRemove(file));

  // 3. –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  const tempFiles = [
    'clean-releases.mjs',
    'clear-releases.mjs',
    'clear-releases.sql',
    'fix-storage-casing.js',
    'monitor-import.mjs',
    'run-migration.js',
    'cookies.txt'
  ];

  tempFiles.forEach(file => safeRemove(file));

  // 4. –£–¥–∞–ª—è–µ–º attached_assets
  safeRemove('attached_assets');

  console.log('\nüìÅ –£–¥–∞–ª—è–µ–º backup —Ñ–∞–π–ª—ã:');
  console.log('==================================================');
  safeRemove('client/src/components/CommentForm.tsx.backup');

  console.log('\nüìÅ –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã:');
  console.log('==================================================');
  safeRemove('server/optimized-music-importer.ts');

  console.log('\nüìÅ –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É scripts:');
  console.log('==================================================');

  // –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ
  const scriptsToRemove = [
    'check-import-jobs.js',
    'check-import-status.js', 
    'check-playlists.js',
    'debug-import.js',
    'force-reset-jobs.js',
    'reset-stuck-jobs.js',
    'test-manual-import.js',
    'test-single-artist-import.js',
    'fix-imported-data.js'
  ];

  scriptsToRemove.forEach(script => safeRemove(`scripts/${script}`));

  console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Git –∫–æ–º–∞–Ω–¥
function gitCommit() {
  try {
    console.log('\nüìù –í—ã–ø–æ–ª–Ω—è–µ–º Git –æ–ø–µ—Ä–∞—Ü–∏–∏...');
    console.log('==================================================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Git...');
    const status = execSync('git status --porcelain', { encoding: 'utf8' });
    if (!status.trim()) {
      console.log('   ‚ÑπÔ∏è  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞');
      return;
    }
    
    console.log('üì¶ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã...');
    execSync('git add .', { stdio: 'inherit' });
    
    console.log('üíæ –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç...');
    execSync('git commit -m "Clean up codebase: remove test files and temporary scripts"', { stdio: 'inherit' });
    
    console.log('üöÄ –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...');
    execSync('git push', { stdio: 'inherit' });
    
    console.log('‚úÖ Git –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Git –æ–ø–µ—Ä–∞—Ü–∏–π:', error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function monitorAndCleanup() {
  let checkCount = 0;
  const maxChecks = 120; // –ú–∞–∫—Å–∏–º—É–º 2 —á–∞—Å–∞ (120 * 1 –º–∏–Ω—É—Ç–∞)
  
  while (checkCount < maxChecks) {
    checkCount++;
    
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ #${checkCount} (${new Date().toLocaleTimeString()})`);
    console.log('==================================================');
    
    const status = await checkImportStatus();
    
    if (!status) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–º–ø–æ—Ä—Ç–∞');
      await new Promise(resolve => setTimeout(resolve, 60000)); // –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É
      continue;
    }
    
    if (status.isComplete) {
      console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
      console.log(`üìä –ò—Ç–æ–≥–æ: ${status.completed} –∑–∞–≤–µ—Ä—à–µ–Ω–æ, ${status.failed} –Ω–µ—É–¥–∞—á–Ω–æ`);
      
      // –û—á–∏—â–∞–µ–º –∫–æ–¥
      cleanupCode();
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º Git –æ–ø–µ—Ä–∞—Ü–∏–∏
      gitCommit();
      
      console.log('\nüéØ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –ö–æ–¥ –æ—á–∏—â–µ–Ω –∏ –∑–∞–ø—É—à–µ–Ω –≤ Git.');
      break;
    }
    
    // –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    console.log('‚è≥ –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É...');
    await new Promise(resolve => setTimeout(resolve, 60000));
  }
  
  if (checkCount >= maxChecks) {
    console.log('\n‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (2 —á–∞—Å–∞)');
    console.log('üîÑ –ò–º–ø–æ—Ä—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
monitorAndCleanup().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
