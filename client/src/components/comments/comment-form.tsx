import { useState, useEffect } from "react";
import { useMutation, useQueryClient, useQuery } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { RatingInput } from "../release/rating-input";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { isUnauthorizedError } from "@/lib/authUtils";
import { useAuth } from "@/hooks/useAuth";

interface CommentFormProps {
  releaseId: number;
  initialData?: {
    id?: number;
    text?: string;
    rating?: number;
  };
  mode?: 'create' | 'edit';
  onSuccess?: () => void;
}

export function CommentForm({ 
  releaseId,
  initialData,
  mode = 'create',
  onSuccess
}: CommentFormProps) {
  const [text, setText] = useState(initialData?.text || "");
  const [rating, setRating] = useState(initialData?.rating || 0);
  const [isEditing, setIsEditing] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { user } = useAuth();

  // Check if user already has a comment for this release
  const { data: existingComments = [] } = useQuery({
    queryKey: ["/api/comments/releases", releaseId],
    queryFn: async () => {
      const response = await fetch(`/api/comments/releases/${releaseId}`);
      if (!response.ok) throw new Error('Failed to fetch comments');
      return response.json();
    },
    enabled: !!user,
  });

  const existingUserComment = existingComments.find((comment: any) =>
    comment.user_id === user?.id
  );


  const commentMutation = useMutation({
    mutationFn: async (data: { text: string; rating: number } | { delete: true }) => {
      if ('delete' in data) {
        await apiRequest('DELETE', `/api/comments/${existingUserComment?.id}`);
      } else if ((mode === 'edit' && initialData?.id) || (isEditing && existingUserComment?.id)) {
        const commentId = initialData?.id || existingUserComment?.id;
        await apiRequest('PUT', `/api/comments/${commentId}`, data);
      } else {
        await apiRequest('POST', `/api/comments/releases/${releaseId}`, data);
      }
    },
    onSuccess: () => {
        // Force page refresh to ensure all data is updated
        window.location.reload();
      
      if (mode === 'create' && !isEditing) {
        setText("");
        setRating(0);
      }
      
      if (isEditing) {
        setIsEditing(false);
      }
      
      if (onSuccess) {
        onSuccess();
      }
      
      toast({
        title: mode === 'edit' || isEditing ? "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω" : "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω",
        description: "–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
      });
    },
    onError: (error) => {
      if (isUnauthorizedError(error)) {
        toast({
          title: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω",
          description: "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥...",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 500);
        return;
      }
      
      if (error.message.includes("already commented")) {
        toast({
          title: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
          description: "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–º—É —Ä–µ–ª–∏–∑—É. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π.",
          variant: "destructive",
        });
      } else {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
          variant: "destructive",
        });
      }
    },
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // –†–µ–π—Ç–∏–Ω–≥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    if (rating === 0) {
      toast({
        title: "–û—Ü–µ–Ω–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10",
        variant: "destructive"
      });
      return;
    }

    // –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    if (!text.trim() || text.trim().length < 5) {
      toast({
        title: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
        description: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤",
        variant: "destructive"
      });
      return;
    }

    commentMutation.mutate({
      text: text.trim(),
      rating: rating,
    });
  };

  // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –º—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ä–º—ã
  // –ù–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ mode !== 'edit' (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å CommentBlock)
  if (existingUserComment && !isEditing && mode !== 'edit') {
    return (
      <div className="space-y-4">
        <div className="p-4 bg-muted rounded-lg border">
          <h3 className="font-medium text-foreground mb-3">–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</h3>
          
          {existingUserComment.rating && existingUserComment.rating > 0 && (
            <div className="flex items-center space-x-2 mb-3">
              <span className="text-sm text-muted-foreground">–û—Ü–µ–Ω–∫–∞:</span>
              <span className="font-medium text-primary text-lg">{existingUserComment.rating}/10</span>
            </div>
          )}
          
          {existingUserComment.text && (
            <div className="mb-4">
              <span className="text-sm text-muted-foreground">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</span>
              <p className="text-foreground mt-1 p-2 bg-background rounded border">"{existingUserComment.text}"</p>
            </div>
          )}
          
          <div className="flex space-x-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => {
                setText(existingUserComment.text || "");
                setRating(existingUserComment.rating || 0);
                setIsEditing(true);
              }}
              className="p-2"
              title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
            >
              ‚úèÔ∏è
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => {
                if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?")) {
                  commentMutation.mutate({ delete: true });
                }
              }}
              className="p-2 border-red-300 text-red-600 hover:text-red-700 hover:bg-red-50 hover:border-red-400"
              title="–£–¥–∞–ª–∏—Ç—å"
            >
              üóëÔ∏è
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="space-y-4">
        <div>
          <Label htmlFor="rating">–û—Ü–µ–Ω–∫–∞ *</Label>
          <RatingInput
            rating={rating}
            onRatingChange={setRating}
            maxRating={10}
            size="md"
            label=""
          />
        </div>

        <div>
          <Label htmlFor="comment-text" className="text-sm font-medium text-foreground mb-2 block">
            –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π *
          </Label>
          <Textarea
            id="comment-text"
            placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –æ–± —ç—Ç–æ–º —Ä–µ–ª–∏–∑–µ..."
            value={text}
            onChange={(e) => setText(e.target.value)}
            className="resize-none min-h-20"
            maxLength={1000}
            data-testid="textarea-comment"
          />
          <div className="flex justify-end items-center mt-2">
            <span className="text-xs text-muted-foreground" data-testid="text-char-count">
              {text.length}/1000
            </span>
          </div>
        </div>

        <div className="flex space-x-2">
          <Button
            type="submit"
            disabled={commentMutation.isPending || rating === 0 || !text.trim() || text.trim().length < 5}
            className="bg-primary text-primary-foreground hover:bg-primary/90"
            data-testid="button-submit"
          >
            {commentMutation.isPending ? "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º..." : mode === 'edit' || isEditing ? "–û–±–Ω–æ–≤–∏—Ç—å" : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
          </Button>
          {isEditing && (
            <Button
              type="button"
              variant="outline"
              onClick={() => {
                setIsEditing(false);
                setText(existingUserComment?.text || "");
                setRating(existingUserComment?.rating || 0);
              }}
              disabled={commentMutation.isPending}
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
          )}
        </div>
      </div>
    </form>
  );
}