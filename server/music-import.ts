import { storage } from "./storage";
import type { InsertArtist, InsertRelease } from "@shared/schema";

// Music Import System –¥–ª—è RevYou
// –õ–µ–≥–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

interface ImportedRelease {
  artist: string;
  album: string;
  releaseDate: string;
  coverUrl?: string;
  spotifyUrl?: string;
  genres?: string[];
  trackCount?: number;
}

interface MusicBrainzArtist {
  id: string;
  name: string;
  country?: string;
  'life-span'?: {
    begin?: string;
    end?: string;
  };
}

interface MusicBrainzRelease {
  id: string;
  title: string;
  date?: string;
  country?: string;
  'cover-art-archive'?: {
    artwork: boolean;
    front: boolean;
  };
  'media'?: Array<{
    'track-count': number;
  }>;
}

/**
 * MusicBrainz API Client
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
 */
export class MusicBrainzImporter {
  private readonly baseUrl = 'https://musicbrainz.org/ws/2';
  private readonly userAgent = 'RevYou/1.0 (music@revyou.app)';
  
  private async makeRequest(endpoint: string): Promise<any> {
    // –°–æ–±–ª—é–¥–∞–µ–º rate limit - 1 –∑–∞–ø—Ä–æ—Å –≤ —Å–µ–∫—É–Ω–¥—É
    await new Promise(resolve => setTimeout(resolve, 1100));
    
    const response = await fetch(`${this.baseUrl}${endpoint}`, {
      headers: {
        'User-Agent': this.userAgent,
        'Accept': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`MusicBrainz API error: ${response.status}`);
    }
    
    return response.json();
  }
  
  /**
   * –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
   */
  async searchArtist(artistName: string): Promise<MusicBrainzArtist | null> {
    try {
      const query = encodeURIComponent(`artist:"${artistName}"`);
      const data = await this.makeRequest(`/artist/?query=${query}&fmt=json&limit=1`);
      
      if (data.artists && data.artists.length > 0) {
        return data.artists[0];
      }
      return null;
    } catch (error) {
      console.error('Error searching artist:', error);
      return null;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–ª–∏–∑–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
   */
  async getArtistReleases(artistMbid: string): Promise<MusicBrainzRelease[]> {
    try {
      const data = await this.makeRequest(`/release-group/?artist=${artistMbid}&type=album&fmt=json&limit=100`);
      
      if (data['release-groups']) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–ª–∏–∑–∞
        const releases: MusicBrainzRelease[] = [];
        
        for (const group of data['release-groups']) {
          const releaseData = await this.makeRequest(`/release?release-group=${group.id}&fmt=json&limit=1&inc=media`);
          if (releaseData.releases && releaseData.releases.length > 0) {
            releases.push(releaseData.releases[0]);
          }
        }
        
        return releases;
      }
      return [];
    } catch (error) {
      console.error('Error getting artist releases:', error);
      return [];
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ URL –æ–±–ª–æ–∂–∫–∏ –∞–ª—å–±–æ–º–∞
   */
  async getCoverArtUrl(releaseMbid: string): Promise<string | null> {
    try {
      // Cover Art Archive API - —Ç–∞–∫–∂–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
      const response = await fetch(`https://coverartarchive.org/release/${releaseMbid}/front-500`);
      if (response.ok) {
        return response.url;
      }
      return null;
    } catch (error) {
      return null;
    }
  }
  
  /**
   * –ò–º–ø–æ—Ä—Ç —Ä–µ–ª–∏–∑–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –Ω–∞—à—É –ë–î
   */
  async importArtistReleases(artistName: string): Promise<ImportedRelease[]> {
    console.log(`üéµ –ò–º–ø–æ—Ä—Ç —Ä–µ–ª–∏–∑–æ–≤: ${artistName}`);
    
    // 1. –ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    const artist = await this.searchArtist(artistName);
    if (!artist) {
      console.log(`‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${artistName}`);
      return [];
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${artist.name} (${artist.id})`);
    
    // 2. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–ª–∏–∑—ã
    const releases = await this.getArtistReleases(artist.id);
    console.log(`üìÄ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–∏–∑–æ–≤: ${releases.length}`);
    
    // 3. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–µ–ª–∏–∑
    const importedReleases: ImportedRelease[] = [];
    
    for (const release of releases) {
      try {
        // –ü–æ–ª—É—á–∏—Ç—å –æ–±–ª–æ–∂–∫—É
        const coverUrl = await this.getCoverArtUrl(release.id);
        
        const importedRelease: ImportedRelease = {
          artist: artist.name,
          album: release.title,
          releaseDate: release.date || new Date().toISOString(),
          coverUrl: coverUrl || undefined,
          trackCount: release.media?.[0]?.['track-count']
        };
        
        importedReleases.push(importedRelease);
        console.log(`üíΩ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${release.title}`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ä–µ–ª–∏–∑–∞ ${release.title}:`, error);
      }
    }
    
    return importedReleases;
  }

  /**
   * –ü–æ–∏—Å–∫ —Ä–µ–ª–∏–∑–æ–≤ –ø–æ –≥–æ–¥—É –≤—ã–ø—É—Å–∫–∞
   */
  async getReleasesByYear(year: number): Promise<MusicBrainzRelease[]> {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ —Ä–µ–ª–∏–∑–æ–≤ –∑–∞ ${year} –≥–æ–¥...`);
      
      // –ü–æ–∏—Å–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≥–æ–¥
      const query = `date:${year} AND type:album`;
      const data = await this.makeRequest(`/release/?query=${encodeURIComponent(query)}&fmt=json&limit=50`);
      
      if (data.releases && data.releases.length > 0) {
        console.log(`üìÄ –ù–∞–π–¥–µ–Ω–æ ${data.releases.length} —Ä–µ–ª–∏–∑–æ–≤ –∑–∞ ${year} –≥–æ–¥`);
        return data.releases.filter((release: any) => 
          release.date && release.date.includes(year.toString())
        );
      }
      
      return [];
    } catch (error) {
      console.error(`Error getting releases by year ${year}:`, error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ –ø–æ ID —Ä–µ–ª–∏–∑–∞
   */
  async getArtistFromRelease(releaseMbid: string): Promise<MusicBrainzArtist | null> {
    try {
      const data = await this.makeRequest(`/release/${releaseMbid}?fmt=json&inc=artists`);
      
      if (data['artist-credit'] && data['artist-credit'].length > 0) {
        return data['artist-credit'][0].artist;
      }
      
      return null;
    } catch (error) {
      console.error('Error getting artist from release:', error);
      return null;
    }
  }

  /**
   * –ò–º–ø–æ—Ä—Ç —Ä–µ–ª–∏–∑–æ–≤ –ø–æ –≥–æ–¥—É –≤—ã–ø—É—Å–∫–∞
   */
  async importReleasesByYear(year: number): Promise<ImportedRelease[]> {
    console.log(`üìÖ –ò–º–ø–æ—Ä—Ç —Ä–µ–ª–∏–∑–æ–≤ ${year} –≥–æ–¥–∞...`);
    
    // 1. –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–∏–∑—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥
    const releases = await this.getReleasesByYear(year);
    console.log(`üìÄ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–∏–∑–æ–≤: ${releases.length}`);
    
    if (releases.length === 0) {
      return [];
    }
    
    // 2. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–µ–ª–∏–∑
    const importedReleases: ImportedRelease[] = [];
    
    for (const release of releases) {
      try {
        // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
        const artist = await this.getArtistFromRelease(release.id);
        if (!artist) {
          console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è —Ä–µ–ª–∏–∑–∞: ${release.title}`);
          continue;
        }
        
        // –ü–æ–ª—É—á–∏—Ç—å –æ–±–ª–æ–∂–∫—É
        const coverUrl = await this.getCoverArtUrl(release.id);
        
        const importedRelease: ImportedRelease = {
          artist: artist.name,
          album: release.title,
          releaseDate: release.date || `${year}-01-01`,
          coverUrl: coverUrl || undefined,
          trackCount: release.media?.[0]?.['track-count']
        };
        
        importedReleases.push(importedRelease);
        console.log(`üíΩ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${artist.name} - ${release.title}`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ä–µ–ª–∏–∑–∞ ${release.title}:`, error);
      }
    }
    
    return importedReleases;
  }
}

/**
 * –°–µ—Ä–≤–∏—Å –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
 */
export class MassImportService {
  private musicBrainz = new MusicBrainzImporter();
  
  /**
   * –ò–º–ø–æ—Ä—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
   */
  async importArtists(artistNames: string[]): Promise<{ success: number; errors: string[] }> {
    let successCount = 0;
    const errors: string[] = [];
    
    for (const artistName of artistNames) {
      try {
        // 1. –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ª–∏–∑—ã –∏–∑ MusicBrainz
        const releases = await this.musicBrainz.importArtistReleases(artistName);
        
        // 2. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –Ω–∞—à—É –ë–î
        for (const release of releases) {
          await this.saveReleaseToDatabase(release);
        }
        
        successCount += releases.length;
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${releases.length} —Ä–µ–ª–∏–∑–æ–≤ –¥–ª—è ${artistName}`);
        
      } catch (error) {
        const errorMsg = `–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ${artistName}: ${error}`;
        errors.push(errorMsg);
        console.error(errorMsg);
      }
    }
    
    return { success: successCount, errors };
  }

  /**
   * –ò–º–ø–æ—Ä—Ç —Ä–µ–ª–∏–∑–æ–≤ –ø–æ –≥–æ–¥–∞–º –≤—ã–ø—É—Å–∫–∞
   */
  async importByYears(years: number[]): Promise<{ success: number; errors: string[] }> {
    let successCount = 0;
    const errors: string[] = [];
    
    for (const year of years) {
      try {
        console.log(`üóìÔ∏è –ò–º–ø–æ—Ä—Ç —Ä–µ–ª–∏–∑–æ–≤ ${year} –≥–æ–¥–∞...`);
        
        // 1. –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–∏–∑—ã –∏–∑ MusicBrainz –ø–æ –≥–æ–¥—É
        const releases = await this.musicBrainz.importReleasesByYear(year);
        
        // 2. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –Ω–∞—à—É –ë–î
        for (const release of releases) {
          await this.saveReleaseToDatabase(release);
        }
        
        successCount += releases.length;
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${releases.length} —Ä–µ–ª–∏–∑–æ–≤ –∑–∞ ${year} –≥–æ–¥`);
        
      } catch (error) {
        const errorMsg = `–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞ ${year} –≥–æ–¥: ${error}`;
        errors.push(errorMsg);
        console.error(errorMsg);
      }
    }
    
    return { success: successCount, errors };
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –≤ –ë–î
   */
  private async saveReleaseToDatabase(release: ImportedRelease): Promise<void> {
    try {
      // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      let artist = await storage.getArtistByName(release.artist);
      if (!artist) {
        const artistData: InsertArtist = {
          name: release.artist,
        };
        artist = await storage.createArtist(artistData);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ä–µ–ª–∏–∑
      const existingRelease = await storage.getReleaseByTitleAndArtist(release.album, artist.id);
      if (existingRelease) {
        console.log(`‚ö†Ô∏è –†–µ–ª–∏–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${release.album}`);
        return;
      }
      
      // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ª–∏–∑
      const releaseData: InsertRelease = {
        artistId: artist.id,
        title: release.album,
        releaseDate: new Date(release.releaseDate),
        coverUrl: release.coverUrl || null,
        streamingLinks: release.spotifyUrl ? {
          spotify: release.spotifyUrl,
          appleMusic: null
        } : null,
        type: 'album'
      };
      
      await storage.createRelease(releaseData);
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–µ–ª–∏–∑: ${release.album}`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${release.album}:`, error);
      throw error;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–º–ø–æ—Ä—Ç–∞
   */
  async getImportStats(): Promise<{ totalReleases: number; totalArtists: number }> {
    const releases = await storage.getReleases({});
    const artists = await storage.getArtists();
    
    return {
      totalReleases: releases.length,
      totalArtists: artists.length
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–æ—É—Ç–∞—Ö
export const massImportService = new MassImportService();