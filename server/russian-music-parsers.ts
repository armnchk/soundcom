// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç MTS Music –ø–ª–µ–π–ª–∏—Å—Ç—ã –∏ —á–∞—Ä—Ç—ã
// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Deezer/iTunes API

import * as cheerio from 'cheerio';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
export interface ParsedTrack {
  artist: string;
  title: string;
  position?: number;
  artistMtsId?: string; // ID –∞—Ä—Ç–∏—Å—Ç–∞ –≤ MTS Music
  artists?: Array<{ name: string; mtsId?: string }>; // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞—Ä—Ç–∏—Å—Ç—ã
}

export interface PlaylistParseResult {
  name: string;
  description?: string;
  tracks: ParsedTrack[];
  uniqueArtists: string[];
}

// –°—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export interface RussianTrack {
  artist: string;
  title: string;
  duration?: string;
  album?: string;
  year?: string;
}

// –ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
abstract class RussianMusicParser {
  abstract serviceName: string;
  abstract baseUrl: string;
  
  // –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ –∞—Ä—Ç–∏—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
  protected cleanArtistName(artist: string): string {
    return artist
      .trim()
      .replace(/^feat\.?\s*/i, '') // –£–±–∏—Ä–∞–µ–º "feat" –≤ –Ω–∞—á–∞–ª–µ
      .replace(/\s*feat\.?\s*.+$/i, '') // –£–±–∏—Ä–∞–µ–º –≤—Å—ë –ø–æ—Å–ª–µ "feat"
      .replace(/\s*\(.*\)$/, '') // –£–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ –≤ –∫–æ–Ω—Ü–µ
      .replace(/\s+/g, ' ') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
      .trim();
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ —Ç—Ä–µ–∫–æ–≤
  protected extractUniqueArtists(tracks: ParsedTrack[]): string[] {
    const artistSet = new Set<string>();
    
    for (const track of tracks) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ artists, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (track.artists && track.artists.length > 0) {
        track.artists.forEach(artist => {
          if (artist.name && artist.name.length > 1) {
            artistSet.add(artist.name);
          }
        });
      } else {
        // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
        const cleanedArtist = this.cleanArtistName(track.artist);
        
        if (cleanedArtist && cleanedArtist.length > 1) {
          artistSet.add(cleanedArtist);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ (feat, &, ,)
          const collaborators = this.extractCollaborators(cleanedArtist);
          collaborators.forEach(collaborator => {
            if (collaborator.length > 1) {
              artistSet.add(collaborator);
            }
          });
        }
      }
    }
    
    return Array.from(artistSet).sort();
  }
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∏–º–µ–Ω–∏ –∞—Ä—Ç–∏—Å—Ç–∞
  protected extractCollaborators(artistName: string): string[] {
    const separators = [' feat. ', ' feat ', ' ft. ', ' ft ', ' & ', ', ', ' x ', ' X '];
    let artists = [artistName];
    
    for (const separator of separators) {
      artists = artists.flatMap(artist => 
        artist.split(separator).map(a => this.cleanArtistName(a))
      );
    }
    
    return artists.filter(artist => artist && artist.length > 1);
  }
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ MTS Music ID –∏–∑ URL
  protected extractMtsIdFromUrl(url: string): string {
    const match = url.match(/\/artist\/(\d+)/);
    return match ? match[1] : '';
  }
  
  // –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω –∞—Ä—Ç–∏—Å—Ç–æ–≤ —Å MTS ID –∏–∑ —Å—Å—ã–ª–æ–∫
  protected matchArtistsWithMtsIds(
    collaborators: string[], 
    artistElement: cheerio.Cheerio<any>, 
    $: cheerio.CheerioAPI
  ): Array<{ name: string; mtsId?: string }> {
    const artists: Array<{ name: string; mtsId?: string }> = [];
    
    // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –∞—Ä—Ç–∏—Å—Ç–∞
    const artistLinks = artistElement.find('a');
    const linkData: Array<{ text: string; mtsId: string }> = [];
    
    artistLinks.each((_, link) => {
      const linkElement = $(link);
      const href = linkElement.attr('href');
      const text = linkElement.text().trim();
      
      if (href && text) {
        const mtsId = this.extractMtsIdFromUrl(href);
        if (mtsId) {
          linkData.push({ text: this.cleanArtistName(text), mtsId });
        }
      }
    });
    
    // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    for (const collaborator of collaborators) {
      const cleanName = this.cleanArtistName(collaborator);
      const matchingLink = linkData.find(link => 
        link.text.toLowerCase() === cleanName.toLowerCase() ||
        link.text.toLowerCase().includes(cleanName.toLowerCase()) ||
        cleanName.toLowerCase().includes(link.text.toLowerCase())
      );
      
      artists.push({
        name: cleanName,
        mtsId: matchingLink?.mtsId || ''
      });
    }
    
    return artists;
  }
  
  abstract parsePlaylist(url: string): Promise<PlaylistParseResult>;
}

// –ü–∞—Ä—Å–µ—Ä MTS Music
export class MTSMusicParser extends RussianMusicParser {
  serviceName = 'MTS Music';
  baseUrl = 'https://music.mts.ru';
  
  async parsePlaylist(url: string): Promise<PlaylistParseResult> {
    console.log(`üéµ MTS Music: –ü–∞—Ä—Å–∏–º –ø–ª–µ–π–ª–∏—Å—Ç ${url}`);
    
    try {
      const response = await fetch(url, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
          'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
          'Accept-Encoding': 'gzip, deflate, br',
          'DNT': '1',
          'Connection': 'keep-alive',
          'Upgrade-Insecure-Requests': '1',
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const html = await response.text();
      const $ = cheerio.load(html);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ
      let result: PlaylistParseResult;
      
      if (this.isChartPage(url)) {
        result = this.parseChart($, url);
      } else {
        result = this.parsePlaylistPage($, url);
      }
      
      console.log(`üéµ MTS Music: –ù–∞–π–¥–µ–Ω–æ ${result.tracks.length} —Ç—Ä–µ–∫–æ–≤, ${result.uniqueArtists.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤`);
      
      return result;
      
    } catch (error) {
      console.error(`‚ùå MTS Music –ø–∞—Ä—Å–∏–Ω–≥ error –¥–ª—è ${url}:`, error instanceof Error ? error.message : String(error));
      
      return {
        name: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
        tracks: [],
        uniqueArtists: []
      };
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —á–∞—Ä—Ç–æ–º
  private isChartPage(url: string): boolean {
    return url.includes('/chart') || url.includes('/top') || url.includes('/hit');
  }
  
  // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–∞—Ä—Ç–∞
  private parseChart($: cheerio.CheerioAPI, url: string): PlaylistParseResult {
    console.log('üìä –ü–∞—Ä—Å–∏–º –∫–∞–∫ —á–∞—Ä—Ç...');
    
    const tracks: ParsedTrack[] = [];
    
    // –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç—Ä–µ–∫–æ–≤ –≤ —á–∞—Ä—Ç–µ
    const trackSelectors = [
      '.track-item', '.chart-item', '.song-item', '.music-item',
      '[class*="track"]', '[class*="song"]', '[class*="chart"]'
    ];
    
    let tracksFound = false;
    
    for (const selector of trackSelectors) {
      const trackElements = $(selector);
      
      if (trackElements.length > 0) {
        console.log(`üìä –ù–∞–π–¥–µ–Ω—ã —Ç—Ä–µ–∫–∏ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector} (${trackElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`);
        
        trackElements.each((index, element) => {
          const track = this.extractTrackFromElement($, $(element), index + 1);
          if (track) {
            tracks.push(track);
          }
        });
        
        tracksFound = true;
        break;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç—Ä–µ–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏, –ø—Ä–æ–±—É–µ–º JSON-LD
    if (!tracksFound) {
      const jsonLdTracks = this.extractTracksFromJsonLd($);
      tracks.push(...jsonLdTracks);
    }
    
    const playlistName = this.extractChartName($) || '–ß–∞—Ä—Ç MTS Music';
    
    return {
      name: playlistName,
      description: `–ß–∞—Ä—Ç —Å ${tracks.length} —Ç—Ä–µ–∫–∞–º–∏`,
      tracks,
      uniqueArtists: this.extractUniqueArtists(tracks)
    };
  }
  
  // –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ã—á–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
  private parsePlaylistPage($: cheerio.CheerioAPI, url: string): PlaylistParseResult {
    console.log('üéµ –ü–∞—Ä—Å–∏–º –∫–∞–∫ –ø–ª–µ–π–ª–∏—Å—Ç...');
    
    const tracks: ParsedTrack[] = [];
    
    // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
    const playlistSelectors = [
      '.playlist-track', '.track', '.song', '.music-track',
      '[class*="playlist"] [class*="track"]',
      '[class*="playlist"] [class*="song"]'
    ];
    
    let tracksFound = false;
    
    for (const selector of playlistSelectors) {
      const trackElements = $(selector);
      
      if (trackElements.length > 0) {
        console.log(`üéµ –ù–∞–π–¥–µ–Ω—ã —Ç—Ä–µ–∫–∏ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector} (${trackElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`);
        
        trackElements.each((index, element) => {
          const track = this.extractTrackFromElement($, $(element), index + 1);
          if (track) {
            tracks.push(track);
          }
        });
        
        tracksFound = true;
        break;
      }
    }
    
    // –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ JSON-LD
    if (!tracksFound) {
      const jsonLdTracks = this.extractTracksFromJsonLd($);
      tracks.push(...jsonLdTracks);
    }
    
    const playlistName = this.extractPlaylistName($) || '–ü–ª–µ–π–ª–∏—Å—Ç MTS Music';
    const description = this.extractPlaylistDescription($);
    
    return {
      name: playlistName,
      description,
      tracks,
      uniqueArtists: this.extractUniqueArtists(tracks)
    };
  }
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ –∏–∑ DOM —ç–ª–µ–º–µ–Ω—Ç–∞
  private extractTrackFromElement($: cheerio.CheerioAPI, element: cheerio.Cheerio<any>, position: number): ParsedTrack | null {
    try {
      // –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞
      const artistSelectors = [
        '.artist', '.track-artist', '.song-artist', '.performer',
        '[class*="artist"]', '[class*="performer"]',
        '.track-info .artist', '.song-info .artist'
      ];
      
      // –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
      const titleSelectors = [
        '.title', '.track-title', '.song-title', '.track-name', '.song-name',
        '[class*="title"]', '[class*="name"]',
        '.track-info .title', '.song-info .title'
      ];
      
      let artist = '';
      let title = '';
      let artistMtsId = '';
      let artists: Array<{ name: string; mtsId?: string }> = [];
      
      // –ò—â–µ–º –∞—Ä—Ç–∏—Å—Ç–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏
      for (const selector of artistSelectors) {
        const artistElement = element.find(selector).first();
        if (artistElement.length > 0) {
          artist = artistElement.text().trim();
          
          // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤ —ç—Ç–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
          const artistLinks = artistElement.find('a');
          const artistMtsIds: string[] = [];
          
          artistLinks.each((_, link) => {
            const href = $(link).attr('href');
            if (href) {
              const mtsId = this.extractMtsIdFromUrl(href);
              if (mtsId) {
                artistMtsIds.push(mtsId);
              }
            }
          });
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
          if (artistMtsIds.length > 0) {
            artistMtsId = artistMtsIds[0];
          }
          
          break;
        }
      }
      
      // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
      for (const selector of titleSelectors) {
        const titleElement = element.find(selector).first();
        if (titleElement.length > 0) {
          title = titleElement.text().trim();
          break;
        }
      }
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∏—â–µ–º –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö data-*
      if (!artist || !title) {
        const dataArtist = element.attr('data-artist') || element.find('[data-artist]').first().attr('data-artist');
        const dataTitle = element.attr('data-title') || element.find('[data-title]').first().attr('data-title');
        
        if (dataArtist) artist = dataArtist;
        if (dataTitle) title = dataTitle;
      }
      
      // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏–∑ –æ–±—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
      if (!artist || !title) {
        const fullText = element.text().trim();
        const match = fullText.match(/^(.+?)\s*[-‚Äì‚Äî]\s*(.+)$/);
        
        if (match) {
          artist = match[1].trim();
          title = match[2].trim();
        }
      }
      
      if (artist && title) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤
        const collaborators = this.extractCollaborators(artist);
        if (collaborators.length > 1) {
          // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∏–º–µ–Ω–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ —Å MTS ID
          // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∞—Ä—Ç–∏—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
          let artistElementForMatching: cheerio.Cheerio<any> | null = null;
          for (const selector of artistSelectors) {
            const foundElement = element.find(selector).first();
            if (foundElement.length > 0) {
              artistElementForMatching = foundElement;
              break;
            }
          }
          
          if (artistElementForMatching) {
            artists = this.matchArtistsWithMtsIds(collaborators, artistElementForMatching, $);
          } else {
            artists = collaborators.map(name => ({ name: this.cleanArtistName(name) }));
          }
        } else {
          artists = [{ name: this.cleanArtistName(artist), mtsId: artistMtsId }];
        }
        
        return {
          artist: this.cleanArtistName(artist),
          title: title.trim(),
          position,
          artistMtsId,
          artists
        };
      }
      
      return null;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞:', error);
      return null;
    }
  }
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –∏–∑ JSON-LD —Ä–∞–∑–º–µ—Ç–∫–∏
  private extractTracksFromJsonLd($: cheerio.CheerioAPI): ParsedTrack[] {
    const tracks: ParsedTrack[] = [];
    
    try {
      $('script[type="application/ld+json"]').each((_, element) => {
        try {
          const jsonData = JSON.parse($(element).html() || '');
          
          // –ò—â–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç—Ä–µ–∫–∏
          if (jsonData['@type'] === 'MusicPlaylist' && jsonData.track) {
            jsonData.track.forEach((track: any, index: number) => {
              if (track.byArtist && track.name) {
                tracks.push({
                  artist: this.cleanArtistName(track.byArtist.name || track.byArtist),
                  title: track.name,
                  position: index + 1
                });
              }
            });
          }
          
        } catch (jsonError) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON-LD:', error);
    }
    
    return tracks;
  }
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ä—Ç–∞
  private extractChartName($: cheerio.CheerioAPI): string {
    const titleSelectors = [
      'h1', '.chart-title', '.page-title', '.title',
      '[class*="chart"] [class*="title"]',
      'title'
    ];
    
    for (const selector of titleSelectors) {
      const element = $(selector).first();
      if (element.length > 0) {
        const text = element.text().trim();
        if (text && !text.toLowerCase().includes('mts music')) {
          return text;
        }
      }
    }
    
    return '–ß–∞—Ä—Ç MTS Music';
  }
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
  private extractPlaylistName($: cheerio.CheerioAPI): string {
    const titleSelectors = [
      '.playlist-title', '.playlist-name', 'h1', '.page-title', '.title',
      '[class*="playlist"] [class*="title"]',
      'title'
    ];
    
    for (const selector of titleSelectors) {
      const element = $(selector).first();
      if (element.length > 0) {
        const text = element.text().trim();
        if (text && !text.toLowerCase().includes('mts music')) {
          return text;
        }
      }
    }
    
    return '–ü–ª–µ–π–ª–∏—Å—Ç MTS Music';
  }
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
  private extractPlaylistDescription($: cheerio.CheerioAPI): string | undefined {
    const descSelectors = [
      '.playlist-description', '.description', '.about',
      '[class*="playlist"] [class*="description"]',
      'meta[name="description"]'
    ];
    
    for (const selector of descSelectors) {
      const element = $(selector).first();
      if (element.length > 0) {
        const text = selector === 'meta[name="description"]' 
          ? element.attr('content') 
          : element.text().trim();
          
        if (text && text.length > 10) {
          return text;
        }
      }
    }
    
    return undefined;
  }
}

// –§–∞–±—Ä–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤
export class RussianMusicParserFactory {
  static createParser(url: string): RussianMusicParser | null {
    if (url.includes('music.mts.ru')) {
      return new MTSMusicParser();
    }
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä—Å–µ—Ä—ã:
    // if (url.includes('zvuk.com')) return new ZvukParser();
    // if (url.includes('yandex.ru/music')) return new YandexMusicParser();
    
    return null;
  }
  
  static async parseAnyPlaylist(url: string): Promise<PlaylistParseResult | null> {
    const parser = RussianMusicParserFactory.createParser(url);
    
    if (!parser) {
      console.error(`‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è URL: ${url}`);
      return null;
    }
    
    console.log(`üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—Å–µ—Ä: ${parser.serviceName}`);
    return await parser.parsePlaylist(url);
  }
  
  // –ü–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
  static async parseMultiplePlaylists(urls: string[]): Promise<{
    successful: PlaylistParseResult[];
    failed: string[];
  }> {
    console.log(`üéµ –ü–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ ${urls.length} –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤...`);
    
    const successful: PlaylistParseResult[] = [];
    const failed: string[] = [];
    
    for (const url of urls) {
      try {
        const result = await RussianMusicParserFactory.parseAnyPlaylist(url);
        
        if (result && result.tracks.length > 0) {
          successful.push(result);
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${result.name} (${result.tracks.length} —Ç—Ä–µ–∫–æ–≤)`);
        } else {
          failed.push(url);
          console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${url}`);
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${url}:`, error);
        failed.push(url);
      }
    }
    
    const totalTracks = successful.reduce((sum, playlist) => sum + playlist.tracks.length, 0);
    const totalArtists = new Set(successful.flatMap(playlist => playlist.uniqueArtists)).size;
    
    console.log(`üìä –ü–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω:`);
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successful.length} –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤`);
    console.log(`   ‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${failed.length} –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤`);
    console.log(`   üéµ –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: ${totalTracks}`);
    console.log(`   üë®‚Äçüé§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤: ${totalArtists}`);
    
    return { successful, failed };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
export const mtsParser = new MTSMusicParser();
export const parsePlaylist = RussianMusicParserFactory.parseAnyPlaylist;
export const parseMultiplePlaylists = RussianMusicParserFactory.parseMultiplePlaylists;

// –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export async function parseMtsChart(url: string): Promise<RussianTrack[]> {
  const result = await mtsParser.parsePlaylist(url);
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
  return result.tracks.map(track => ({
    artist: track.artist,
    title: track.title
  }));
}

export function extractUniqueArtists(tracks: RussianTrack[]): string[] {
  const artists = new Set<string>();
  
  tracks.forEach(track => {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
    artists.add(track.artist);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏—á–µ—Ä–∏–Ω–≥ (feat., ft., –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏)
    const featMatch = track.artist.match(/^(.+?)\s*(?:feat\.|ft\.|–ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏|featuring)\s*(.+)$/i);
    if (featMatch) {
      artists.add(featMatch[1].trim()); // –û—Å–Ω–æ–≤–Ω–æ–π –∞—Ä—Ç–∏—Å—Ç
      artists.add(featMatch[2].trim()); // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ &, –∏, x
    const collabMatch = track.artist.match(/^(.+?)\s*(?:&|–∏|x|√ó)\s*(.+)$/i);
    if (collabMatch) {
      artists.add(collabMatch[1].trim());
      artists.add(collabMatch[2].trim());
    }
  });
  
  return Array.from(artists)
    .filter(artist => artist.length > 1)
    .sort();
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤
export async function testRussianParsers(): Promise<void> {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–û–°–°–ò–ô–°–ö–ò–• –ü–ê–†–°–ï–†–û–í\n');
  
  // –¢–µ—Å—Ç MTS Music
  console.log('üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º MTS Music...');
  const mtsTracks = await parseMtsChart('https://music.mts.ru/chart');
  const mtsArtists = extractUniqueArtists(mtsTracks);
  console.log(`üé§ MTS Music: ${mtsTracks.length} —Ç—Ä–µ–∫–æ–≤, ${mtsArtists.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤\n`);
  
  // –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
  console.log('üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä...');
  const newResult = await parsePlaylist('https://music.mts.ru/chart');
  console.log(`üé§ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π: ${newResult?.tracks.length || 0} —Ç—Ä–µ–∫–æ–≤, ${newResult?.uniqueArtists.length || 0} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤\n`);
  
  if (mtsArtists.length > 0) {
    console.log('\nüéâ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –ø–∞—Ä—Å–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç!');
    console.log('–ü—Ä–∏–º–µ—Ä—ã –∞—Ä—Ç–∏—Å—Ç–æ–≤:', mtsArtists.slice(0, 10).join(', '));
  } else {
    console.log('\nüòû –ü–∞—Ä—Å–µ—Ä—ã –Ω–µ —Å–º–æ–≥–ª–∏ –∏–∑–≤–ª–µ—á—å –∞—Ä—Ç–∏—Å—Ç–æ–≤');
  }
}