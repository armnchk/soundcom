// –ü–∞—Ä—Å–µ—Ä—ã —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
// Zvuk.com –∏ MTS Music - –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ Replit

import * as cheerio from 'cheerio';

export interface RussianTrack {
  artist: string;
  title: string;
  duration?: string;
  album?: string;
  year?: string;
}

// –ü–∞—Ä—Å–µ—Ä –¥–ª—è Zvuk.com
export async function parseZvukPlaylist(url: string): Promise<RussianTrack[]> {
  try {
    console.log(`üéµ –ü–∞—Ä—Å–∏–º –ø–ª–µ–π–ª–∏—Å—Ç Zvuk.com: ${url}`);
    
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const html = await response.text();
    const $ = cheerio.load(html);
    
    console.log(`üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${$('title').text()}`);
    
    const tracks: RussianTrack[] = [];
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç—Ä–µ–∫–æ–≤
    const trackSelectors = [
      '.track',
      '.track-item',
      '.playlist-track',
      '.song',
      '.music-track',
      '[data-track]',
      '.track-row',
      '.audio-track'
    ];
    
    let foundTracks = false;
    
    for (const selector of trackSelectors) {
      const trackElements = $(selector);
      
      if (trackElements.length > 0) {
        console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${trackElements.length} —Ç—Ä–µ–∫–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
        foundTracks = true;
        
        trackElements.each((index, element) => {
          const $track = $(element);
          
          // –ò—â–µ–º –∞—Ä—Ç–∏—Å—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
          let artist = '';
          let title = '';
          
          // –í–∞—Ä–∏–∞–Ω—Ç 1: –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
          const artistElement = $track.find('.artist, .track-artist, .performer, .author').first();
          const titleElement = $track.find('.title, .track-title, .name, .song-name').first();
          
          if (artistElement.length && titleElement.length) {
            artist = artistElement.text().trim();
            title = titleElement.text().trim();
          } else {
            // –í–∞—Ä–∏–∞–Ω—Ç 2: –∏—â–µ–º –≤ data-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö
            artist = $track.attr('data-artist') || $track.attr('data-performer') || '';
            title = $track.attr('data-title') || $track.attr('data-name') || '';
            
            if (!artist || !title) {
              // –í–∞—Ä–∏–∞–Ω—Ç 3: –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç "–ê—Ä—Ç–∏—Å—Ç - –ù–∞–∑–≤–∞–Ω–∏–µ")
              const fullText = $track.text().trim();
              const dashMatch = fullText.match(/^(.+?)\\s*[-‚Äì‚Äî]\\s*(.+)$/);
              
              if (dashMatch) {
                artist = dashMatch[1].trim();
                title = dashMatch[2].trim();
              }
            }
          }
          
          // –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
          const duration = $track.find('.duration, .time, .length').first().text().trim() || 
                          $track.attr('data-duration') || '';
          
          const album = $track.find('.album, .album-name').first().text().trim() || 
                       $track.attr('data-album') || '';
          
          if (artist && title) {
            tracks.push({
              artist: cleanText(artist),
              title: cleanText(title),
              duration: duration || undefined,
              album: album || undefined
            });
            
            if (index < 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
              console.log(`  üé§ ${artist} - ${title}`);
            }
          }
        });
        
        break; // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç—Ä–µ–∫–∏, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
      }
    }
    
    if (!foundTracks) {
      console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏, –ø—Ä–æ–±—É–µ–º JSON –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö...');
      
      // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JavaScript –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const scripts = $('script[type="application/ld+json"], script[type="application/json"], script:contains("track")').toArray();
      
      for (const script of scripts) {
        const scriptContent = $(script).html();
        if (scriptContent && scriptContent.includes('track')) {
          try {
            const jsonData = JSON.parse(scriptContent);
            console.log('üìã –ù–∞–π–¥–µ–Ω—ã JSON –¥–∞–Ω–Ω—ã–µ:', Object.keys(jsonData));
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É JSON –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–∫–∞—Ö
          } catch (e) {
            // –ù–µ JSON, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
          }
        }
      }
    }
    
    console.log(`‚úÖ Zvuk.com: –ò–∑–≤–ª–µ—á–µ–Ω–æ ${tracks.length} —Ç—Ä–µ–∫–æ–≤`);
    return tracks;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Zvuk.com:`, error);
    return [];
  }
}

// –ü–∞—Ä—Å–µ—Ä –¥–ª—è MTS Music
export async function parseMtsChart(url: string): Promise<RussianTrack[]> {
  try {
    console.log(`üéµ –ü–∞—Ä—Å–∏–º —á–∞—Ä—Ç MTS Music: ${url}`);
    
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const html = await response.text();
    const $ = cheerio.load(html);
    
    console.log(`üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${$('title').text()}`);
    
    const tracks: RussianTrack[] = [];
    
    // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è MTS Music
    const trackSelectors = [
      '.track',
      '.track-item',
      '.chart-track',
      '.song',
      '.music-item',
      '[data-track]',
      '.playlist-item',
      '.audio-item'
    ];
    
    let foundTracks = false;
    
    for (const selector of trackSelectors) {
      const trackElements = $(selector);
      
      if (trackElements.length > 0) {
        console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${trackElements.length} —Ç—Ä–µ–∫–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
        foundTracks = true;
        
        trackElements.each((index, element) => {
          const $track = $(element);
          
          // –ò—â–µ–º –∞—Ä—Ç–∏—Å—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
          let artist = '';
          let title = '';
          
          // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞—Ä—Ç–∏—Å—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
          const artistSelectors = ['.artist', '.performer', '.author', '.track-artist'];
          const titleSelectors = ['.title', '.name', '.track-title', '.song-title'];
          
          for (const artistSel of artistSelectors) {
            const artistEl = $track.find(artistSel).first();
            if (artistEl.length && artistEl.text().trim()) {
              artist = artistEl.text().trim();
              break;
            }
          }
          
          for (const titleSel of titleSelectors) {
            const titleEl = $track.find(titleSel).first();
            if (titleEl.length && titleEl.text().trim()) {
              title = titleEl.text().trim();
              break;
            }
          }
          
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ data-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö
          if (!artist || !title) {
            artist = artist || $track.attr('data-artist') || $track.attr('data-performer') || '';
            title = title || $track.attr('data-title') || $track.attr('data-name') || '';
          }
          
          // –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ (—Ñ–æ—Ä–º–∞—Ç "–ê—Ä—Ç–∏—Å—Ç - –ù–∞–∑–≤–∞–Ω–∏–µ")
          if (!artist || !title) {
            const fullText = $track.text().trim();
            const dashMatch = fullText.match(/^(.+?)\\s*[-‚Äì‚Äî]\\s*(.+)$/);
            
            if (dashMatch) {
              artist = dashMatch[1].trim();
              title = dashMatch[2].trim();
            }
          }
          
          if (artist && title) {
            tracks.push({
              artist: cleanText(artist),
              title: cleanText(title)
            });
            
            if (index < 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
              console.log(`  üé§ ${artist} - ${title}`);
            }
          }
        });
        
        break;
      }
    }
    
    if (!foundTracks) {
      console.log('‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã...');
      
      // –ò—â–µ–º –ª—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º, –ø–æ—Ö–æ–∂–∏–º –Ω–∞ "–∞—Ä—Ç–∏—Å—Ç - –ø–µ—Å–Ω—è"
      const allElements = $('*').filter((_, el) => {
        const text = $(el).text().trim();
        return text.length > 10 && text.length < 200 && text.includes(' - ');
      });
      
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${allElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –¥–µ—Ñ–∏—Å–∞–º–∏`);
      
      allElements.each((index, element) => {
        if (tracks.length >= 50) return; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 —Ç—Ä–µ–∫–æ–≤
        
        const text = $(element).text().trim();
        const dashMatch = text.match(/^(.+?)\\s*[-‚Äì‚Äî]\\s*(.+)$/);
        
        if (dashMatch) {
          const artist = cleanText(dashMatch[1]);
          const title = cleanText(dashMatch[2]);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫
          if (artist.length > 2 && title.length > 2 && 
              !artist.includes('¬©') && !title.includes('http')) {
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–≥–æ —Ç—Ä–µ–∫–∞ –µ—â–µ –Ω–µ—Ç
            const isDuplicate = tracks.some(t => 
              t.artist.toLowerCase() === artist.toLowerCase() && 
              t.title.toLowerCase() === title.toLowerCase()
            );
            
            if (!isDuplicate) {
              tracks.push({ artist, title });
              
              if (tracks.length <= 5) {
                console.log(`  üé§ ${artist} - ${title}`);
              }
            }
          }
        }
      });
    }
    
    console.log(`‚úÖ MTS Music: –ò–∑–≤–ª–µ—á–µ–Ω–æ ${tracks.length} —Ç—Ä–µ–∫–æ–≤`);
    return tracks;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ MTS Music:`, error);
    return [];
  }
}

// –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
function cleanText(text: string): string {
  return text
    .replace(/\\s+/g, ' ') // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–∏–Ω
    .replace(/[\\u200B-\\u200D\\uFEFF]/g, '') // –ù–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    .trim();
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ —Ç—Ä–µ–∫–æ–≤
export function extractUniqueArtists(tracks: RussianTrack[]): string[] {
  const artists = new Set<string>();
  
  tracks.forEach(track => {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
    artists.add(track.artist);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏—á–µ—Ä–∏–Ω–≥ (feat., ft., –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏)
    const featMatch = track.artist.match(/^(.+?)\\s*(?:feat\\.|ft\\.|–ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏|featuring)\\s*(.+)$/i);
    if (featMatch) {
      artists.add(featMatch[1].trim()); // –û—Å–Ω–æ–≤–Ω–æ–π –∞—Ä—Ç–∏—Å—Ç
      artists.add(featMatch[2].trim()); // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ &, –∏, x
    const collabMatch = track.artist.match(/^(.+?)\\s*(?:&|–∏|x|√ó)\\s*(.+)$/i);
    if (collabMatch) {
      artists.add(collabMatch[1].trim());
      artists.add(collabMatch[2].trim());
    }
  });
  
  return Array.from(artists)
    .filter(artist => artist.length > 1)
    .sort();
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤
export async function testRussianParsers(): Promise<void> {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–û–°–°–ò–ô–°–ö–ò–• –ü–ê–†–°–ï–†–û–í\\n');
  
  // –¢–µ—Å—Ç Zvuk.com
  console.log('üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º Zvuk.com...');
  const zvukTracks = await parseZvukPlaylist('https://zvuk.com/playlist/1062105');
  const zvukArtists = extractUniqueArtists(zvukTracks);
  console.log(`üé§ Zvuk.com: ${zvukTracks.length} —Ç—Ä–µ–∫–æ–≤, ${zvukArtists.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤\\n`);
  
  // –¢–µ—Å—Ç MTS Music
  console.log('üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º MTS Music...');
  const mtsTracks = await parseMtsChart('https://music.mts.ru/chart');
  const mtsArtists = extractUniqueArtists(mtsTracks);
  console.log(`üé§ MTS Music: ${mtsTracks.length} —Ç—Ä–µ–∫–æ–≤, ${mtsArtists.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤\\n`);
  
  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const allArtists = new Set([...zvukArtists, ...mtsArtists]);
  console.log(`üìä –ò–¢–û–ì–û: ${allArtists.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ ${zvukTracks.length + mtsTracks.length} —Ç—Ä–µ–∫–æ–≤`);
  
  if (allArtists.size > 0) {
    console.log('\\nüéâ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –ø–∞—Ä—Å–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç!');
    console.log('–ü—Ä–∏–º–µ—Ä—ã –∞—Ä—Ç–∏—Å—Ç–æ–≤:', Array.from(allArtists).slice(0, 10).join(', '));
  } else {
    console.log('\\nüòû –ü–∞—Ä—Å–µ—Ä—ã –Ω–µ —Å–º–æ–≥–ª–∏ –∏–∑–≤–ª–µ—á—å –∞—Ä—Ç–∏—Å—Ç–æ–≤');
  }
}